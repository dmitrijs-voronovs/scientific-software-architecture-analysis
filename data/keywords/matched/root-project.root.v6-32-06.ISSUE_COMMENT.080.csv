id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/12993:373,usability,help,help,373,"This works now after the upgrade to LLVM 16:. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Dec 11 2023, 13:58:33 |. | From heads/master@v6-31-01-496-g020287b02c |. | With g++ (GCC) 13.2.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] __cplusplus. (long) 202002. root [1] #include <source_location>. root [2] auto loc = std::source_location::current();. root [3] loc. (std::source_location &) @0x7fde927b2000. root [4] loc.file_name(). (const char *) ""ROOT_prompt_2"". root [5] loc.line(). (unsigned int) 1. root [6] loc.column(). (unsigned int) 12. root [7] loc.function_name(). (const char *) ""void __cling_Un1Qu31(void *)"". ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12993
https://github.com/root-project/root/pull/12994:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12994
https://github.com/root-project/root/pull/12994:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12994
https://github.com/root-project/root/pull/12995:213,integrability,sub,sub-branch,213,> Very nice! I'd just also convert the trailing dot into an underscore for the time being. The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:250,integrability,sub,sub,250,> Very nice! I'd just also convert the trailing dot into an underscore for the time being. The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:280,integrability,sub,sub,280,> Very nice! I'd just also convert the trailing dot into an underscore for the time being. The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:352,interoperability,semant,semantic,352,> Very nice! I'd just also convert the trailing dot into an underscore for the time being. The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:79,performance,time,time,79,> Very nice! I'd just also convert the trailing dot into an underscore for the time being. The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:129,usability,indicat,indicating,129,> Very nice! I'd just also convert the trailing dot into an underscore for the time being. The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:149,usability,user,user,149,> Very nice! I'd just also convert the trailing dot into an underscore for the time being. The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:503,deployability,build,build,503,"> > Very nice! I'd just also convert the trailing dot into an underscore for the time being. > . > The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`). Ok, we can still change that. I'll merge it now so that we have something working, because we could use a nightly build with this feature for tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:221,integrability,sub,sub-branch,221,"> > Very nice! I'd just also convert the trailing dot into an underscore for the time being. > . > The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`). Ok, we can still change that. I'll merge it now so that we have something working, because we could use a nightly build with this feature for tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:258,integrability,sub,sub,258,"> > Very nice! I'd just also convert the trailing dot into an underscore for the time being. > . > The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`). Ok, we can still change that. I'll merge it now so that we have something working, because we could use a nightly build with this feature for tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:288,integrability,sub,sub,288,"> > Very nice! I'd just also convert the trailing dot into an underscore for the time being. > . > The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`). Ok, we can still change that. I'll merge it now so that we have something working, because we could use a nightly build with this feature for tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:360,interoperability,semant,semantic,360,"> > Very nice! I'd just also convert the trailing dot into an underscore for the time being. > . > The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`). Ok, we can still change that. I'll merge it now so that we have something working, because we could use a nightly build with this feature for tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:81,performance,time,time,81,"> > Very nice! I'd just also convert the trailing dot into an underscore for the time being. > . > The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`). Ok, we can still change that. I'll merge it now so that we have something working, because we could use a nightly build with this feature for tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:137,usability,indicat,indicating,137,"> > Very nice! I'd just also convert the trailing dot into an underscore for the time being. > . > The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`). Ok, we can still change that. I'll merge it now so that we have something working, because we could use a nightly build with this feature for tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12995:157,usability,user,user,157,"> > Very nice! I'd just also convert the trailing dot into an underscore for the time being. > . > The trailing dot is a `TTree` feature indicating that the user wanted to have the top level name actually prefixed in the sub-branch names (I.e. `mother` and `sub` vs `mother.` and `mother.sub`) so I think we ought to drop the trailing dot (since/if it has not semantic uses in `RNTuple`). Ok, we can still change that. I'll merge it now so that we have something working, because we could use a nightly build with this feature for tomorrow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12995
https://github.com/root-project/root/pull/12996:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:76,interoperability,platform,platforms,76,Thanks @mkrzewic! We kicked off testing to make sure it doesn't break other platforms. I will take a closer look tomorrow :wink:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:56,reliability,doe,doesn,56,Thanks @mkrzewic! We kicked off testing to make sure it doesn't break other platforms. I will take a closer look tomorrow :wink:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:32,safety,test,testing,32,Thanks @mkrzewic! We kicked off testing to make sure it doesn't break other platforms. I will take a closer look tomorrow :wink:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:32,testability,test,testing,32,Thanks @mkrzewic! We kicked off testing to make sure it doesn't break other platforms. I will take a closer look tomorrow :wink:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:101,usability,close,closer,101,Thanks @mkrzewic! We kicked off testing to make sure it doesn't break other platforms. I will take a closer look tomorrow :wink:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:39,deployability,build,building,39,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:118,deployability,fail,fail,118,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:185,deployability,fail,fail,185,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:225,deployability,fail,fail,225,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:376,performance,time,time,376,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:118,reliability,fail,fail,118,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:185,reliability,fail,fail,185,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:225,reliability,fail,fail,225,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:112,safety,test,tests,112,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:219,safety,test,tests,219,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:112,testability,test,tests,112,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:219,testability,test,tests,219,"I have one more question, this gets it building and kinda working, but there are still runtime issues: bunch of tests fail, most notably some io (basic works, higher compression levels fail) and threading (some TThread tests fail, for various reasons, from trivial _REENTRANT macro not defined, to proper crashes). Question is: keep adding to this PR or open a new issue some time in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:97,deployability,fail,fail,97,"New issues, new PRs please - we prefer to work incrementally, grandiose things have the habit to fail :-) I very much appreciate this first step to make it build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:156,deployability,build,build,156,"New issues, new PRs please - we prefer to work incrementally, grandiose things have the habit to fail :-) I very much appreciate this first step to make it build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:97,reliability,fail,fail,97,"New issues, new PRs please - we prefer to work incrementally, grandiose things have the habit to fail :-) I very much appreciate this first step to make it build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:32,usability,prefer,prefer,32,"New issues, new PRs please - we prefer to work incrementally, grandiose things have the habit to fail :-) I very much appreciate this first step to make it build!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:10,availability,down,downplay,10,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:376,availability,state,state,376,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:368,energy efficiency,current,current,368,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:376,integrability,state,state,376,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:174,safety,test,tests,174,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:256,safety,test,tests,256,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:404,safety,review,review,404,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:45,testability,understand,understanding,45,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:174,testability,test,tests,174,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:256,testability,test,tests,256,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:404,testability,review,review,404,"Let's not downplay the achievement here - my understanding is that this PR not only allows to compile ROOT on FreeBSD, but gets us a decently functional executable for first tests and further improvements :rocket: I agree with Axel that other problems and tests should be addressed in future issues / PRs. I think the final point to consider is how to merge. With the current state of commits addressing review comments, I would propose to squash on merge; unless @mkrzewic wants to rework the commits and fold the followups into the respective commits :wink:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:98,deployability,version,version,98,Thanks @hahnjo - @mkrzewic unless you have any objection I will merge this tomorrow in a squashed version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:98,integrability,version,version,98,Thanks @hahnjo - @mkrzewic unless you have any objection I will merge this tomorrow in a squashed version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:98,modifiability,version,version,98,Thanks @hahnjo - @mkrzewic unless you have any objection I will merge this tomorrow in a squashed version.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/pull/12996:154,modifiability,variab,variable,154,"We forgot to run the old Jenkins CI for the latest push (that is on us), https://github.com/root-project/root/pull/13073 takes care of an `unused-but-set-variable` warning...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12996
https://github.com/root-project/root/issues/13000:183,deployability,infrastructur,infrastructure,183,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:58,energy efficiency,load,load,58,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:175,energy efficiency,current,current,175,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:272,energy efficiency,reduc,reduce,272,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:385,energy efficiency,load,loading,385,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:58,performance,load,load,58,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:283,performance,memor,memory,283,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:385,performance,load,loading,385,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:903,safety,avoid,avoided,903,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:782,security,ident,identifier,782,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:283,usability,memor,memory,283,"> The best would be for ROOT to be smart enough to lazily load the pcms when they are actually needed, not upfront. Yes, and unfortunately that is as good as it gets with the current infrastructure. Here I've put a bit more details about what could be improved to further reduce the memory footprint: https://github.com/cms-sw/cmssw/issues/41810#issuecomment-1578982627. Note that the loading of the pcm files is mmap-ed and is a no-op. The problem is that some sections of the PCMs are not lazy and they are eagerly deserialized. Using a PCH won't make the things much better since the PCH still deserializes eagerly some sections. That is, the deficiency is not in ROOT but in Clang itself. Could you rerun using `export ROOTDEBUG=7` and attach the output. Sometimes we lookup an identifier like `I` or something which is not found and it triggers deserialization of entities. That sometimes could be avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:245,interoperability,share,shared,245,"I will provide you the output for ROOTDEBUG=7. Could you elaborate a bit on the mmap? I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:231,performance,memor,memory,231,"I will provide you the output for ROOTDEBUG=7. Could you elaborate a bit on the mmap? I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:231,usability,memor,memory,231,"I will provide you the output for ROOTDEBUG=7. Could you elaborate a bit on the mmap? I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1048,availability,down,down,1048,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:435,deployability,Modul,ModuleManager,435,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:527,energy efficiency,load,loading,527,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1022,energy efficiency,load,loaded,1022,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1252,energy efficiency,load,loading,1252,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:812,interoperability,share,shared,812,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1303,interoperability,registr,registration,1303,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:435,modifiability,Modul,ModuleManager,435,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:176,performance,memor,memory,176,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:527,performance,load,loading,527,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:798,performance,memor,memory,798,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:998,performance,disk,disk,998,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1022,performance,load,loaded,1022,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1252,performance,load,loading,1252,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:146,reliability,pra,practically,146,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:435,safety,Modul,ModuleManager,435,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1088,safety,avoid,avoid,1088,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:500,security,ident,identifier,500,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:176,usability,memor,memory,176,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:405,usability,tool,tools,405,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:798,usability,memor,memory,798,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1152,usability,help,help,1152,"> I will provide you the output for ROOTDEBUG=7. > . > Could you elaborate a bit on the mmap? The pcm files are ""mmapped"" when being opened. That practically uses some virtual memory with the promise it won't increase your rss, unless something is needed from that file. Here is how this is achieved: https://github.com/root-project/root/blob/6eb7f64bd7d93c492226b1a5ea5048a149814278/interpreter/llvm/src/tools/clang/lib/Serialization/ModuleManager.cpp#L216. I believe your issue is that due to some identifier lookup we start loading pcm files which have sections that require eager deserialization where the mmap manifests into a real rss increase. > I would expect that using MAP_SHARED would be enough of a workaround for our (ALICE) use case, because what is really killing us is the fact the memory is not shared among the many processes we have. Any reason why that cannot be done? Did I misunderstand something? The reason is that the serialization in Clang has deficiencies and reads from disk when a pcm file is loaded. I've been hunting down these cases and sometimes we could avoid them. That's why I was looking for some output that could help us do that. That being said, we could make some effort to split the startup phase of ROOT into loading and initialization. Then we could move the registration of pcm files and setting up the ROOT's runtime as part of the initialization process but realistically, if you use ROOT for anything you'd probably need these both...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:228,deployability,log,log,228,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:322,deployability,log,log,322,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:383,deployability,log,log,383,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:89,energy efficiency,alloc,allocations,89,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:78,integrability,sub,subsequent,78,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:254,integrability,compon,component,254,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:254,interoperability,compon,component,254,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:254,modifiability,compon,component,254,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:228,safety,log,log,228,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:322,safety,log,log,322,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:383,safety,log,log,383,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:228,security,log,log,228,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:322,security,log,log,322,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:383,security,log,log,383,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:228,testability,log,log,228,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:322,testability,log,log,322,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:383,testability,log,log,383,"Ok, so you are saying that it's not the mmaping to cause the problem, but the subsequent allocations due to some deserialisation. Ok, I checked and indeed the mmap is called with MAP_SHARED... Find in attachment the ROOTDEBUG=7 log. This is only for the component which reads the flat root files (i.e. only basic types). [log.txt](https://github.com/root-project/root/files/11745345/log.txt).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:17,deployability,log,log,17,According to the log ROOT is looking up `Experimental` (which is a namespace) and pulls in all modules that have namespace partitions with the name `Experimental`. We have tried to improve that with https://github.com/root-project/root/pull/10969 but probably missed some bit. Would applying it help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:95,deployability,modul,modules,95,According to the log ROOT is looking up `Experimental` (which is a namespace) and pulls in all modules that have namespace partitions with the name `Experimental`. We have tried to improve that with https://github.com/root-project/root/pull/10969 but probably missed some bit. Would applying it help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:95,modifiability,modul,modules,95,According to the log ROOT is looking up `Experimental` (which is a namespace) and pulls in all modules that have namespace partitions with the name `Experimental`. We have tried to improve that with https://github.com/root-project/root/pull/10969 but probably missed some bit. Would applying it help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:17,safety,log,log,17,According to the log ROOT is looking up `Experimental` (which is a namespace) and pulls in all modules that have namespace partitions with the name `Experimental`. We have tried to improve that with https://github.com/root-project/root/pull/10969 but probably missed some bit. Would applying it help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:95,safety,modul,modules,95,According to the log ROOT is looking up `Experimental` (which is a namespace) and pulls in all modules that have namespace partitions with the name `Experimental`. We have tried to improve that with https://github.com/root-project/root/pull/10969 but probably missed some bit. Would applying it help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:17,security,log,log,17,According to the log ROOT is looking up `Experimental` (which is a namespace) and pulls in all modules that have namespace partitions with the name `Experimental`. We have tried to improve that with https://github.com/root-project/root/pull/10969 but probably missed some bit. Would applying it help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:17,testability,log,log,17,According to the log ROOT is looking up `Experimental` (which is a namespace) and pulls in all modules that have namespace partitions with the name `Experimental`. We have tried to improve that with https://github.com/root-project/root/pull/10969 but probably missed some bit. Would applying it help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:295,usability,help,help,295,According to the log ROOT is looking up `Experimental` (which is a namespace) and pulls in all modules that have namespace partitions with the name `Experimental`. We have tried to improve that with https://github.com/root-project/root/pull/10969 but probably missed some bit. Would applying it help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:133,deployability,log,log,133,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:139,deployability,log,log,139,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:203,deployability,log,log,203,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:88,energy efficiency,alloc,allocated,88,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:133,safety,log,log,133,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:139,safety,log,log,139,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:203,safety,log,log,203,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:133,security,log,log,133,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:139,security,log,log,139,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:203,security,log,log,203,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:133,testability,log,log,133,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:139,testability,log,log,139,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:203,testability,log,log,203,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4,usability,behavi,behavior,4,"The behavior seems to have indeed changed, yet I still see the same amount of RSS being allocated in the same codepath. See attached log. [log.txt.gz](https://github.com/root-project/root/files/11757238/log.txt.gz).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:33,availability,Down,Downloads,33,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:43,deployability,log,log,43,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1168,deployability,modul,modules,1168,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1229,deployability,modul,modules,1229,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:107,energy efficiency,Load,Loading,107,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:116,energy efficiency,Core,Core,116,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:180,energy efficiency,Load,Loading,180,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:256,energy efficiency,Load,Loading,256,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:334,energy efficiency,Load,Loading,334,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:405,energy efficiency,Load,Loading,405,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:477,energy efficiency,Load,Loading,477,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:559,energy efficiency,Load,Loading,559,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:666,energy efficiency,Load,Loading,666,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:743,energy efficiency,Load,Loading,743,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:824,energy efficiency,Load,Loading,824,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:893,energy efficiency,Load,Loading,893,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:977,energy efficiency,Load,Loading,977,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1050,energy efficiency,Load,Loading,1050,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1152,energy efficiency,load,load,1152,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1168,modifiability,modul,modules,1168,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1229,modifiability,modul,modules,1229,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:107,performance,Load,Loading,107,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:180,performance,Load,Loading,180,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:256,performance,Load,Loading,256,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:334,performance,Load,Loading,334,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:405,performance,Load,Loading,405,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:477,performance,Load,Loading,477,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:559,performance,Load,Loading,559,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:666,performance,Load,Loading,666,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:743,performance,Load,Loading,743,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:824,performance,Load,Loading,824,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:893,performance,Load,Loading,893,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:977,performance,Load,Loading,977,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1050,performance,Load,Loading,1050,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1152,performance,load,load,1152,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:43,safety,log,log,43,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:434,safety,compl,complex,434,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1168,safety,modul,modules,1168,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1229,safety,modul,modules,1229,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:43,security,log,log,43,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:434,security,compl,complex,434,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:43,testability,log,log,43,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:17,usability,User,Users,17,"@ktf,. ```. cat /Users/vvassilev/Downloads/log\ 2.txt | grep 'on demand'. [89725:internal-dpl-aod-reader]: Loading 'Core' on demand for 'TArrayF'. [89725:internal-dpl-aod-reader]: Loading 'Cling_Runtime' on demand for 'T'. [89725:internal-dpl-aod-reader]: Loading 'Smatrix' on demand for 'MatRepStd'. [89725:internal-dpl-aod-reader]: Loading 'MathCore' on demand for 'R'. [89725:internal-dpl-aod-reader]: Loading 'std' on demand for 'complex'. [89725:internal-dpl-aod-reader]: Loading 'GenVector' on demand for 'Cartesian2D'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Foundation_Stage1_NoRTTI' on demand for 'TVirtualIsAProxy'. [89725:internal-dpl-aod-reader]: Loading 'Tree' on demand for 'TIOFeatures'. [89725:internal-dpl-aod-reader]: Loading 'MultiProc' on demand for 'ReadBuffer'. [89725:internal-dpl-aod-reader]: Loading 'Hist' on demand for 'TH1'. [89725:internal-dpl-aod-reader]: Loading 'TreePlayer' on demand for 'TTreeFormula'. [89725:internal-dpl-aod-reader]: Loading 'RIO' on demand for 'TMapFile'. [89725:internal-dpl-aod-reader]: Loading 'ROOT_Rtypes' on demand for 'UChar_t'. ```. Looks quite good. However, for some reason we pre-load a lot more modules than I expect. Do you have an up-to-date ROOTSYS/lib/modules.idx file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:95,availability,down,down,95,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:32,deployability,build,building,32,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:123,deployability,modul,modules,123,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:192,deployability,modul,modules,192,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:106,interoperability,specif,specific,106,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:115,interoperability,prox,proxy,115,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:123,modifiability,modul,modules,123,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:192,modifiability,modul,modules,192,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:123,safety,modul,modules,123,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:192,safety,modul,modules,192,I have whatever is generated by building ROOT 6.28.4. I attached it. Is there a way to trim it down for a specific proxy? [modules.idx.zip](https://github.com/root-project/root/files/11801809/modules.idx.zip).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:69,performance,overhead,overhead,69,Anything else we can try here? I would really love to get rid of the overhead from ROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:111,availability,slo,slow,111,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:734,availability,state,state,734,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:211,deployability,patch,patch,211,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:316,deployability,build,build,316,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:751,deployability,modul,modules,751,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:951,deployability,build,build,951,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:458,energy efficiency,load,loads,458,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:842,energy efficiency,load,loads,842,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:734,integrability,state,state,734,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:942,interoperability,standard,standard,942,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:751,modifiability,modul,modules,751,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:71,performance,overhead,overhead,71,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:458,performance,load,loads,458,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:535,performance,time,time,535,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:575,performance,time,time,575,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:605,performance,time,time,605,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:696,performance,memor,memory,696,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:842,performance,load,loads,842,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:111,reliability,slo,slow,111,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:217,reliability,doe,does,217,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:211,safety,patch,patch,211,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:751,safety,modul,modules,751,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:211,security,patch,patch,211,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:570,usability,User,User,570,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:696,usability,memor,memory,696,> Anything else we can try here? I would really love to get rid of the overhead from ROOT. Apologies for being slow. I am attending a workshop these past several days... This is what ROOT (without the suggested patch does for me):. ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 21. vvassilev@vv-nuc /build/vvassilev/root_build $ ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 35. Essentially it loads 56 pcm files at startup. That's still pretty bad but not 100. /usr/bin/time -v root.exe -l -b -q shows . 	User time (seconds): 0.08. 	System time (seconds): 0.04. 	Maximum resident set size (kbytes): 179344. Still probably too much memory being used but that's what the state of the art modules technology allows us. The numbers are not great but not I cannot reproduce the pcm loads that you report. Can you prepare some debug environment for me to check it out. I will need a standard build of ROOT perhaps with `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1768,availability,fault,faults,1768,"alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1811,availability,fault,faults,1811,"an safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3110,availability,fault,faults,3110,"loading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3153,availability,fault,faults,3153,"mand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1602,deployability,stack,stack,1602,"h/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2944,deployability,stack,stack,2944," 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3830,deployability,modul,module,3830,"mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Threa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3891,deployability,modul,module,3891,". Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3946,deployability,modul,module,3946," size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4007,deployability,modul,module,4007,"sident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4895,deployability,modul,modules,4895,"mt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preload",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4987,deployability,modul,module,4987,"ule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5043,deployability,modul,module,5043," =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5098,deployability,modul,module,5098,"1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5169,deployability,modul,module,5169,".exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5238,deployability,modul,module,5238,". --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5301,deployability,modul,module,5301,"tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadMod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5364,deployability,modul,module,5364," @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5445,deployability,modul,module,5445,"+8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5501,deployability,modul,module,5501,"e'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadMo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5557,deployability,modul,module,5557,". 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__L",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5612,deployability,modul,module,5612,"'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5672,deployability,modul,module,5672,oundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__Lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5728,deployability,modul,module,5728,e'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5786,deployability,modul,module,5786,. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TClin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5848,deployability,modul,module,5848,'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5903,deployability,modul,module,5903,ng preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5966,deployability,modul,module,5966,dule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCli,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6023,deployability,modul,module,6023,ule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6081,deployability,modul,module,6081,>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6138,deployability,modul,module,6138,::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. In,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6198,deployability,modul,module,6198,n <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6260,deployability,modul,module,6260,in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6321,deployability,modul,module,6321,o in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6378,deployability,modul,module,6378,ation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCli,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6441,deployability,modul,module,6441, module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6522,deployability,modul,module,6522,ling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6583,deployability,modul,module,6583,__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6642,deployability,modul,module,6642,:__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6697,deployability,modul,module,6697,::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6759,deployability,modul,module,6759,LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: P,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6818,deployability,modul,module,6818,:__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Prelo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6889,deployability,modul,module,6889,Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module Ro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6943,deployability,modul,module,6943,Module>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading m,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6999,deployability,modul,module,6999,dModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7062,deployability,modul,module,7062,le>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7122,deployability,modul,module,7122,: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7182,deployability,modul,module,7182,: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7240,deployability,modul,module,7240,ule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7296,deployability,modul,module,7296,adModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7352,deployability,modul,module,7352,oadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7411,deployability,modul,module,7411,:__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloadin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7482,deployability,modul,module,7482,n <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module M,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7538,deployability,modul,module,7538,nfo in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7597,deployability,modul,module,7597,nfo in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7659,deployability,modul,module,7659,<TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7714,deployability,modul,module,7714,nfo in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7772,deployability,modul,module,7772,Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7827,deployability,modul,module,7827,MVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7883,deployability,modul,module,7883,ng module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__Lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7945,deployability,modul,module,7945,e Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8000,deployability,modul,module,8000,le HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TClin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8065,deployability,modul,module,8065, Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8126,deployability,modul,module,8126,Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8183,deployability,modul,module,8183,le Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8241,deployability,modul,module,8241,le Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8297,deployability,modul,module,8297,le Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8360,deployability,modul,module,8360,tml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8416,deployability,modul,module,8416,Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadMod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8477,deployability,modul,module,8477,g module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8538,deployability,modul,module,8538,ule TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8598,deployability,modul,module,8598,le Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__Lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8673,deployability,modul,module,8673,in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Prelo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8736,deployability,modul,module,8736,Cling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading m,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8793,deployability,modul,module,8793,ing::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8848,deployability,modul,module,8848,ling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8908,deployability,modul,module,8908,TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadMod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8966,deployability,modul,module,8966,ing::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9032,deployability,modul,module,9032,ng::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9094,deployability,modul,module,9094,g::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9149,deployability,modul,module,9149,ing::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9206,deployability,modul,module,9206,ling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9263,deployability,modul,module,9263,ing::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9326,deployability,modul,module,9326,ing::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9381,deployability,modul,module,9381,ling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. I,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9436,deployability,modul,module,9436,in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9495,deployability,modul,module,9495,o in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9560,deployability,modul,module,9560,<TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9623,deployability,modul,module,9623,rs. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9682,deployability,modul,module,9682,uilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9738,deployability,modul,module,9738,e Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9807,deployability,modul,module,9807,in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9867,deployability,modul,module,9867,in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9928,deployability,modul,module,9928,<TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9984,deployability,modul,module,9984,. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10051,deployability,modul,module,10051,o in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10110,deployability,modul,module,10110, <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10166,deployability,modul,module,10166,n <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10221,deployability,modul,module,10221, in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10286,deployability,modul,module,10286,n <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10347,deployability,modul,module,10347,ing::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10426,deployability,modul,module,10426,oading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10484,deployability,modul,module,10484,loading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10542,deployability,modul,module,10542,e>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10602,deployability,modul,module,10602,dule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10658,deployability,modul,module,10658,dModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10716,deployability,modul,module,10716,odule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10778,deployability,modul,module,10778,__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10834,deployability,modul,module,10834,ng::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10890,deployability,modul,module,10890,<TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10946,deployability,modul,module,10946,<TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11012,deployability,modul,module,11012, <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11074,deployability,modul,module,11074,Cling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11145,deployability,modul,module,11145,dule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on dema,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11205,deployability,modul,module,11205,: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Ext,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11263,deployability,modul,module,11263,Module>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11322,deployability,modul,module,11322,adModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11385,deployability,modul,module,11385,in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11447,deployability,modul,module,11447,TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterf,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11518,deployability,modul,module,11518,dModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11577,deployability,modul,module,11577,adModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11642,deployability,modul,module,11642,: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11700,deployability,modul,module,11700,: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11756,deployability,modul,module,11756,odule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/publi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11812,deployability,modul,module,11812,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11870,deployability,modul,module,11870,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11925,deployability,modul,module,11925,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11980,deployability,modul,module,11980,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12041,deployability,modul,module,12041,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12096,deployability,modul,module,12096,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12151,deployability,modul,modules,12151,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:300,energy efficiency,load,loaded,300,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:567,energy efficiency,profil,profile,567,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:658,energy efficiency,profil,profile,658,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:785,energy efficiency,profil,profile,785,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1439,energy efficiency,CPU,CPU,1439,"RCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1476,energy efficiency,clock,clock,1476,"alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/publi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1768,energy efficiency,fault,faults,1768,"alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1811,energy efficiency,fault,faults,1811,"an safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2098,energy efficiency,load,loaded,2098,"ulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2781,energy efficiency,CPU,CPU,2781,"r (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2818,energy efficiency,clock,clock,2818,"647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Pr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3110,energy efficiency,fault,faults,3110,"loading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3153,energy efficiency,fault,faults,3153,"mand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3458,energy efficiency,load,loading,3458," -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4414,energy efficiency,Core,Core,4414," The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TClin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5452,energy efficiency,Core,Core,5452,"@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_F",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10117,energy efficiency,Core,Core,10117,ng::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11707,energy efficiency,Core,Core,11707,oading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12214,energy efficiency,Core,Core,12214,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:841,integrability,messag,message,841,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1958,integrability,messag,messages,1958," the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1983,integrability,messag,messages,1983,"isse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2262,integrability,pub,public,2262,"07.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2350,integrability,pub,public,2350,"oot.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signal",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2474,integrability,pub,public,2474,"lock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2535,integrability,pub,public,2535,"ze (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 ro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2695,integrability,pub,public,2695,"16. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.21430",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3300,integrability,messag,messages,3300,"wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3325,integrability,messag,messages,3325," root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3556,integrability,pub,public,3556,"e0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4081,integrability,pub,public,4081,"ajor (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12754,integrability,pub,public,12754,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:841,interoperability,messag,message,841,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1524,interoperability,share,shared,1524,"el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1951,interoperability,Socket,Socket,1951," roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1958,interoperability,messag,messages,1958," the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1976,interoperability,Socket,Socket,1976,"h. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average tot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1983,interoperability,messag,messages,1983,"isse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2866,interoperability,share,shared,2866,"ry context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__Lo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3293,interoperability,Socket,Socket,3293,"ading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +020",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3300,interoperability,messag,messages,3300,"wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3318,interoperability,Socket,Socket,3318,"TDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 202",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3325,interoperability,messag,messages,3325," root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4869,interoperability,XML,XMLIO,4869,"odule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8423,interoperability,XML,XMLParser,8423,ntrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Pre,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9213,interoperability,XML,XMLIO,9213,_LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12682,interoperability,XML,XMLIO,12682,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:453,modifiability,Pac,Packages,453,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:538,modifiability,Pac,Packages,538,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:618,modifiability,Pac,Packages,618,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:745,modifiability,Pac,Packages,745,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3830,modifiability,modul,module,3830,"mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Threa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3891,modifiability,modul,module,3891,". Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3946,modifiability,modul,module,3946," size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4007,modifiability,modul,module,4007,"sident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4895,modifiability,modul,modules,4895,"mt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preload",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4987,modifiability,modul,module,4987,"ule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5043,modifiability,modul,module,5043," =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5098,modifiability,modul,module,5098,"1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5169,modifiability,modul,module,5169,".exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5238,modifiability,modul,module,5238,". --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5301,modifiability,modul,module,5301,"tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadMod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5364,modifiability,modul,module,5364," @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5445,modifiability,modul,module,5445,"+8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5501,modifiability,modul,module,5501,"e'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadMo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5557,modifiability,modul,module,5557,". 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__L",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5612,modifiability,modul,module,5612,"'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5672,modifiability,modul,module,5672,oundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__Lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5728,modifiability,modul,module,5728,e'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5786,modifiability,modul,module,5786,. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TClin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5848,modifiability,modul,module,5848,'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5903,modifiability,modul,module,5903,ng preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5966,modifiability,modul,module,5966,dule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCli,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6023,modifiability,modul,module,6023,ule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6081,modifiability,modul,module,6081,>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6138,modifiability,modul,module,6138,::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. In,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6198,modifiability,modul,module,6198,n <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6260,modifiability,modul,module,6260,in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6321,modifiability,modul,module,6321,o in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6378,modifiability,modul,module,6378,ation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCli,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6441,modifiability,modul,module,6441, module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6522,modifiability,modul,module,6522,ling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6583,modifiability,modul,module,6583,__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6642,modifiability,modul,module,6642,:__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6697,modifiability,modul,module,6697,::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6759,modifiability,modul,module,6759,LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: P,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6818,modifiability,modul,module,6818,:__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Prelo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6889,modifiability,modul,module,6889,Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module Ro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6943,modifiability,modul,module,6943,Module>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading m,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6999,modifiability,modul,module,6999,dModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7062,modifiability,modul,module,7062,le>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7122,modifiability,modul,module,7122,: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7182,modifiability,modul,module,7182,: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7240,modifiability,modul,module,7240,ule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7296,modifiability,modul,module,7296,adModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7352,modifiability,modul,module,7352,oadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7411,modifiability,modul,module,7411,:__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloadin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7482,modifiability,modul,module,7482,n <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module M,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7538,modifiability,modul,module,7538,nfo in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7597,modifiability,modul,module,7597,nfo in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7659,modifiability,modul,module,7659,<TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7714,modifiability,modul,module,7714,nfo in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7772,modifiability,modul,module,7772,Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7827,modifiability,modul,module,7827,MVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7883,modifiability,modul,module,7883,ng module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__Lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7945,modifiability,modul,module,7945,e Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8000,modifiability,modul,module,8000,le HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TClin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8065,modifiability,modul,module,8065, Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8126,modifiability,modul,module,8126,Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8183,modifiability,modul,module,8183,le Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8241,modifiability,modul,module,8241,le Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8297,modifiability,modul,module,8297,le Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8360,modifiability,modul,module,8360,tml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8416,modifiability,modul,module,8416,Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadMod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8477,modifiability,modul,module,8477,g module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8538,modifiability,modul,module,8538,ule TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8598,modifiability,modul,module,8598,le Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__Lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8673,modifiability,modul,module,8673,in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Prelo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8736,modifiability,modul,module,8736,Cling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading m,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8793,modifiability,modul,module,8793,ing::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8848,modifiability,modul,module,8848,ling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8908,modifiability,modul,module,8908,TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadMod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8966,modifiability,modul,module,8966,ing::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9032,modifiability,modul,module,9032,ng::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9094,modifiability,modul,module,9094,g::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9149,modifiability,modul,module,9149,ing::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9206,modifiability,modul,module,9206,ling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9263,modifiability,modul,module,9263,ing::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9326,modifiability,modul,module,9326,ing::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9381,modifiability,modul,module,9381,ling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. I,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9436,modifiability,modul,module,9436,in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9495,modifiability,modul,module,9495,o in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9560,modifiability,modul,module,9560,<TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9623,modifiability,modul,module,9623,rs. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9682,modifiability,modul,module,9682,uilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9738,modifiability,modul,module,9738,e Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9807,modifiability,modul,module,9807,in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9867,modifiability,modul,module,9867,in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9928,modifiability,modul,module,9928,<TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9984,modifiability,modul,module,9984,. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10051,modifiability,modul,module,10051,o in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10110,modifiability,modul,module,10110, <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10166,modifiability,modul,module,10166,n <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10221,modifiability,modul,module,10221, in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10286,modifiability,modul,module,10286,n <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10347,modifiability,modul,module,10347,ing::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10426,modifiability,modul,module,10426,oading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10484,modifiability,modul,module,10484,loading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10542,modifiability,modul,module,10542,e>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10602,modifiability,modul,module,10602,dule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10658,modifiability,modul,module,10658,dModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10716,modifiability,modul,module,10716,odule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10778,modifiability,modul,module,10778,__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10834,modifiability,modul,module,10834,ng::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10890,modifiability,modul,module,10890,<TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10946,modifiability,modul,module,10946,<TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11012,modifiability,modul,module,11012, <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11074,modifiability,modul,module,11074,Cling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11145,modifiability,modul,module,11145,dule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on dema,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11205,modifiability,modul,module,11205,: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Ext,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11263,modifiability,modul,module,11263,Module>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11322,modifiability,modul,module,11322,adModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11385,modifiability,modul,module,11385,in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11447,modifiability,modul,module,11447,TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterf,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11518,modifiability,modul,module,11518,dModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11577,modifiability,modul,module,11577,adModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11642,modifiability,modul,module,11642,: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11700,modifiability,modul,module,11700,: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11756,modifiability,modul,module,11756,odule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/publi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11812,modifiability,modul,module,11812,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11870,modifiability,modul,module,11870,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11925,modifiability,modul,module,11925,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11980,modifiability,modul,module,11980,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12041,modifiability,modul,module,12041,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12096,modifiability,modul,module,12096,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12151,modifiability,modul,modules,12151,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:184,performance,memor,memory,184,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:300,performance,load,loaded,300,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:567,performance,profil,profile,567,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:658,performance,profil,profile,658,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:785,performance,profil,profile,785,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:939,performance,memor,memory,939,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1303,performance,time,time,1303,"d on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1344,performance,time,timed,1344,"ory:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1377,performance,time,time,1377,"vironment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1406,performance,time,time,1406,"and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1439,performance,CPU,CPU,1439,"RCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1483,performance,time,time,1483,"cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1758,performance,I/O,I/O,1758,"CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (second",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1768,performance,fault,faults,1768,"alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1811,performance,fault,faults,1811,"an safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2098,performance,load,loaded,2098,"ulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2210,performance,memor,memory,2210,"-f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2446,performance,time,time,2446,"job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2641,performance,time,timed,2641," (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Pre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2719,performance,time,time,2719,"t size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2748,performance,time,time,2748,"quiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.8",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2781,performance,CPU,CPU,2781,"r (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2825,performance,time,time,2825,"oluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloadi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3100,performance,I/O,I/O,3100,"ed, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3110,performance,fault,faults,3110,"loading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3153,performance,fault,faults,3153,"mand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3458,performance,load,loading,3458," -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1768,reliability,fault,faults,1768,"alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1811,reliability,fault,faults,1811,"an safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3110,reliability,fault,faults,3110,"loading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3153,reliability,fault,faults,3153,"mand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:26,safety,test,tests,26,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:817,safety,safe,safely,817,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1768,safety,fault,faults,1768,"alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1811,safety,fault,faults,1811,"an safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (w",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1916,safety,input,inputs,1916,"""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3110,safety,fault,faults,3110,"loading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3153,safety,fault,faults,3153,"mand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3258,safety,input,inputs,3258,"/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3830,safety,modul,module,3830,"mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Threa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3891,safety,modul,module,3891,". Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3946,safety,modul,module,3946," size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4007,safety,modul,module,4007,"sident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4895,safety,modul,modules,4895,"mt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preload",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:4987,safety,modul,module,4987,"ule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <T",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5043,safety,modul,module,5043," =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5098,safety,modul,module,5098,"1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5169,safety,modul,module,5169,".exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5238,safety,modul,module,5238,". --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadM",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5301,safety,modul,module,5301,"tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadMod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5364,safety,modul,module,5364," @@. 'Cling_Runtime'. -'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. @@ -9,7 +8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5445,safety,modul,module,5445,"+8,6 @@. 'Hist'. 'HistFactory'. 'Imt'. -'libc'. 'MathCore'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5501,safety,modul,module,5501,"e'. 'MathMore'. 'Minuit'. @@ -17,7 +15,6 @@. 'MultiProc'. 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadMo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5557,safety,modul,module,5557,". 'Net'. 'NetxNG'. -'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__L",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5612,safety,modul,module,5612,"'. @@ -26,16 +23,12 @@. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5672,safety,modul,module,5672,oundation_Stage1_NoRTTI'. -'ROOT_Rtypes'. -'ROOTTMVASofie'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__Lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5728,safety,modul,module,5728,e'. -'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5786,safety,modul,module,5786,. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. -'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TClin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5848,safety,modul,module,5848,'. 'TreePlayer'. 'XMLIO'. ```. Full list of modules being preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5903,safety,modul,module,5903,ng preloaded can be found below. ```. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5966,safety,modul,module,5966,dule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCli,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6023,safety,modul,module,6023,ule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6081,safety,modul,module,6081,>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6138,safety,modul,module,6138,::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. In,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6198,safety,modul,module,6198,n <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6260,safety,modul,module,6260,in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6321,safety,modul,module,6321,o in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6378,safety,modul,module,6378,ation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCli,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6441,safety,modul,module,6441, module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6522,safety,modul,module,6522,ling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6583,safety,modul,module,6583,__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6642,safety,modul,module,6642,:__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6697,safety,modul,module,6697,::__LoadModule>: Preloading module Unfold. Info in <TCling::__LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6759,safety,modul,module,6759,LoadModule>: Preloading module RHTTPSniff. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: P,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6818,safety,modul,module,6818,:__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Prelo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6889,safety,modul,module,6889,Preloading module HistPainter. Info in <TCling::__LoadModule>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module Ro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6943,safety,modul,module,6943,Module>: Preloading module PyMVA. Info in <TCling::__LoadModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading m,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6999,safety,modul,module,6999,dModule>: Preloading module RMySQL. Info in <TCling::__LoadModule>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7062,safety,modul,module,7062,le>: Preloading module RHTTP. Info in <TCling::__LoadModule>: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7122,safety,modul,module,7122,: Preloading module FitPanel. Info in <TCling::__LoadModule>: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7182,safety,modul,module,7182,: Preloading module ROOTVecOps. Info in <TCling::__LoadModule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7240,safety,modul,module,7240,ule>: Preloading module ProofDraw. Info in <TCling::__LoadModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7296,safety,modul,module,7296,adModule>: Preloading module Quadp. Info in <TCling::__LoadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7352,safety,modul,module,7352,oadModule>: Preloading module GeomPainter. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7411,safety,modul,module,7411,:__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloadin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7482,safety,modul,module,7482,n <TCling::__LoadModule>: Preloading module xlocale.h. Info in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module M,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7538,safety,modul,module,7538,nfo in <TCling::__LoadModule>: Preloading module Genetic. Info in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading mod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7597,safety,modul,module,7597,nfo in <TCling::__LoadModule>: Preloading module Eve. Info in <TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7659,safety,modul,module,7659,<TCling::__LoadModule>: Preloading module TreeViewer. Info in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7714,safety,modul,module,7714,nfo in <TCling::__LoadModule>: Preloading module Physics. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7772,safety,modul,module,7772,Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7827,safety,modul,module,7827,MVASofieParser. Info in <TCling::__LoadModule>: Preloading module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7883,safety,modul,module,7883,ng module EG. Info in <TCling::__LoadModule>: Preloading module Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__Lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7945,safety,modul,module,7945,e Tree. Info in <TCling::__LoadModule>: Preloading module HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8000,safety,modul,module,8000,le HistFactory. Info in <TCling::__LoadModule>: Preloading module Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TClin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8065,safety,modul,module,8065, Spectrum. Info in <TCling::__LoadModule>: Preloading module Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8126,safety,modul,module,8126,Monalisa. Info in <TCling::__LoadModule>: Preloading module Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8183,safety,modul,module,8183,le Matrix. Info in <TCling::__LoadModule>: Preloading module Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8241,safety,modul,module,8241,le Html. Info in <TCling::__LoadModule>: Preloading module Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8297,safety,modul,module,8297,le Hist. Info in <TCling::__LoadModule>: Preloading module GuiHtml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8360,safety,modul,module,8360,tml. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8416,safety,modul,module,8416,Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadMod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8477,safety,modul,module,8477,g module Gpad. Info in <TCling::__LoadModule>: Preloading module TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8538,safety,modul,module,8538,ule TMVAGui. Info in <TCling::__LoadModule>: Preloading module Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8598,safety,modul,module,8598,le Postscript. Info in <TCling::__LoadModule>: Preloading module RGL. Info in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__Lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8673,safety,modul,module,8673,in <TCling::__LoadModule>: Preloading module Fumili. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Prelo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8736,safety,modul,module,8736,Cling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading m,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8793,safety,modul,module,8793,ing::__LoadModule>: Preloading module Geom. Info in <TCling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8848,safety,modul,module,8848,ling::__LoadModule>: Preloading module RooFitMore. Info in <TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8908,safety,modul,module,8908,TCling::__LoadModule>: Preloading module X3d. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadMod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8966,safety,modul,module,8966,ing::__LoadModule>: Preloading module Cling_Runtime. Info in <TCling::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9032,safety,modul,module,9032,ng::__LoadModule>: Preloading module EGPythia6. Info in <TCling::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModu,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9094,safety,modul,module,9094,g::__LoadModule>: Preloading module SPlot. Info in <TCling::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9149,safety,modul,module,9149,ing::__LoadModule>: Preloading module RooFit. Info in <TCling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9206,safety,modul,module,9206,ling::__LoadModule>: Preloading module RCsg. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9263,safety,modul,module,9263,ing::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9326,safety,modul,module,9326,ing::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9381,safety,modul,module,9381,ling::__LoadModule>: Preloading module XMLParser. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. I,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9436,safety,modul,module,9436,in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9495,safety,modul,module,9495,o in <TCling::__LoadModule>: Preloading module RooStats. Info in <TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9560,safety,modul,module,9560,<TCling::__LoadModule>: Preloading module RooFitRDataFrameHelpers. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9623,safety,modul,module,9623,rs. Info in <TCling::__LoadModule>: Preloading module GeomBuilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9682,safety,modul,module,9682,uilder. Info in <TCling::__LoadModule>: Preloading module Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9738,safety,modul,module,9738,e Proof. Info in <TCling::__LoadModule>: Preloading module Ged. Info in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9807,safety,modul,module,9807,in <TCling::__LoadModule>: Preloading module Recorder. Info in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9867,safety,modul,module,9867,in <TCling::__LoadModule>: Preloading module GuiBld. Info in <TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9928,safety,modul,module,9928,<TCling::__LoadModule>: Preloading module ROOTWebDisplay. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModul,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:9984,safety,modul,module,9984,. Info in <TCling::__LoadModule>: Preloading module RooFitCore. Info in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10051,safety,modul,module,10051,o in <TCling::__LoadModule>: Preloading module Gui. Info in <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__Load,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10110,safety,modul,module,10110, <TCling::__LoadModule>: Preloading module SQLIO. Info in <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10166,safety,modul,module,10166,n <TCling::__LoadModule>: Preloading module XMLIO. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10221,safety,modul,module,10221, in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10286,safety,modul,module,10286,n <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10347,safety,modul,module,10347,ing::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10426,safety,modul,module,10426,oading module GX11TTF. Info in <TCling::__LoadModule>: Preloading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadMo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10484,safety,modul,module,10484,loading module ROOTTMVASofie. Info in <TCling::__LoadModule>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10542,safety,modul,module,10542,e>: Preloading module ProofPlayer. Info in <TCling::__LoadModule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10602,safety,modul,module,10602,dule>: Preloading module ASImage. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10658,safety,modul,module,10658,dModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10716,safety,modul,module,10716,odule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info i,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10778,safety,modul,module,10778,__LoadModule>: Preloading module MathMore. Info in <TCling::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10834,safety,modul,module,10834,ng::__LoadModule>: Preloading module RooFitHS3. Info in <TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <T,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10890,safety,modul,module,10890,<TCling::__LoadModule>: Preloading module Foam. Info in <TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TC,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:10946,safety,modul,module,10946,<TCling::__LoadModule>: Preloading module SpectrumPainter. Info in <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCl,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11012,safety,modul,module,11012, <TCling::__LoadModule>: Preloading module Minuit2. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11074,safety,modul,module,11074,Cling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11145,safety,modul,module,11145,dule>: Preloading module MLP. Info in <TCling::__LoadModule>: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on dema,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11205,safety,modul,module,11205,: Preloading module ROOTDataFrame. Info in <TCling::__LoadModule>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Ext,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11263,safety,modul,module,11263,Module>: Preloading module GenVector. Info in <TCling::__LoadModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11322,safety,modul,module,11322,adModule>: Preloading module _Builtin_stddef_max_align_t. Info in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathM,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11385,safety,modul,module,11385,in <TCling::__LoadModule>: Preloading module NetxNG. Info in <TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11447,safety,modul,module,11447,TCling::__LoadModule>: Preloading module Minuit. Info in <TCling::__LoadModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterf,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11518,safety,modul,module,11518,dModule>: Preloading module RootAuth. Info in <TCling::__LoadModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'RO,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11577,safety,modul,module,11577,adModule>: Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11642,safety,modul,module,11642,: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11700,safety,modul,module,11700,: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11756,safety,modul,module,11756,odule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/publi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11812,safety,modul,module,11812,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11870,safety,modul,module,11870,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11925,safety,modul,module,11925,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11980,safety,modul,module,11980,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12041,safety,modul,module,12041,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12096,safety,modul,module,12096,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12151,safety,modul,modules,12151,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1951,security,Soc,Socket,1951," roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1976,security,Soc,Socket,1976,"h. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average tot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2005,security,Sign,Signals,2005,".ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3293,security,Soc,Socket,3293,"ading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +020",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3318,security,Soc,Socket,3318,"TDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 202",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3347,security,Sign,Signals,3347,"ublic/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +02",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11584,security,Session,SessionViewer,11584,Preloading module TMVA. Info in <TCling::__LoadModule>: Preloading module Graf3d. Info in <TCling::__LoadModule>: Preloading module ASImageGui. Info in <TCling::__LoadModule>: Preloading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:26,testability,test,tests,26,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1836,testability,context,context,1836," message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1872,testability,context,context,1872,"till see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared tex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3178,testability,context,context,3178,"o results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3214,testability,context,context,3214," ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:184,usability,memor,memory,184,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:228,usability,command,command,228,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:939,usability,memor,memory,939,"**TLDR;** I repeated your tests with our environment, see below for the actual setup. Without the root file being opened, I get more preloaded dictionaries (119), but roughly the same memory footprint. Adding a ROOT file on the command line it adds an additional 60MB and I see SOFIE and PyMVA being loaded on demand (see also #13055). ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1330,usability,Command,Command,1330,". ### Long story:. You can set up the same environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1372,usability,User,User,1372,"me environment by going to lxplus and doing:. ```bash. → ALIBUILD_ARCH_PREFIX=""Packages"" WORK_DIR=/cvmfs/alice.cern.ch/el7-x86_64 . /cvmfs/alice.cern.ch/el7-x86_64/Packages/ROOT/v6-28-04-9/etc/profile.d/init.sh. /cvmfs/alice.cern.ch/el7-x86_64/Packages/AliEn-Runtime/v2-19-le-136/etc/profile.d/init.sh:source:7: no such file or directory: /cvmfs/alice.cern.ch/el7-x86_64/Packages/ApMon-CPP/v2.2.8-alice5-40/etc/profile.d/init.sh. ```. You can safely ignore the ApMon message. Without the root file, I still see over one hundred preloaded, while ""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1916,usability,input,inputs,1916,"""on demand"" and the memory usage is roughly the same. ```bash. # eulisse at lxplus707.cern.ch in ~ [9:39:17]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2057,usability,statu,status,2057," 2>&1 | grep Preloading | wc -l. 119. # eulisse at lxplus707.cern.ch in ~ [9:39:24]. → ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2210,usability,memor,memory,2210,"-f 2 | sort | uniq | wc -l. 34. # eulisse at lxplus707.cern.ch in ~ [9:39:57]. → /usr/bin/time -v root.exe -l -b -q. Command being timed: ""root.exe -l -b -q"". User time (seconds): 0.22. System time (seconds): 0.26. Percent of CPU this job got: 62%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.78. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2520,usability,user,user,2520,"e shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2586,usability,Command,Command,2586," 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Prelo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2615,usability,statu,status,2615,"es): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2627,usability,Command,Command,2627,"ge total size (kbytes): 0. Maximum resident set size (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2680,usability,user,user,2680,"e (kbytes): 139016. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2714,usability,User,User,2714,"nt set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 56647. Voluntary context switches: 5479. Involuntary context switches: 23. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 0. ```. With the root file being loaded, the preloading stays almost the same, while ""on demand"" goes to 41. This also results in a 60MB jump in memory:. ```bash. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3258,usability,input,inputs,3258,"/public/AO2D.root 2>&1 | grep Preloading | wc -l. 120. → ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3399,usability,statu,status,3399," -f 2 | sort | uniq | wc -l. 41. → /usr/bin/time -v root.exe -l -b -q ~/public/AO2D.root. Attaching file /afs/cern.ch/user/e/eulisse/public/AO2D.root as _file0... (TFile *) 0x3910f20. Command exited with non-zero status 255. Command being timed: ""root.exe -l -b -q /afs/cern.ch/user/e/eulisse/public/AO2D.root"". User time (seconds): 0.42. System time (seconds): 0.30. Percent of CPU this job got: 72%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:01.01. Average shared text size (kbytes): 0. Average unshared data size (kbytes): 0. Average stack size (kbytes): 0. Average total size (kbytes): 0. Maximum resident set size (kbytes): 207928. Average resident set size (kbytes): 0. Major (requiring I/O) page faults: 0. Minor (reclaiming a frame) page faults: 76766. Voluntary context switches: 9921. Involuntary context switches: 28. Swaps: 0. File system inputs: 0. File system outputs: 0. Socket messages sent: 0. Socket messages received: 0. Signals delivered: 0. Page size (bytes): 4096. Exit status: 255. ```. The difference indeed seems to come from loading SOFIE and PyMVA on demand (why?). ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep Preloading) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep Preloading). --- /tmp/zsh3krahi 2023-06-28 09:47:35.214307973 +0200. +++ /tmp/zshDEGUqN 2023-06-28 09:47:35.843315522 +0200. @@ -117,4 +117,3 @@. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. -Info in <TCling::__LoadModule>: Preloading module Tree. ```. ```bash. → diff -Naur =(ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq) =(ROOTDEBUG=7 root.exe -l -b -q 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq). --- /tmp/zshD2FXJ0 2023-06-28 09:48:55.414270426 +0200. +++ /tmp/zsh1jCtJt 2023-06-28 09:48:56.293280974 +0200. @@ -1,5 +1,4 @@. 'Cling_Runtime'. -'Cling_Runti",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:12739,usability,user,user,12739,ading module Graf. Info in <TCling::__LoadModule>: Preloading module GX11. Info in <TCling::__LoadModule>: Preloading module Gdml. Info in <TCling::__LoadModule>: Preloading module ROOTTreeViewer. Info in <TCling::__LoadModule>: Preloading module ProofBench. Info in <TCling::__LoadModule>: Preloading module Cling_Runtime_Extra. Info in <TCling::__LoadModule>: Preloading module MathCore. Info in <TCling::__LoadModule>: Preloading module Gviz3d. Info in <TCling::__LoadModule>: Preloading module WebGui6. Info in <TCling::__LoadModule>: Preloading module ROOTTPython. Info in <TCling::__LoadModule>: Preloading module TreePlayer. Info in <TCling::__LoadModule>: Preloading module RooFitJSONInterface. Info in <TCling::__LoadModule>: Preloading module Smatrix. Info in <TCling::__LoadModule>: Preloading module SessionViewer. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: Preloading module Thread. Info in <TCling::__LoadModule>: Preloading module RIO. Info in <TCling::__LoadModule>: Preloading module Net. Info in <TCling::__LoadModule>: Preloading module MultiProc. Info in <TCling::__LoadModule>: Preloading module Imt. Info in <TCling::__LoadModule>: Preloading module MathCore. ```. while the full list of on demand modules is:. ```bash. 'Cling_Runtime'. 'Cling_Runtime_Extra'. 'Core'. 'Foam'. 'Genetic'. 'GenVector'. 'Geom'. 'Gpad'. 'Hist'. 'HistFactory'. 'Imt'. 'libc'. 'MathCore'. 'MathMore'. 'Minuit'. 'Minuit2'. 'MultiProc'. 'Net'. 'NetxNG'. 'PyMVA'. 'Rint'. 'RIO'. 'RooFitCore'. 'RooFitHS3'. 'RooFitJSONInterface'. 'RooStats'. 'ROOTDataFrame'. 'ROOT_Foundation_Stage1_NoRTTI'. 'ROOT_Rtypes'. 'ROOTTMVASofie'. 'ROOTTMVASofieParser'. 'ROOTTreeViewer'. 'ROOTVecOps'. 'ROOTWebDisplay'. 'Smatrix'. 'std'. 'Thread'. 'TMVA'. 'Tree'. 'TreePlayer'. 'XMLIO'. ```. the file used can be found in `/afs/cern.ch/user/e/eulisse/public/AO2D.root`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:103,deployability,patch,patch,103,"Ok, indeed SOFIE gets loaded because of the Experimental namespace, I guess. I do not see it with your patch. I will try to do a full build on CVMFS with it applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:134,deployability,build,build,134,"Ok, indeed SOFIE gets loaded because of the Experimental namespace, I guess. I do not see it with your patch. I will try to do a full build on CVMFS with it applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:22,energy efficiency,load,loaded,22,"Ok, indeed SOFIE gets loaded because of the Experimental namespace, I guess. I do not see it with your patch. I will try to do a full build on CVMFS with it applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:22,performance,load,loaded,22,"Ok, indeed SOFIE gets loaded because of the Experimental namespace, I guess. I do not see it with your patch. I will try to do a full build on CVMFS with it applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:103,safety,patch,patch,103,"Ok, indeed SOFIE gets loaded because of the Experimental namespace, I guess. I do not see it with your patch. I will try to do a full build on CVMFS with it applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:103,security,patch,patch,103,"Ok, indeed SOFIE gets loaded because of the Experimental namespace, I guess. I do not see it with your patch. I will try to do a full build on CVMFS with it applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:131,deployability,upgrad,upgrade,131,"@ktf, I was just on a call with @hahnjo and we seem that we can re-introduce a memory optimization that we lost over the last llvm upgrade. That is a version of https://github.com/root-project/root/pull/12062/commits/5280ade7529803007742b004a3afa1f72360d6b3 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:150,deployability,version,version,150,"@ktf, I was just on a call with @hahnjo and we seem that we can re-introduce a memory optimization that we lost over the last llvm upgrade. That is a version of https://github.com/root-project/root/pull/12062/commits/5280ade7529803007742b004a3afa1f72360d6b3 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:86,energy efficiency,optim,optimization,86,"@ktf, I was just on a call with @hahnjo and we seem that we can re-introduce a memory optimization that we lost over the last llvm upgrade. That is a version of https://github.com/root-project/root/pull/12062/commits/5280ade7529803007742b004a3afa1f72360d6b3 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:150,integrability,version,version,150,"@ktf, I was just on a call with @hahnjo and we seem that we can re-introduce a memory optimization that we lost over the last llvm upgrade. That is a version of https://github.com/root-project/root/pull/12062/commits/5280ade7529803007742b004a3afa1f72360d6b3 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:131,modifiability,upgrad,upgrade,131,"@ktf, I was just on a call with @hahnjo and we seem that we can re-introduce a memory optimization that we lost over the last llvm upgrade. That is a version of https://github.com/root-project/root/pull/12062/commits/5280ade7529803007742b004a3afa1f72360d6b3 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:150,modifiability,version,version,150,"@ktf, I was just on a call with @hahnjo and we seem that we can re-introduce a memory optimization that we lost over the last llvm upgrade. That is a version of https://github.com/root-project/root/pull/12062/commits/5280ade7529803007742b004a3afa1f72360d6b3 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:79,performance,memor,memory,79,"@ktf, I was just on a call with @hahnjo and we seem that we can re-introduce a memory optimization that we lost over the last llvm upgrade. That is a version of https://github.com/root-project/root/pull/12062/commits/5280ade7529803007742b004a3afa1f72360d6b3 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:86,performance,optimiz,optimization,86,"@ktf, I was just on a call with @hahnjo and we seem that we can re-introduce a memory optimization that we lost over the last llvm upgrade. That is a version of https://github.com/root-project/root/pull/12062/commits/5280ade7529803007742b004a3afa1f72360d6b3 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:79,usability,memor,memory,79,"@ktf, I was just on a call with @hahnjo and we seem that we can re-introduce a memory optimization that we lost over the last llvm upgrade. That is a version of https://github.com/root-project/root/pull/12062/commits/5280ade7529803007742b004a3afa1f72360d6b3 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:240,energy efficiency,load,load,240,"> > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > . > Yes! Very likely. That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:240,performance,load,load,240,"> > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > . > Yes! Very likely. That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:231,reliability,doe,does,231,"> > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > . > Yes! Very likely. That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:190,testability,simpl,simply,190,"> > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > . > Yes! Very likely. That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:190,usability,simpl,simply,190,"> > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > . > Yes! Very likely. That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:34,deployability,modul,modules,34,"and I just realised that the ""big modules"" are not necessarily big, they just happen to trigger the resizing of some pool. https://github.com/root-project/root/commit/5280ade7529803007742b004a3afa1f72360d6b3 seems to give 4 / 5 MB: nothing dramatic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:34,modifiability,modul,modules,34,"and I just realised that the ""big modules"" are not necessarily big, they just happen to trigger the resizing of some pool. https://github.com/root-project/root/commit/5280ade7529803007742b004a3afa1f72360d6b3 seems to give 4 / 5 MB: nothing dramatic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:34,safety,modul,modules,34,"and I just realised that the ""big modules"" are not necessarily big, they just happen to trigger the resizing of some pool. https://github.com/root-project/root/commit/5280ade7529803007742b004a3afa1f72360d6b3 seems to give 4 / 5 MB: nothing dramatic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:699,availability,reliab,reliable,699,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:374,deployability,modul,modules,374,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:527,deployability,modul,modules,527,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:651,deployability,modul,modules,651,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:745,deployability,modul,module,745,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:258,energy efficiency,load,load,258,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:678,energy efficiency,load,loads,678,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:752,energy efficiency,load,loads,752,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:374,modifiability,modul,modules,374,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:527,modifiability,modul,modules,527,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:651,modifiability,modul,modules,651,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:745,modifiability,modul,module,745,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:258,performance,load,load,258,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:678,performance,load,loads,678,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:752,performance,load,loads,752,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:249,reliability,doe,does,249,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:316,reliability,pra,practice,316,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:699,reliability,reliab,reliable,699,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:374,safety,modul,modules,374,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:527,safety,modul,modules,527,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:651,safety,modul,modules,651,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:745,safety,modul,module,745,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:436,security,ident,identifier,436,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:208,testability,simpl,simply,208,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:208,usability,simpl,simply,208,"> > > Could it be that the issue is TBranch now has Experimental::Internal::TBulkBranchRead as a member? > > . > > . > > Yes! Very likely. > . > That's actually it. If I remove the Experimental namespace and simply use Internal::TBulkBranchRead, it does not load the other Experimental bits either. However, that in practice shows a more generic design problem in the clang modules system. That is, then we make a lookup of a namespace identifier clang (rightfully) tries to collect all namespace partitions from all reachable modules. This has to do with things like overload resolution. Due to the autoloading system, ROOT essentially considers all modules reachable and thus loads them. The only reliable way to fix this is to make the clang module loads a no-op which is a bit of a challenge…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:36,deployability,modul,modules,36,"> and I just realised that the ""big modules"" are not necessarily big, they just happen to trigger the resizing of some pool. [5280ade](https://github.com/root-project/root/commit/5280ade7529803007742b004a3afa1f72360d6b3) seems to give 4 / 5 MB: nothing dramatic. That pool resizing has to do with source locations, right? Can you show the stack trace?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:339,deployability,stack,stack,339,"> and I just realised that the ""big modules"" are not necessarily big, they just happen to trigger the resizing of some pool. [5280ade](https://github.com/root-project/root/commit/5280ade7529803007742b004a3afa1f72360d6b3) seems to give 4 / 5 MB: nothing dramatic. That pool resizing has to do with source locations, right? Can you show the stack trace?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:36,modifiability,modul,modules,36,"> and I just realised that the ""big modules"" are not necessarily big, they just happen to trigger the resizing of some pool. [5280ade](https://github.com/root-project/root/commit/5280ade7529803007742b004a3afa1f72360d6b3) seems to give 4 / 5 MB: nothing dramatic. That pool resizing has to do with source locations, right? Can you show the stack trace?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:36,safety,modul,modules,36,"> and I just realised that the ""big modules"" are not necessarily big, they just happen to trigger the resizing of some pool. [5280ade](https://github.com/root-project/root/commit/5280ade7529803007742b004a3afa1f72360d6b3) seems to give 4 / 5 MB: nothing dramatic. That pool resizing has to do with source locations, right? Can you show the stack trace?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:345,testability,trace,trace,345,"> and I just realised that the ""big modules"" are not necessarily big, they just happen to trigger the resizing of some pool. [5280ade](https://github.com/root-project/root/commit/5280ade7529803007742b004a3afa1f72360d6b3) seems to give 4 / 5 MB: nothing dramatic. That pool resizing has to do with source locations, right? Can you show the stack trace?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:115,availability,SLo,SLoc,115,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:78,deployability,stack,stack,78,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1212,deployability,Modul,ModuleFileExtension,1212,"-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1282,deployability,Modul,ModuleFileExtension,1282," char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2541,deployability,Modul,Module,2541,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2788,deployability,Modul,ModuleKind,2788,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2963,deployability,Modul,ModuleFile,2963,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:373,energy efficiency,core,core,373,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:526,energy efficiency,core,core,526,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:647,energy efficiency,core,core,647,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:759,energy efficiency,core,core,759,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:865,energy efficiency,core,core,865,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1244,energy efficiency,alloc,allocator,1244,"	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImpo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1557,energy efficiency,alloc,allocator,1557," 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2421,energy efficiency,load,loadModule,2421,"mpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3023,energy efficiency,Alloc,AllocateLoadedSLocEntries,3023,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3270,energy efficiency,alloc,allocated,3270,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1212,modifiability,Modul,ModuleFileExtension,1212,"-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1282,modifiability,Modul,ModuleFileExtension,1282," char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2541,modifiability,Modul,Module,2541,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2788,modifiability,Modul,ModuleKind,2788,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2963,modifiability,Modul,ModuleFile,2963,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2421,performance,load,loadModule,2421,"mpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:115,reliability,SLo,SLoc,115,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1212,safety,Modul,ModuleFileExtension,1212,"-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1282,safety,Modul,ModuleFileExtension,1282," char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2541,safety,Modul,Module,2541,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2788,safety,Modul,ModuleKind,2788,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2963,safety,Modul,ModuleFile,2963,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1905,security,Token,Token,1905,"B TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 M",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1963,security,Token,Token,1963,"st*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::Mod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2033,security,Token,Token,2033,"r/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoade",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2127,security,Token,Token,2127,"nt, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2282,security,Token,Token,2282,"uleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2297,security,Token,Token,2297,"n>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, wh",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2492,security,Ident,IdentifierInfo,2492,"ef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		. 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		. 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		. 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		. 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		. 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		. 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		. 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		. 8.20 MB realloc		. ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:84,testability,trace,trace,84,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:181,usability,User,Users,181,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:326,usability,User,Users,326,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:479,usability,User,Users,479,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:600,usability,User,Users,600,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:712,usability,User,Users,712,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:818,usability,User,Users,818,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:979,usability,User,Users,979,"> That pool resizing has to do with source locations, right? Can you show the stack trace? Apparently so (assuming SLoc is source locations):. ```. 12.22 MB start		. 12.22 MB main	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/main/src/rmain.cxx:84	. 12.22 MB TRint::TRint(char const*, int*, char**, void*, int, bool, bool)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/rint/src/TRint.cxx:175	. 12.22 MB TApplication::TApplication(char const*, int*, char**, void*, int)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TApplication.cxx:153	. 12.22 MB ROOT::Internal::GetROOT2()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:385	. 12.22 MB TROOT::InitInterpreter()	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/base/src/TROOT.cxx:2072	. 12.22 MB CreateInterpreter	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/core/metacling/src/TCling.cxx:614	. 12.22 MB TCling::TCling(char const*, char const*, char const* const*, void*)	/Users/ktf/src/sw/SOURCES/ROOT/alice-v6-28-04/0/interpreter/cling/include/cling/Interpreter/Interpreter.h:0	. 12.22 MB cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__1::vector<std::__1::shared_ptr<clang::ModuleFileExtension>, std::__1::allocator<std::__1::shared_ptr<clang::ModuleFileExtension>>> const&, void*, bool, cling::Interpreter const*)		. 12.22 MB cling::Interpreter::Initialize(bool, bool, llvm::SmallVectorImpl<llvm::StringRef>&)		. 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		. 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		. 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		. 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		. 12.21 MB clang::Preprocessor::Lex(clang::Token&)		. 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		. 12.21 MB clang::Prep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:329,availability,operat,operation,329,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:376,deployability,modul,module,376,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:420,deployability,modul,module,420,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:434,deployability,modul,modules,434,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:699,deployability,modul,module,699,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:32,energy efficiency,Alloc,AllocateLoadedSLocEntries,32,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:383,energy efficiency,load,loads,383,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:376,modifiability,modul,module,376,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:420,modifiability,modul,module,420,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:434,modifiability,modul,modules,434,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:699,modifiability,modul,module,699,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:383,performance,load,loads,383,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:711,performance,content,contents,711,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:354,safety,avoid,avoid,354,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:376,safety,modul,module,376,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:420,safety,modul,module,420,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:434,safety,modul,modules,434,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:699,safety,modul,module,699,"> 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int). Yes, that's what I was talking about. [That's](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) the relevant line of code that we need to ""fix"" in clang. And this operation we try hard to avoid by delaying the module loads until possible with the global module index (modules.idx) file. However, the QualType thing is new to me. Do you think we go through [here](https://github.com/root-project/root/blob/3b9d1ed0dc8968d5aee99541e090bd6dc61b96dd/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp#L3300)? One can see the module file contents by running in ROOT:. ```. make llvm-bcanalyzer. llvm-bcanalyzer $ROOTSYS/lib/some_file.pcm. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:355,deployability,build,build,355,"If I understand correctly from:. for x in `ls lib/*.pcm`; do cat $x | ./llvm-bcanalyzer | grep SPECIAL_TYPES; done | wc -l. every single PCM we have has 137 SPECIAL_TYPES. See [here](https://github.com/root-project/root/files/11929200/RooStats-Pcm-dump.txt). dump of RooStats.pcm, which seems to be responsible for the bump. I am now trying to do a debug build to check if we go through the line you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5,testability,understand,understand,5,"If I understand correctly from:. for x in `ls lib/*.pcm`; do cat $x | ./llvm-bcanalyzer | grep SPECIAL_TYPES; done | wc -l. every single PCM we have has 137 SPECIAL_TYPES. See [here](https://github.com/root-project/root/files/11929200/RooStats-Pcm-dump.txt). dump of RooStats.pcm, which seems to be responsible for the bump. I am now trying to do a debug build to check if we go through the line you suggested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:14,usability,confirm,confirm,14,"So I can also confirm we go through ASRReader.cpp:3300 and that indeed ASTReader.cpp:3179 jumps over 1.5M entries over the course of execution. In particular some pcms like Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be responsible for large jumps (>100K entries).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:101,deployability,modul,modules,101,"@ktf, this is very useful information. I am adding @ChuanqiXu9 and @zygoloid who work in the area of modules and that information might be also interesting to them. . Do we copy in each pcm the special types from all of its dependencies? I don’t see how we can get to 1.5M entries. I am wondering if we can do anything about the special types in general…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:224,deployability,depend,dependencies,224,"@ktf, this is very useful information. I am adding @ChuanqiXu9 and @zygoloid who work in the area of modules and that information might be also interesting to them. . Do we copy in each pcm the special types from all of its dependencies? I don’t see how we can get to 1.5M entries. I am wondering if we can do anything about the special types in general…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:224,integrability,depend,dependencies,224,"@ktf, this is very useful information. I am adding @ChuanqiXu9 and @zygoloid who work in the area of modules and that information might be also interesting to them. . Do we copy in each pcm the special types from all of its dependencies? I don’t see how we can get to 1.5M entries. I am wondering if we can do anything about the special types in general…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:101,modifiability,modul,modules,101,"@ktf, this is very useful information. I am adding @ChuanqiXu9 and @zygoloid who work in the area of modules and that information might be also interesting to them. . Do we copy in each pcm the special types from all of its dependencies? I don’t see how we can get to 1.5M entries. I am wondering if we can do anything about the special types in general…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:224,modifiability,depend,dependencies,224,"@ktf, this is very useful information. I am adding @ChuanqiXu9 and @zygoloid who work in the area of modules and that information might be also interesting to them. . Do we copy in each pcm the special types from all of its dependencies? I don’t see how we can get to 1.5M entries. I am wondering if we can do anything about the special types in general…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:101,safety,modul,modules,101,"@ktf, this is very useful information. I am adding @ChuanqiXu9 and @zygoloid who work in the area of modules and that information might be also interesting to them. . Do we copy in each pcm the special types from all of its dependencies? I don’t see how we can get to 1.5M entries. I am wondering if we can do anything about the special types in general…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:224,safety,depend,dependencies,224,"@ktf, this is very useful information. I am adding @ChuanqiXu9 and @zygoloid who work in the area of modules and that information might be also interesting to them. . Do we copy in each pcm the special types from all of its dependencies? I don’t see how we can get to 1.5M entries. I am wondering if we can do anything about the special types in general…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:224,testability,depend,dependencies,224,"@ktf, this is very useful information. I am adding @ChuanqiXu9 and @zygoloid who work in the area of modules and that information might be also interesting to them. . Do we copy in each pcm the special types from all of its dependencies? I don’t see how we can get to 1.5M entries. I am wondering if we can do anything about the special types in general…",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:8,usability,help,help,8,Glad to help. Notice that the vector which is expanded is **not** SpecialTypes but TypesLoaded at ASTReader.cpp:3179.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:47,availability,state,stated,47,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:82,deployability,modul,modules,82,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:77,energy efficiency,load,load,77,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:146,energy efficiency,load,load,146,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:47,integrability,state,stated,47,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:82,modifiability,modul,modules,82,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:77,performance,load,load,77,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:146,performance,load,load,146,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:82,safety,modul,modules,82,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:195,testability,understand,understand,195,I just took a quick look on this. The problems stated now is:. 1. Clang will load modules eagerly. 2. The name lookup is not so cheap. 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:49,availability,state,stated,49,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:90,deployability,modul,modules,90,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:159,deployability,modul,modules,159,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:296,deployability,modul,module,296,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:738,deployability,manag,management,738,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:85,energy efficiency,load,load,85,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:303,energy efficiency,load,load,303,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:385,energy efficiency,load,load,385,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:408,energy efficiency,load,load,408,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:738,energy efficiency,manag,management,738,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:882,energy efficiency,model,model,882,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:981,energy efficiency,load,load,981,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:49,integrability,state,stated,49,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:90,modifiability,modul,modules,90,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:159,modifiability,modul,modules,159,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:296,modifiability,modul,module,296,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:85,performance,load,load,85,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:303,performance,load,load,303,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:385,performance,load,load,385,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:408,performance,load,load,408,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:981,performance,load,load,981,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:130,reliability,doe,does,130,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:90,safety,modul,modules,90,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:159,safety,modul,modules,159,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:296,safety,modul,module,296,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:738,safety,manag,management,738,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1213,safety,review,reviews,1213,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:882,security,model,model,882,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:950,security,intrus,intrusive,950,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1213,testability,review,reviews,1213,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1314,testability,understand,understand,1314,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1474,usability,help,help,1474,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1506,usability,prefer,prefer,1506,"> I just took a quick look on this. The problems stated now is:. > . > 1. Clang will load modules eagerly. That's what our system does. We want to preload all modules as if we have something like `import *`. > . > 2. The name lookup is not so cheap. The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > 3. We will load a lot of source location informations. Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in root-project/root#13139. > . > . > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. I am not sure if issues will help but we can add them if you prefer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:284,availability,redund,redundant,284,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:114,deployability,modul,module,114,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:284,deployability,redundan,redundant,284,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:849,deployability,manag,management,849,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1229,deployability,modul,modules,1229,"ferent workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1269,deployability,modul,module,1269,"re are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1306,deployability,modul,module,1306,"d declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I ju",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1332,deployability,modul,module,1332," single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1369,deployability,modul,module,1369,"ot cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:121,energy efficiency,load,load,121,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:203,energy efficiency,load,load,203,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:263,energy efficiency,load,loads,263,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:504,energy efficiency,load,load,504,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:849,energy efficiency,manag,management,849,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:993,energy efficiency,model,model,993,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1542,energy efficiency,load,load,1542,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1733,energy efficiency,load,load,1733,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1868,energy efficiency,load,load,1868,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:114,modifiability,modul,module,114,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1229,modifiability,modul,modules,1229,"ferent workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1269,modifiability,modul,module,1269,"re are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1306,modifiability,modul,module,1306,"d declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I ju",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1332,modifiability,modul,module,1332," single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1369,modifiability,modul,module,1369,"ot cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:121,performance,load,load,121,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:203,performance,load,load,203,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:240,performance,workload,workloads,240,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:263,performance,load,loads,263,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:504,performance,load,load,504,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1542,performance,load,load,1542,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1733,performance,load,load,1733,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1868,performance,load,load,1868,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:284,reliability,redundan,redundant,284,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2374,reliability,doe,doesn,2374,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:114,safety,modul,module,114,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:284,safety,redund,redundant,284,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:849,safety,manag,management,849,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1229,safety,modul,modules,1229,"ferent workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1269,safety,modul,module,1269,"re are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1306,safety,modul,module,1306,"d declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I ju",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1332,safety,modul,module,1332," single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1369,safety,modul,module,1369,"ot cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1992,safety,review,reviews,1992,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:993,security,model,model,993,"> . > > ```. > > 2. The name lookup is not so cheap. > > ```. > . > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1511,security,intrus,intrusive,1511,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1992,testability,review,reviews,1992,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2099,testability,understand,understand,2099,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2265,usability,help,help,2265,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2297,usability,prefer,prefer,2297,"ith many declarations. But it sounds good that you didn't meet the problems. > . > > ```. > > 3. We will load a lot of source location informations. > > ```. > . > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? For example, in C++20 modules, it is common:. ```. // A.cppm. module;. #include <iostream>. export module A;. ... // B.cppm. module;. #include <iostream>. export module A;. ... // C.cpp. import A;. import B;. ```. Did you have similar cases? > . > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . > The third major issue which is solved for us but not yet upstream is https://reviews.llvm.org/D41416 Some polishing is done by @hahnjo in #13139. Looking forward to this! > . > > Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately. > . > I am not sure if issues will help but we can add them if you prefer. I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:306,availability,redund,redundant,306,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:126,deployability,modul,module,126,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:306,deployability,redundan,redundant,306,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:891,deployability,manag,management,891,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1291,deployability,modul,modules,1291,"e are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1345,deployability,modul,module,1345,"o while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these typ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1386,deployability,modul,module,1386," is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could poss",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1422,deployability,modul,module,1422,"many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1463,deployability,modul,module,1463,"t you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1725,deployability,modul,modularize,1725,"e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient inf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:133,energy efficiency,load,load,133,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:215,energy efficiency,load,load,215,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:285,energy efficiency,load,loads,285,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:534,energy efficiency,load,load,534,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:891,energy efficiency,manag,management,891,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1035,energy efficiency,model,model,1035," not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1900,energy efficiency,load,load,1900,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2101,energy efficiency,load,load,2101,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2236,energy efficiency,load,load,2236,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1725,integrability,modular,modularize,1725,"e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient inf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:126,modifiability,modul,module,126,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1291,modifiability,modul,modules,1291,"e are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1345,modifiability,modul,module,1345,"o while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these typ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1386,modifiability,modul,module,1386," is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could poss",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1422,modifiability,modul,module,1422,"many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1463,modifiability,modul,module,1463,"t you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1725,modifiability,modul,modularize,1725,"e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient inf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:133,performance,load,load,133,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:215,performance,load,load,215,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:262,performance,workload,workloads,262,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:285,performance,load,loads,285,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:534,performance,load,load,534,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1900,performance,load,load,1900,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2101,performance,load,load,2101,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2236,performance,load,load,2236,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2704,performance,time,time,2704,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:306,reliability,redundan,redundant,306,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2624,reliability,doe,doesn,2624,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:126,safety,modul,module,126,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:306,safety,redund,redundant,306,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:891,safety,manag,management,891,"> > > ```. > > > 2. The name lookup is not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1291,safety,modul,modules,1291,"e are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1345,safety,modul,module,1345,"o while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these typ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1386,safety,modul,module,1386," is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could poss",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1422,safety,modul,module,1422,"many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1463,safety,modul,module,1463,"t you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1725,safety,modul,modularize,1725,"e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient inf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1035,security,model,model,1035," not so cheap. > > > ```. > > . > > . > > The name lookup is cheap per se. However, the module load is not a no-op due to the number of things we still eagerly deserialize upon load. > . > . > Maybe due to we have different workloads. In our work loads there are many redundant/duplicated named declarations. So while a single name lookup is cheap, it is not cheap to lookup a name with many declarations. But it sounds good that you didn't meet the problems. > . > . > > > ```. > > > 3. We will load a lot of source location informations. > > > ```. > > . > > . > > Yes, that is right. The problem comes just from a single [line](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTRe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1869,security,intrus,intrusive,1869,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:2406,security,hash,hash,2406,"ion/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1725,testability,modula,modularize,1725,"e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them. > . > . > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations? > . > . > For example, in C++20 modules, it is common:. > . > . > ```. > // A.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // B.cppm. > module;. > #include <iostream>. > export module A;. > ... > . > // C.cpp. > import A;. > import B;. > ```. > . > . > . > . > . > Did you have similar cases? If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > . > . > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216). > . > . > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls. > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > . > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient inf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:148,deployability,modul,modularize,148,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:517,energy efficiency,load,loaded,517,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:148,integrability,modular,modularize,148,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:148,modifiability,modul,modularize,148,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:517,performance,load,loaded,517,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:533,performance,time,time,533,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:595,performance,time,time,595,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:681,performance,time,time,681,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:148,safety,modul,modularize,148,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:381,security,hash,hash,381,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:148,testability,modula,modularize,148,"> If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. Yes, this is our problem : (. > It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. . I am still confused about the intention. How could you know the necessary types to be loaded ahead of time? > I can open these issue reports. It would take me some time to put sufficient information to make them actionable though. Thank you for your time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:262,deployability,modul,module,262,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:131,energy efficiency,profil,profile,131,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:269,energy efficiency,load,loading,269,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:262,modifiability,modul,module,262,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:124,performance,memor,memory,124,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:131,performance,profil,profile,131,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:154,performance,memor,memory,154,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:269,performance,load,loading,269,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:88,reliability,doe,does,88,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:262,safety,modul,module,262,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:97,usability,help,help,97,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:124,usability,memor,memory,124,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:154,usability,memor,memory,154,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:381,deployability,modul,module,381,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:732,deployability,patch,patch,732,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:775,deployability,modul,modules,775,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:133,energy efficiency,profil,profile,133,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:388,energy efficiency,load,loading,388,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1508,energy efficiency,current,currently,1508,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:381,modifiability,modul,module,381,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:775,modifiability,modul,modules,775,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:126,performance,memor,memory,126,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:133,performance,profil,profile,133,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:156,performance,memor,memory,156,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:388,performance,load,loading,388,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:90,reliability,doe,does,90,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:381,safety,modul,module,381,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:732,safety,patch,patch,732,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:775,safety,modul,modules,775,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:732,security,patch,patch,732,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:99,usability,help,help,99,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:126,usability,memor,memory,126,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:156,usability,memor,memory,156,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1496,usability,help,helpful,1496,"> Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. > . > Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups? That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? Note that will probably print a lot of text on screen... ```diff. diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. index d0895a76df..21038e4eac 100644. --- a/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. +++ b/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp. @@ -2866,6 +2866,7 @@ void ASTWriter::WriteType(QualType T) {. . // Record the offset for this type. unsigned Index = Idx.getIndex() - FirstTypeID;. + T.dump();. if (TypeOffsets.size() == Index). TypeOffsets.emplace_back(Offset);. else if (TypeOffsets.size() < Index) {. ```. Apologies for not being more helpful but currently I am in between some internal deadlines...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:222,deployability,patch,patch,222,"> Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. Yes, that's opening the file. I will try and let you know. > That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? . Doing that now. > Apologies for not being more helpful but currently I am in between some internal deadlines... No worries and thank you for all the help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:265,deployability,modul,modules,265,"> Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. Yes, that's opening the file. I will try and let you know. > That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? . Doing that now. > Apologies for not being more helpful but currently I am in between some internal deadlines... No worries and thank you for all the help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:357,energy efficiency,current,currently,357,"> Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. Yes, that's opening the file. I will try and let you know. > That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? . Doing that now. > Apologies for not being more helpful but currently I am in between some internal deadlines... No worries and thank you for all the help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:265,modifiability,modul,modules,265,"> Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. Yes, that's opening the file. I will try and let you know. > That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? . Doing that now. > Apologies for not being more helpful but currently I am in between some internal deadlines... No worries and thank you for all the help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:222,safety,patch,patch,222,"> Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. Yes, that's opening the file. I will try and let you know. > That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? . Doing that now. > Apologies for not being more helpful but currently I am in between some internal deadlines... No worries and thank you for all the help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:265,safety,modul,modules,265,"> Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. Yes, that's opening the file. I will try and let you know. > That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? . Doing that now. > Apologies for not being more helpful but currently I am in between some internal deadlines... No worries and thank you for all the help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:222,security,patch,patch,222,"> Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. Yes, that's opening the file. I will try and let you know. > That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? . Doing that now. > Apologies for not being more helpful but currently I am in between some internal deadlines... No worries and thank you for all the help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:345,usability,help,helpful,345,"> Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. Yes, that's opening the file. I will try and let you know. > That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? . Doing that now. > Apologies for not being more helpful but currently I am in between some internal deadlines... No worries and thank you for all the help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:447,usability,help,help,447,"> Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. Yes, that's opening the file. I will try and let you know. > That's my feeling as well. Could you apply that patch and rebuild the dictionaries for the modules which have most types? . Doing that now. > Apologies for not being more helpful but currently I am in between some internal deadlines... No worries and thank you for all the help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:120,deployability,modul,modules,120,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:284,deployability,modul,modules,284,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:500,deployability,contain,contained,500,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:552,deployability,modul,modules,552,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:574,deployability,contain,contain,574,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:38,energy efficiency,optim,optimization,38,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:70,energy efficiency,load,loading,70,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:111,energy efficiency,load,load,111,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:313,energy efficiency,load,loaded,313,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:526,energy efficiency,load,loaded,526,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:120,modifiability,modul,modules,120,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:284,modifiability,modul,modules,284,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:552,modifiability,modul,modules,552,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:38,performance,optimiz,optimization,38,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:70,performance,load,loading,70,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:111,performance,load,load,111,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:313,performance,load,loaded,313,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:526,performance,load,loaded,526,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:120,safety,modul,modules,120,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:284,safety,modul,modules,284,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:552,safety,modul,modules,552,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:3,testability,understand,understanding,3,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:979,usability,stop,stopped,979,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:56,deployability,log,log,56,https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:56,safety,log,log,56,https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:56,security,log,log,56,https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:56,testability,log,log,56,https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:122,deployability,modul,modules,122,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:286,deployability,modul,modules,286,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:508,deployability,contain,contained,508,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:560,deployability,modul,modules,560,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:582,deployability,contain,contain,582,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:40,energy efficiency,optim,optimization,40,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:72,energy efficiency,load,loading,72,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:113,energy efficiency,load,load,113,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:315,energy efficiency,load,loaded,315,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:534,energy efficiency,load,loaded,534,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:122,modifiability,modul,modules,122,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:286,modifiability,modul,modules,286,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:560,modifiability,modul,modules,560,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:40,performance,optimiz,optimization,40,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:72,performance,load,loading,72,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:113,performance,load,load,113,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:315,performance,load,loaded,315,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:534,performance,load,loaded,534,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:122,safety,modul,modules,122,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:286,safety,modul,modules,286,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:560,safety,modul,modules,560,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:5,testability,understand,understanding,5,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:987,usability,stop,stopped,987,"> My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. > . > FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest 😅. Do you mean this https://github.com/root-project/root/pull/10969 We tried something along these lines but see the verdict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:58,deployability,log,log,58,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:259,deployability,log,log,259,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:322,deployability,log,log,322,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:612,integrability,sub,subtype,612,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:207,performance,memor,memory,207,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:587,reliability,doe,does,587,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:58,safety,log,log,58,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:259,safety,log,log,259,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:322,safety,log,log,322,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:443,safety,except,except,443,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:58,security,log,log,58,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:259,security,log,log,259,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:322,security,log,log,322,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:58,testability,log,log,58,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:259,testability,log,log,259,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:322,testability,log,log,322,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:207,usability,memor,memory,207,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:544,usability,confirm,confirm,544,"> https://cernbox.cern.ch/s/J7w2JH0D0YXdcyA for the 1.6GB log... It seems we are hit by a code with a lot of templates code. Very roughly the *SpecializationType are a lot and they are quite big in terms of memory representation:. vvassilev@vv-nuc /tmp $ cat log | grep Type | wc -l. 10165751. vvassilev@vv-nuc /tmp $ cat log | grep SpecializationType | wc -l. 566599. I am not sure what we could do. So far I cannot find a recurring pattern, except for a bunch of instantiations that might be part of libstdc++ (eg std.pcm), however, I cannot confirm that's an issue since the printing does not include where a subtype comes from. I guess I am stuck and I might need to disturb @zygoloid again...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:215,performance,disk,disk,215,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:268,performance,cach,caching,268,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:279,performance,disk,disk,279,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:34,safety,test,tests,34,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:34,testability,test,tests,34,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:96,testability,understand,understanding,96,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:261,testability,simpl,simply,261,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:261,usability,simpl,simply,261,"Ok, let me know if you have other tests which you would like me to do. One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:465,availability,ping,ping,465,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1119,availability,operat,operation,1119,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1169,availability,sla,slabs,1169,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1228,availability,operat,operator,1228,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:873,deployability,modul,module,873,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1302,deployability,depend,depending,1302,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:246,energy efficiency,profil,profile,246,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:880,energy efficiency,load,loads,880,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1138,energy efficiency,alloc,allocate,1138,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1160,energy efficiency,alloc,allocate,1160,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1275,energy efficiency,alloc,allocations,1275,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1358,energy efficiency,optim,optimize,1358,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1218,integrability,sub,subscript,1218,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1302,integrability,depend,depending,1302,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:873,modifiability,modul,module,873,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1302,modifiability,depend,depending,1302,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:239,performance,memor,memory,239,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:246,performance,profil,profile,246,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:269,performance,memor,memory,269,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:617,performance,disk,disk,617,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:670,performance,cach,caching,670,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:681,performance,disk,disk,681,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:880,performance,load,loads,880,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1358,performance,optimiz,optimize,1358,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:203,reliability,doe,does,203,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1129,reliability,doe,does,1129,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1169,reliability,sla,slabs,1169,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:36,safety,test,tests,36,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:873,safety,modul,module,873,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1263,safety,avoid,avoid,1263,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1302,safety,depend,depending,1302,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1551,safety,review,reviews,1551,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1186,security,access,access,1186,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1340,security,access,access,1340,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:36,testability,test,tests,36,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:498,testability,understand,understanding,498,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:663,testability,simpl,simply,663,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1302,testability,depend,depending,1302,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1551,testability,review,reviews,1551,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:98,usability,learn,learn,98,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:212,usability,help,help,212,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:239,usability,memor,memory,239,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:269,usability,memor,memory,269,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:663,usability,simpl,simply,663,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1255,usability,help,help,1255,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1334,usability,clear,clear,1334,"> Ok, let me know if you have other tests which you would like me to do. I was a bit surprised to learn that:. > > Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). > . > Is that with or without opening the file? My expectation is that `root.exe -l -b -q` will take a lot less rss. ping. > One more question for my understanding. Are those big vectors actually needed at all when reading a file? If not why aren't they swapped out to disk either implicitly via some madvise or by simply caching to disk the results? The latter might even give some startup advantage, assuming they are offsets to the pcms and they do not change (not the basic root ones, at least). They are not needed upon module loads. We tried to implement some sparse vectors to mitigate this issue. However, I feel like we did not have the persistence to make it work. That is, we can implement a lazy vector structure that behaves just like vector but the reserve operation does not allocate. Instead, we allocate slabs around the access pattern (we override the subscript operator, etc). This would help us avoid eager allocations and hopefully, depending on whether there is a clear access pattern to optimize things. Our implementation seems to be still [here](https://github.com/Teemperor/llvm/commit/a06b21cbc55c6d2f1d2bf6f39771411ccc17342b). Another easier thing to try is reviving https://reviews.llvm.org/D89749",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:114,availability,ping,ping,114,>> Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss. > ping. With the file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:34,energy efficiency,profil,profile,34,"to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:34,performance,profil,profile,34,"to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:6,usability,clear,clear,6,"to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:121,availability,ping,ping,121,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss. > > > ping. > . > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:159,availability,ping,ping,159,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss. > > > ping. > . > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:229,energy efficiency,profil,profile,229,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss. > > > ping. > . > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:333,energy efficiency,profil,profile,333,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss. > > > ping. > . > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:319,interoperability,share,share,319,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss. > > > ping. > . > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:229,performance,profil,profile,229,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss. > > > ping. > . > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:333,performance,profil,profile,333,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss. > > > ping. > . > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:201,usability,clear,clear,201,"> > > Is that with or without opening the file? My expectation is that root.exe -l -b -q will take a lot less rss. > > > ping. > . > With the file. I meant to ping on the stats without a file. > to be clear, as I said above, the profile changed, however the total sum for cling initialisation is still at 70MB. Can you share the new profile?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:13,deployability,manag,managed,13,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:92,deployability,manag,managed,92,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:311,deployability,contain,contained,311,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:13,energy efficiency,manag,managed,13,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:92,energy efficiency,manag,managed,92,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:659,energy efficiency,alloc,allocated,659,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:894,energy efficiency,optim,optimise,894,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1115,energy efficiency,alloc,allocations,1115,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1146,energy efficiency,current,currently,1146,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1829,energy efficiency,optim,optimised,1829,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:120,performance,overhead,overhead,120,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:616,performance,time,time,616,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1007,reliability,doe,does,1007,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:13,safety,manag,managed,13,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:84,safety,test,tests,84,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:92,safety,manag,managed,92,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:787,safety,compl,complex,787,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1092,safety,avoid,avoid,1092,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1629,safety,test,test,1629,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:597,security,access,accessed,597,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:787,security,compl,complex,787,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1870,security,Ident,IdentifiersLoaded,1870,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:84,testability,test,tests,84,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1629,testability,test,test,1629,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:351,usability,feedback,feedback,351,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome. - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:285,availability,sla,slabs,285,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:383,availability,sla,slab,383,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:946,deployability,API,API,946,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:220,energy efficiency,alloc,allocate,220,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:272,energy efficiency,alloc,allocate,272,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:355,energy efficiency,alloc,allocation,355,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:366,energy efficiency,alloc,allocated,366,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1154,energy efficiency,optim,optimised,1154,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:946,integrability,API,API,946,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:946,interoperability,API,API,946,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:285,reliability,sla,slabs,285,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:383,reliability,sla,slab,383,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:669,safety,test,test,669,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:769,safety,review,reviews,769,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:306,security,hardcod,hardcoded,306,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1195,security,Ident,IdentifiersLoaded,1195,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:669,testability,test,test,669,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:710,testability,simpl,simple,710,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:769,testability,review,reviews,769,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:197,usability,confirm,confirm,197,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:710,usability,simpl,simple,710,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1088,usability,user,users,1088,"> . > Comments? This looks awesome! > A few caveats:. > . > * `PagedVector` is a bad name, I agree. Suggestions are welcome. We did not come up with a better name. Ours was `SparseVector`. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset `101` in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? > . > * At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test. If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. > . > * In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc. Can we make the API of the `PagedVector` such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. > . > * There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. The source locations offset would be a major source of improvement if this technique flies there. PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:160,availability,sla,slabs,160,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:256,availability,sla,slab,256,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:532,deployability,log,logarithmic,532,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:764,deployability,API,API,764,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:95,energy efficiency,alloc,allocate,95,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:147,energy efficiency,alloc,allocate,147,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:228,energy efficiency,alloc,allocation,228,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:239,energy efficiency,alloc,allocated,239,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:764,integrability,API,API,764,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:764,interoperability,API,API,764,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:160,reliability,sla,slabs,160,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:256,reliability,sla,slab,256,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:532,safety,log,logarithmic,532,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:702,safety,review,reviews,702,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:181,security,hardcod,hardcoded,181,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:445,security,modif,modify,445,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:532,security,log,logarithmic,532,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:532,testability,log,logarithmic,532,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:643,testability,simpl,simple,643,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:702,testability,review,reviews,702,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:72,usability,confirm,confirm,72,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:464,usability,behavi,behaviour,464,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:482,usability,prefer,prefer,482,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:643,usability,simpl,simple,643,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:904,usability,user,users,904,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:921,usability,user,users,921,"> We did not come up with a better name. Ours was SparseVector. Just to confirm, we do not pre-allocate the entire vector but we deterministically allocate the slabs. That is, if I hardcoded an offset 101 in my code and the pre-allocation allocated just a slab [0-100), then when I do PagedVector[101] it would put what I need where I need it, right? No, you would need first to register the range [100, 200) via addEmptyRange(). I could try to modify it for that behaviour, if you prefer. Maybe it would allow me to get rid of the logarithmic lookup, actually (basically, one less vector to worry about). > If it is not needed, let's keep it simple. It would be easier to go through the upstream llvm reviews. Ok, I will clean it up a bit more. > Can we make the API of the PagedVector such that it becomes a drop-in replacement? I have not looked deeply in the PR but I see some work being done on the users side. Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? > The source locations offset would be a major source of improvement if this technique flies there. I couldn't find the source locations vector anymore. Could you point it to me? > PP: It seems llvm has some facility along these lines: https://llvm.org/doxygen/classllvm_1_1SparseBitVector.html. I will have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:7,usability,user,users,7,"> Yes, users would need to addEmptyRange where they now do resize(). I guess I could actually hide addEmptyRange inside the resize. Is it allowed to use std::pmr::vector in the llvm codebase? I don't think so. I could not find uses of it in clang. > . > > The source locations offset would be a major source of improvement if this technique flies there. > . > I couldn't find the source locations vector anymore. Could you point it to me? From [here](https://github.com/llvm/llvm-project/blob/69b056d5638bbe3c8098b5d3a4980eb9929b9bbe/clang/lib/Serialization/ASTReader.cpp#L3520) you will need to jump to the `clang::SourceManager` object.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:19,deployability,updat,updated,19,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:55,deployability,patch,patch,55,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:154,energy efficiency,reduc,reduction,154,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:174,energy efficiency,alloc,allocations,174,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:754,energy efficiency,current,current,754,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:896,energy efficiency,current,currently,896,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:1074,energy efficiency,alloc,allocated,1074,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:315,integrability,interfac,interface,315,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:821,integrability,asynchron,asynchronous,821,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:315,interoperability,interfac,interface,315,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:315,modifiability,interfac,interface,315,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:167,performance,memor,memory,167,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:601,performance,memor,memory,601,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:821,performance,asynch,asynchronous,821,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:573,reliability,doe,does,573,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:19,safety,updat,updated,19,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:55,safety,patch,patch,55,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:108,safety,test,test,108,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:196,safety,test,testing,196,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:443,safety,compl,complicated,443,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:790,safety,test,tests,790,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:19,security,updat,updated,19,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:55,security,patch,patch,55,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:295,security,expos,exposes,295,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:443,security,compl,complicated,443,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:108,testability,test,test,108,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:196,testability,test,testing,196,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:762,testability,plan,plan,762,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:771,testability,Verif,Verify,771,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:790,testability,test,tests,790,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:167,usability,memor,memory,167,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:601,usability,memor,memory,601,"@vgvassilev I have updated the PR to include a similar patch for the SourceManager and at least the trivial test seems to work fine, including a nice 9MB reduction in memory allocations. I am now testing with the ALICE analysis framework. I have also done a few of the cleanups, and it now only exposes an ""expand"" interface (basically resize without shrinking). AFAICT, it's not worth to implement the full ""resize"" functionality, given it's complicated and at least the places I fixed never shrink. I think also the calloc approach might not be a good idea given realloc does not guarantee that the memory is zeroed and besides that page ranges might be a tad too big for vector of pointers and so on. I would put aside that idea, at least for now. My current plan:. * Verify with larger tests using ALICE analysis and asynchronous reconstruction. * Unify the two PagedVector implementations I currently have (one for ASTReader and one for SourceManager). * Use fixed size ranges, so that I can get rid of the ranges in my internal index and just keep where each page was allocated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:218,deployability,modul,module,218,"> For the record, the new top offender is actually findOrCreateModule. > . > ![image](https://user-images.githubusercontent.com/10544/267616262-3be43a68-6a43-47f3-b81e-9d97ebcfae44.png). That's probably the loading of module `std.pcm`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:207,energy efficiency,load,loading,207,"> For the record, the new top offender is actually findOrCreateModule. > . > ![image](https://user-images.githubusercontent.com/10544/267616262-3be43a68-6a43-47f3-b81e-9d97ebcfae44.png). That's probably the loading of module `std.pcm`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:218,modifiability,modul,module,218,"> For the record, the new top offender is actually findOrCreateModule. > . > ![image](https://user-images.githubusercontent.com/10544/267616262-3be43a68-6a43-47f3-b81e-9d97ebcfae44.png). That's probably the loading of module `std.pcm`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:207,performance,load,loading,207,"> For the record, the new top offender is actually findOrCreateModule. > . > ![image](https://user-images.githubusercontent.com/10544/267616262-3be43a68-6a43-47f3-b81e-9d97ebcfae44.png). That's probably the loading of module `std.pcm`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:218,safety,modul,module,218,"> For the record, the new top offender is actually findOrCreateModule. > . > ![image](https://user-images.githubusercontent.com/10544/267616262-3be43a68-6a43-47f3-b81e-9d97ebcfae44.png). That's probably the loading of module `std.pcm`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:94,usability,user,user-images,94,"> For the record, the new top offender is actually findOrCreateModule. > . > ![image](https://user-images.githubusercontent.com/10544/267616262-3be43a68-6a43-47f3-b81e-9d97ebcfae44.png). That's probably the loading of module `std.pcm`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:387,availability,down,down,387,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:54,deployability,updat,updated,54,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:413,deployability,patch,patch,413,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:656,deployability,patch,patch,656,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:642,integrability,sub,submitted,642,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:503,performance,memor,memory,503,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:616,performance,cach,cache,616,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:351,reliability,doe,does,351,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:54,safety,updat,updated,54,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:413,safety,patch,patch,413,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:656,safety,patch,patch,656,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:54,security,updat,updated,54,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:413,security,patch,patch,413,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:656,security,patch,patch,656,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:329,testability,Simpl,Simply,329,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:121,usability,workflow,workflows,121,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:329,usability,Simpl,Simply,329,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:503,usability,memor,memory,503,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:305,availability,state,state,305,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:216,deployability,build,builds,216,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:396,deployability,build,builds,396,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:490,deployability,patch,patch,490,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:697,deployability,scale,scale,697,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:703,deployability,modul,module,703,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:808,deployability,modul,modules,808,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:697,energy efficiency,scale,scale,697,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:305,integrability,state,state,305,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:476,integrability,sub,submitted,476,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:374,interoperability,format,format,374,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:697,modifiability,scal,scale,697,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:703,modifiability,modul,module,703,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:808,modifiability,modul,modules,808,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:44,performance,memor,memory,44,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:157,performance,cach,cache,157,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:369,performance,disk,disk,369,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:697,performance,scale,scale,697,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:675,reliability,doe,does,675,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:490,safety,patch,patch,490,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:684,safety,test,test,684,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:703,safety,modul,module,703,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:734,safety,test,test,734,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:808,safety,modul,modules,808,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:834,safety,compl,completely,834,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:490,security,patch,patch,490,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:834,security,compl,completely,834,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:238,testability,assert,assertion,238,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:684,testability,test,test,684,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:734,testability,test,test,734,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:786,testability,regress,regress,786,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:952,testability,regress,regressing,952,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:44,usability,memor,memory,44,"> The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache? I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > Notice I have also submitted the patch to llvm itself and it passes their CI ([llvm/llvm-project#66430 (comment)](https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)). Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:143,availability,state,state,143,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:603,availability,state,state,603,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:54,deployability,build,builds,54,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:234,deployability,build,builds,234,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:458,deployability,build,build,458,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:571,deployability,depend,dependency,571,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:143,integrability,state,state,143,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:571,integrability,depend,dependency,571,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:603,integrability,state,state,603,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:212,interoperability,format,format,212,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:571,modifiability,depend,dependency,571,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:590,modifiability,interm,intermediate,590,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:207,performance,disk,disk,207,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:571,safety,depend,dependency,571,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:76,testability,assert,assertion,76,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:571,testability,depend,dependency,571,"> I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:53,deployability,scale,scale,53,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:59,deployability,modul,module,59,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:164,deployability,modul,modules,164,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:53,energy efficiency,scale,scale,53,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:53,modifiability,scal,scale,53,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:59,modifiability,modul,module,59,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:164,modifiability,modul,modules,164,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:53,performance,scale,scale,53,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:31,reliability,doe,does,31,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:40,safety,test,test,40,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:59,safety,modul,module,59,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:90,safety,test,test,90,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:164,safety,modul,modules,164,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:190,safety,compl,completely,190,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:190,security,compl,completely,190,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:40,testability,test,test,40,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:90,testability,test,test,90,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:142,testability,regress,regress,142,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:308,testability,regress,regressing,308,"> Very likely the pre-merge CI does not test a large scale module setup. You will have to test this yourself and prove that the changes don't regress the case when modules are used (almost) completely. This will be needed to convince the wider community that it is solving an actual problem, or at least not regressing the ""normal"" compiler use case. I'll do what it takes, thank you for pointing that out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:145,availability,state,state,145,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:611,availability,state,state,611,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:56,deployability,build,builds,56,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:236,deployability,build,builds,236,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:466,deployability,build,build,466,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:579,deployability,depend,dependency,579,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:835,deployability,upgrad,upgrading,835,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:145,integrability,state,state,145,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:579,integrability,depend,dependency,579,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:611,integrability,state,state,611,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:214,interoperability,format,format,214,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:826,interoperability,format,format,826,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:579,modifiability,depend,dependency,579,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:598,modifiability,interm,intermediate,598,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:835,modifiability,upgrad,upgrading,835,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:209,performance,disk,disk,209,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:821,performance,disk,disk,821,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:579,safety,depend,dependency,579,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:78,testability,assert,assertion,78,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:579,testability,depend,dependency,579,"> > I cannot reproduce it either, but a number of Linux builds agree that the assertion can still be triggered. PRs should be built from a clean state (in Jenkins), but even if not you are not changing the on-disk format so incremental builds must also work correctly. This needs investigation. > . > What I think is happening is that the broken PR generated some broken file, and the new PR is not able to survive such broken file. IMHO, this is a problem with the build setup (not being able to notice broken files and delete them) more than with my PR (which of course has no dependency on some intermediate state). Shall I just open a new PR and we see how that goes? I'm telling that this is not the case - there are no left-behind files (in Jenkins) that influence future PR runs. We know this from changing the on-disk format / upgrading LLVM / etc. There is a problem and it needs to be investigated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:54,deployability,releas,released,54,"I think quite some improvements are there in 6.30.04 (released) and master. @ktf is it difficult for you to check if the issue is fixed, and, if yes, close the item? If not I can start from your repro and proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:150,usability,close,close,150,"I think quite some improvements are there in 6.30.04 (released) and master. @ktf is it difficult for you to check if the issue is fixed, and, if yes, close the item? If not I can start from your repro and proceed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11,deployability,patch,patch,11,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:236,energy efficiency,load,loading,236,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:641,energy efficiency,profil,profile,641,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:152,integrability,translat,translates,152,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:426,integrability,buffer,buffer,426,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:152,interoperability,translat,translates,152,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:45,performance,overhead,overhead,45,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:236,performance,load,loading,236,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:641,performance,profil,profile,641,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11,safety,patch,patch,11,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:209,safety,compl,completely,209,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:256,safety,compl,complicated,256,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:11,security,patch,patch,11,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:209,security,compl,completely,209,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:256,security,compl,complicated,256,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:506,usability,effectiv,effectively,506,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:168,deployability,modul,module,168,"I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:168,modifiability,modul,module,168,"I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:48,reliability,pra,pragma,48,"I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:55,reliability,diagno,diagnostic,55,"I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:93,reliability,pra,pragrams,93,"I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:168,safety,modul,module,168,"I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:55,testability,diagno,diagnostic,55,"I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:85,availability,down,down,85,"In theory, if the software stack (not just ROOT) uses modules the RSS should also go down. Maybe that's worth trying on your end...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:27,deployability,stack,stack,27,"In theory, if the software stack (not just ROOT) uses modules the RSS should also go down. Maybe that's worth trying on your end...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:54,deployability,modul,modules,54,"In theory, if the software stack (not just ROOT) uses modules the RSS should also go down. Maybe that's worth trying on your end...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:54,modifiability,modul,modules,54,"In theory, if the software stack (not just ROOT) uses modules the RSS should also go down. Maybe that's worth trying on your end...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:54,safety,modul,modules,54,"In theory, if the software stack (not just ROOT) uses modules the RSS should also go down. Maybe that's worth trying on your end...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:170,deployability,modul,module,170,"> I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... any way i can confirm this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:170,modifiability,modul,module,170,"> I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... any way i can confirm this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:50,reliability,pra,pragma,50,"> I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... any way i can confirm this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:57,reliability,diagno,diagnostic,57,"> I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... any way i can confirm this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:95,reliability,pra,pragrams,95,"> I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... any way i can confirm this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:170,safety,modul,module,170,"> I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... any way i can confirm this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:57,testability,diagno,diagnostic,57,"> I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... any way i can confirm this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:206,usability,confirm,confirm,206,"> I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... any way i can confirm this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:335,availability,state,statements,335,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:172,deployability,modul,module,172,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:335,integrability,state,statements,335,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:172,modifiability,modul,module,172,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:52,reliability,pra,pragma,52,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:59,reliability,diagno,diagnostic,59,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:97,reliability,pra,pragrams,97,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:406,reliability,pra,pragma,406,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:413,reliability,diagno,diagnostic,413,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:172,safety,modul,module,172,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:59,testability,diagno,diagnostic,59,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:413,testability,diagno,diagnostic,413,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:214,usability,confirm,confirm,214,"> > I am wondering if we are not pushing repetitive pragma diagnostic mappings. We have tons for pragrams coming from the Linkdef files, not sure if they are needed in the module file itself... > . > any way i can confirm this? Not directly. Either we can run rootcling with `-v4` and count the mappings or we can insert some printing statements on `::WritePragmaDiagnosticMapping`... I suspect making the pragma diagnostic mappings lazy would be art...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:193,testability,context,context,193,"Dear @ktf, I am closing the issue assuming that this is not an issue any more for ALICE when adopting ROOT 6.32.X. Please do not hesitate to re-open in case this is not the case, providing the context necessary for us to fix the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:88,energy efficiency,load,loads,88,"It's not an issue for adoption. The underlying issue is still there, though. ROOT still loads a bunch of unneeded PCM when simply opening a file, it's just the cost is half what it was before and the reproducer is the same as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:88,performance,load,loads,88,"It's not an issue for adoption. The underlying issue is still there, though. ROOT still loads a bunch of unneeded PCM when simply opening a file, it's just the cost is half what it was before and the reproducer is the same as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:123,testability,simpl,simply,123,"It's not an issue for adoption. The underlying issue is still there, though. ROOT still loads a bunch of unneeded PCM when simply opening a file, it's just the cost is half what it was before and the reproducer is the same as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13000:123,usability,simpl,simply,123,"It's not an issue for adoption. The underlying issue is still there, though. ROOT still loads a bunch of unneeded PCM when simply opening a file, it's just the cost is half what it was before and the reproducer is the same as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13000
https://github.com/root-project/root/issues/13001:20,availability,error,error,20,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:147,availability,error,error,147,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:20,performance,error,error,20,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:147,performance,error,error,147,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:20,safety,error,error,20,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:147,safety,error,error,147,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:414,testability,unit,unit,414,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:20,usability,error,error,20,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:147,usability,error,error,147,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:429,usability,user,user,429,"As a side note, the error mentions:. ```. /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Mon/x86_64-el9-gcc13-dbg/include/concepts/compare.hpp:35:39: error: reference to 'ranges' is ambiguous. concept compares_as = same_as<ranges::common_comparison_category_t<T, Cat>, Cat>;. ^. ```. Shouldn't this header file _also_ be improved by fully qualifying ranges here? (i.e. would the same problem happens in a compilation unit where the user of this header and `string_view` want to use `using namespace std;`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:36,availability,error,error,36,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:218,availability,error,errors,218,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:306,availability,error,error,306,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:449,availability,error,error,449,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:36,performance,error,error,36,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:218,performance,error,errors,218,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:286,performance,time,time,286,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:306,performance,error,error,306,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:449,performance,error,error,449,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:802,reliability,doe,does,802,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:36,safety,error,error,36,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:218,safety,error,errors,218,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:306,safety,error,error,306,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:449,safety,error,error,449,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:75,testability,simpl,simple,75,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:36,usability,error,error,36,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:75,usability,simpl,simple,75,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:218,usability,error,errors,218,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:306,usability,error,error,306,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:449,usability,error,error,449,"Yes, of course, I can reproduce the error in regular C++ with something as simple as <https://godbolt.org/z/rnqWer3bj>:. ```cpp. #include <ranges>. using namespace std;. #include <range/v3/views.hpp>. ```. but I see 2 errors in this example:. - using std::ranges and ranges at the same time (not really an error, but a bit silly). - `using namespace std` before including `range/v3/views.hpp` (actually `using namespace std` should be considered an error by itself). The following code works:. ```cpp. #include <ranges>. #include <range/v3/views.hpp>. using namespace std;. ```. still a bit silly, but it works. So, I'm sorry, but I do not buy the comment that developers of libraries should always put `::` in front of every top level namespace. I believe it is fairy reasonable to assume that nobody does `using namespace std;` before including any header.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:260,availability,sli,slight,260,"Yes, it is still true that we need to remove/replace the `using namespace` (my note was just a side note and was not meant to undermine this report) and it is also true that making one's own headers more resilient to silly but legal usage is usually worth the slight (and debatable) decrease in readability (by having/adding more qualification).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:204,reliability,resilien,resilient,204,"Yes, it is still true that we need to remove/replace the `using namespace` (my note was just a side note and was not meant to undermine this report) and it is also true that making one's own headers more resilient to silly but legal usage is usually worth the slight (and debatable) decrease in readability (by having/adding more qualification).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:260,reliability,sli,slight,260,"Yes, it is still true that we need to remove/replace the `using namespace` (my note was just a side note and was not meant to undermine this report) and it is also true that making one's own headers more resilient to silly but legal usage is usually worth the slight (and debatable) decrease in readability (by having/adding more qualification).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:204,safety,resilien,resilient,204,"Yes, it is still true that we need to remove/replace the `using namespace` (my note was just a side note and was not meant to undermine this report) and it is also true that making one's own headers more resilient to silly but legal usage is usually worth the slight (and debatable) decrease in readability (by having/adding more qualification).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13001:107,deployability,instal,installing-librange-,107,This was mentioned recently again on the forum:. https://root-forum.cern.ch/t/precompiled-root-broke-after-installing-librange-v3-dev-on-ubuntu/61603,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13001
https://github.com/root-project/root/issues/13002:95,safety,test,test,95,might be related to https://github.com/root-project/root/issues/7541 - the question is: is the test code supposed to throw exceptions (from / through interpreted code)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:123,safety,except,exceptions,123,might be related to https://github.com/root-project/root/issues/7541 - the question is: is the test code supposed to throw exceptions (from / through interpreted code)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:95,testability,test,test,95,might be related to https://github.com/root-project/root/issues/7541 - the question is: is the test code supposed to throw exceptions (from / through interpreted code)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:201,availability,failur,failure,201,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:560,availability,Error,Error,560,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:663,availability,error,error,663,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:857,availability,Error,Errors,857,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1444,availability,Error,Errors,1444,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1729,availability,error,errors,1729,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:44,deployability,instal,installed,44,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:152,deployability,build,build,152,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:201,deployability,fail,failure,201,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:284,deployability,BUILD,BUILD,284,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:416,deployability,Fail,Failed,416,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:588,deployability,BUILD,BUILD,588,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:618,deployability,modul,modules,618,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:720,deployability,fail,failed,720,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:792,deployability,FAIL,FAILED,792,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:848,deployability,Fail,Failed,848,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:983,deployability,fail,failed,983,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1057,deployability,FAIL,FAILED,1057,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1113,deployability,Fail,Failed,1113,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1170,deployability,Fail,Failed,1170,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1230,deployability,Fail,Failed,1230,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1290,deployability,Fail,Failed,1290,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1351,deployability,Fail,Failed,1351,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1392,deployability,Fail,Failed,1392,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1435,deployability,Fail,Failed,1435,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1487,deployability,fail,failing,1487,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1656,deployability,instal,installed,1656,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1690,deployability,configurat,configuration,1690,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1711,deployability,instal,installation,1711,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:234,energy efficiency,Optim,Optimization-Cpu,234,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:338,energy efficiency,Optim,Optimization-Cpu,338,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:393,energy efficiency,Optim,Optimization-Cpu,393,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:460,energy efficiency,Optim,Optimizer,460,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:474,energy efficiency,CPU,CPU,474,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:830,energy efficiency,Optim,Optimization-Cpu,830,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1095,energy efficiency,Optim,Optimization-Cpu,1095,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1152,energy efficiency,Optim,Optimization-Cpu,1152,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1212,energy efficiency,Optim,Optimization-Cpu,1212,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1272,energy efficiency,Optim,Optimization-Cpu,1272,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1333,energy efficiency,Optim,Optimization-Cpu,1333,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1387,energy efficiency,Cpu,Cpu,1387,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1430,energy efficiency,Cpu,Cpu,1430,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:652,integrability,messag,message,652,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:675,integrability,Sub,Subprocess,675,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1690,integrability,configur,configuration,1690,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:652,interoperability,messag,message,652,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:618,modifiability,modul,modules,618,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1690,modifiability,configur,configuration,1690,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:201,performance,failur,failure,201,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:234,performance,Optimiz,Optimization-Cpu,234,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:338,performance,Optimiz,Optimization-Cpu,338,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:393,performance,Optimiz,Optimization-Cpu,393,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:460,performance,Optimiz,Optimizer,460,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:474,performance,CPU,CPU,474,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:560,performance,Error,Error,560,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:663,performance,error,error,663,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:748,performance,time,time,748,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:830,performance,Optimiz,Optimization-Cpu,830,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:857,performance,Error,Errors,857,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1012,performance,time,time,1012,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1095,performance,Optimiz,Optimization-Cpu,1095,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1152,performance,Optimiz,Optimization-Cpu,1152,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1212,performance,Optimiz,Optimization-Cpu,1212,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1272,performance,Optimiz,Optimization-Cpu,1272,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1333,performance,Optimiz,Optimization-Cpu,1333,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1387,performance,Cpu,Cpu,1387,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1430,performance,Cpu,Cpu,1430,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1444,performance,Error,Errors,1444,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1729,performance,error,errors,1729,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:201,reliability,fail,failure,201,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:416,reliability,Fail,Failed,416,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:720,reliability,fail,failed,720,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:792,reliability,FAIL,FAILED,792,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:848,reliability,Fail,Failed,848,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:983,reliability,fail,failed,983,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1057,reliability,FAIL,FAILED,1057,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1113,reliability,Fail,Failed,1113,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1170,reliability,Fail,Failed,1170,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1230,reliability,Fail,Failed,1230,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1290,reliability,Fail,Failed,1290,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1351,reliability,Fail,Failed,1351,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1392,reliability,Fail,Failed,1392,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1435,reliability,Fail,Failed,1435,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1487,reliability,fail,failing,1487,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:139,safety,test,tests,139,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:252,safety,Test,Test,252,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:360,safety,Test,Test,360,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:433,safety,Test,Testing,433,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:519,safety,detect,detected,519,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:560,safety,Error,Error,560,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:618,safety,modul,modules,618,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:663,safety,error,error,663,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:698,safety,test,tests,698,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:714,safety,test,tests,714,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:743,safety,Test,Test,743,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:786,safety,test,tests,786,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:857,safety,Error,Errors,857,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:916,safety,test,tests,916,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:961,safety,test,tests,961,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:977,safety,test,tests,977,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1007,safety,Test,Test,1007,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1051,safety,test,tests,1051,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1444,safety,Error,Errors,1444,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1495,safety,test,tests,1495,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1544,safety,detect,detected,1544,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1591,safety,test,tests,1591,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1729,safety,error,errors,1729,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:519,security,detect,detected,519,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1544,security,detect,detected,1544,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1690,security,configur,configuration,1690,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:139,testability,test,tests,139,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:252,testability,Test,Test,252,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:360,testability,Test,Test,360,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:433,testability,Test,Testing,433,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:698,testability,test,tests,698,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:714,testability,test,tests,714,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:743,testability,Test,Test,743,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:786,testability,test,tests,786,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:916,testability,test,tests,916,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:961,testability,test,tests,961,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:977,testability,test,tests,977,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1007,testability,Test,Test,1007,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1051,testability,test,tests,1051,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1376,testability,Regress,Regression-Cpu,1376,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1495,testability,test,tests,1495,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1591,testability,test,tests,1591,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:266,usability,User,Users,266,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:560,usability,Error,Error,560,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:570,usability,User,Users,570,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:663,usability,error,error,663,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:857,usability,Error,Errors,857,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1444,usability,Error,Errors,1444,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:1729,usability,error,errors,1729,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```. $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu. Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b. Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu. 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec. Testing Method DL with SGD Optimizer for CPU backend:. libc++abi: __cxa_guard_acquire detected recursive initialization. CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):. error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). Errors while running CTest. ```. When running all the TMVA tests:. ```. $ ctest -R ""^TMVA"" -j6. ... 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:. 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed). 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed). 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed). 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed). 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed). 	362 - TMVA-DNN-Regression-Cpu (Failed). 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed). Errors while running CTest. ```. All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:131,deployability,build,building,131,"Dear @hansenjo, thanks for reporting this issue. This seems to be a mismatch between the XCode on the machine and the one used for building ROOT binaries. Presently, we are unable to reproduce the issue and by now apple clang moved to version 15. I am closing this issue but feel free to re-open it if this is still a problem for you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:235,deployability,version,version,235,"Dear @hansenjo, thanks for reporting this issue. This seems to be a mismatch between the XCode on the machine and the one used for building ROOT binaries. Presently, we are unable to reproduce the issue and by now apple clang moved to version 15. I am closing this issue but feel free to re-open it if this is still a problem for you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:235,integrability,version,version,235,"Dear @hansenjo, thanks for reporting this issue. This seems to be a mismatch between the XCode on the machine and the one used for building ROOT binaries. Presently, we are unable to reproduce the issue and by now apple clang moved to version 15. I am closing this issue but feel free to re-open it if this is still a problem for you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:68,interoperability,mismatch,mismatch,68,"Dear @hansenjo, thanks for reporting this issue. This seems to be a mismatch between the XCode on the machine and the one used for building ROOT binaries. Presently, we are unable to reproduce the issue and by now apple clang moved to version 15. I am closing this issue but feel free to re-open it if this is still a problem for you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/issues/13002:235,modifiability,version,version,235,"Dear @hansenjo, thanks for reporting this issue. This seems to be a mismatch between the XCode on the machine and the one used for building ROOT binaries. Presently, we are unable to reproduce the issue and by now apple clang moved to version 15. I am closing this issue but feel free to re-open it if this is still a problem for you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13002
https://github.com/root-project/root/pull/13003:180,availability,servic,services,180,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:2,deployability,Build,Build,2,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:8,deployability,fail,failed,8,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:101,deployability,build,build,101,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:135,deployability,build,build,135,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:180,deployability,servic,services,180,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:232,deployability,build,build,232,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:361,deployability,build,build,361,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:367,deployability,log,log,367,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:535,deployability,build,build,535,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:569,deployability,build,build,569,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:180,integrability,servic,services,180,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:345,integrability,messag,messages,345,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:345,interoperability,messag,messages,345,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:180,modifiability,servic,services,180,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:8,reliability,fail,failed,8,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:318,safety,review,review,318,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:367,safety,log,log,367,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:367,security,log,log,367,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:318,testability,review,review,318,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13003:367,testability,log,log,367,"> Build failed on ROOT-ubuntu2204/nortcxxmod. > Running on root-ubuntu-2204-3.cern.ch:/home/sftnight/build/workspace/root-pullrequests-build. > [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/177113/console). Totally unrelated. @Axel-Naumann, this should be now ready for review; also, note the new messages in the build log, i.e. ```. -- Cloning roottest from 'https://github.com/root-project/roottest' (master). Cloning into 'roottest'... ```. or. ```. -- Found roottest: /home/sftnight/build/workspace/root-pullrequests-build/root/../roottest. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13003
https://github.com/root-project/root/pull/13004:66,deployability,fail,fails,66,"> Thanks, @bellenot! > . > This test is under investigation as it fails in other platforms during the destruction of the `RPageSinkBuf`. I guess we don't need to exclude it on Win32, but to provide a more general fix though. OK, as you prefer, just let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13004
https://github.com/root-project/root/pull/13004:81,interoperability,platform,platforms,81,"> Thanks, @bellenot! > . > This test is under investigation as it fails in other platforms during the destruction of the `RPageSinkBuf`. I guess we don't need to exclude it on Win32, but to provide a more general fix though. OK, as you prefer, just let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13004
https://github.com/root-project/root/pull/13004:66,reliability,fail,fails,66,"> Thanks, @bellenot! > . > This test is under investigation as it fails in other platforms during the destruction of the `RPageSinkBuf`. I guess we don't need to exclude it on Win32, but to provide a more general fix though. OK, as you prefer, just let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13004
https://github.com/root-project/root/pull/13004:32,safety,test,test,32,"> Thanks, @bellenot! > . > This test is under investigation as it fails in other platforms during the destruction of the `RPageSinkBuf`. I guess we don't need to exclude it on Win32, but to provide a more general fix though. OK, as you prefer, just let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13004
https://github.com/root-project/root/pull/13004:32,testability,test,test,32,"> Thanks, @bellenot! > . > This test is under investigation as it fails in other platforms during the destruction of the `RPageSinkBuf`. I guess we don't need to exclude it on Win32, but to provide a more general fix though. OK, as you prefer, just let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13004
https://github.com/root-project/root/pull/13004:236,usability,prefer,prefer,236,"> Thanks, @bellenot! > . > This test is under investigation as it fails in other platforms during the destruction of the `RPageSinkBuf`. I guess we don't need to exclude it on Win32, but to provide a more general fix though. OK, as you prefer, just let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13004
https://github.com/root-project/root/issues/13005:32,usability,document,documentation,32,"So, We need make changes in the documentation that is comment above the function .Am I right ? . what is the correct value of epsrel or it just needs to be same? ![image](https://github.com/root-project/root/assets/91372908/8a458fa2-c779-40fe-a82e-37d3e207bd6a).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:9,usability,document,documentation,9,"Yes, the documentation has to be changed. I do not know which of the two values is correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:58,deployability,integr,integration,58,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:165,deployability,depend,depend,165,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:58,integrability,integr,integration,58,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:165,integrability,depend,depend,165,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:58,interoperability,integr,integration,58,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:58,modifiability,integr,integration,58,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:165,modifiability,depend,depend,165,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:151,performance,time,time,151,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:58,reliability,integr,integration,58,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:165,safety,depend,depend,165,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:58,security,integr,integration,58,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:58,testability,integr,integration,58,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:165,testability,depend,depend,165,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:244,usability,prefer,preferable,244,"A common default value for relative accuracy in numerical integration algorithms is often around 1e-6 (0.000001) or 1e-8 (0.00000001). But at the same time can also depend on the desired precision . So, I believe that lesser value will be more preferable so that we get higher precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:57,security,sign,signature,57,"Of course, the default value is the one mentioned in the signature as it is extracted from the code. The value mentioned in the help is a typo seems to me. @lmoneta can you confirm?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:128,usability,help,help,128,"Of course, the default value is the one mentioned in the signature as it is extracted from the code. The value mentioned in the help is a typo seems to me. @lmoneta can you confirm?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:173,usability,confirm,confirm,173,"Of course, the default value is the one mentioned in the signature as it is extracted from the code. The value mentioned in the help is a typo seems to me. @lmoneta can you confirm?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:32,security,sign,signature,32,"yes, the value mentioned in the signature is the one coming from the code. it is the one used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:48,deployability,Integr,Integral,48,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:48,integrability,Integr,Integral,48,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:48,interoperability,Integr,Integral,48,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:156,interoperability,specif,specifying,156,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:48,modifiability,Integr,Integral,48,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:172,modifiability,paramet,parameter,172,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:48,reliability,Integr,Integral,48,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:48,security,Integr,Integral,48,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:17,testability,simpl,simply,17,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:48,testability,Integr,Integral,48,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/issues/13005:17,usability,simpl,simply,17,"if you need 1e-9 simply change it when you call Integral, that is what ""defined by eps"" means. You defined it, either by using the default value 1e-6 or by specifying this parameter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13005
https://github.com/root-project/root/pull/13006:24,performance,disk,disk,24,I have the impression a disk got full. Can you please restart the tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13006
https://github.com/root-project/root/pull/13006:66,safety,test,tests,66,I have the impression a disk got full. Can you please restart the tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13006
https://github.com/root-project/root/pull/13006:66,testability,test,tests,66,I have the impression a disk got full. Can you please restart the tests?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13006
https://github.com/root-project/root/pull/13014:60,energy efficiency,green,green,60,"Rebased on `master` to trigger the CI tests. When the CI is green, I think this can be merged.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13014
https://github.com/root-project/root/pull/13014:38,safety,test,tests,38,"Rebased on `master` to trigger the CI tests. When the CI is green, I think this can be merged.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13014
https://github.com/root-project/root/pull/13014:38,testability,test,tests,38,"Rebased on `master` to trigger the CI tests. When the CI is green, I think this can be merged.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13014
https://github.com/root-project/root/pull/13015:15,modifiability,pac,packs,15,"> There are no packs to expand here. Yes there is. Next, trying to reproduce the compiler bug...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13015
https://github.com/root-project/root/pull/13015:1389,deployability,version,version,1389,"See [godbolt](https://www.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,selection:(endColumn:1,endLineNumber:10,positionColumn:1,positionLineNumber:10,selectionStartColumn:1,selectionStartLineNumber:10,startColumn:1,startLineNumber:10),source:'template+%3Cclass+...T%3E%0Astruct+P+%7B%7D%3B%0A%0Atemplate+%3Cclass+ONE,+template+%3Cclass+O_%3E+class...+T%3E%0Astruct+U:+T%3CONE%3E...+%7B%0A++++using+u+%3D+P%3Ctypename+T%3CONE%3E::t...%3E%3B%0A%7D%3B%0A%0AU%3Cint%3E+u%3B%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0'),(h:compiler,i:(compiler:vcpp_v19_latest_x64,deviceViewOpen:'1',filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x64+msvc+v19.latest+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compilerName:'x64+msvc+v19.latest',editorid:1,fontScale:14,fontUsePx:'0',j:1,wrap:'1'),l:'5',n:'0',o:'Output+of+x64+msvc+v19.latest+(Compiler+%231)',t:'0')),header:(),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13015
https://github.com/root-project/root/pull/13015:637,integrability,filter,filters,637,"See [godbolt](https://www.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,selection:(endColumn:1,endLineNumber:10,positionColumn:1,positionLineNumber:10,selectionStartColumn:1,selectionStartLineNumber:10,startColumn:1,startLineNumber:10),source:'template+%3Cclass+...T%3E%0Astruct+P+%7B%7D%3B%0A%0Atemplate+%3Cclass+ONE,+template+%3Cclass+O_%3E+class...+T%3E%0Astruct+U:+T%3CONE%3E...+%7B%0A++++using+u+%3D+P%3Ctypename+T%3CONE%3E::t...%3E%3B%0A%7D%3B%0A%0AU%3Cint%3E+u%3B%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0'),(h:compiler,i:(compiler:vcpp_v19_latest_x64,deviceViewOpen:'1',filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x64+msvc+v19.latest+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compilerName:'x64+msvc+v19.latest',editorid:1,fontScale:14,fontUsePx:'0',j:1,wrap:'1'),l:'5',n:'0',o:'Output+of+x64+msvc+v19.latest+(Compiler+%231)',t:'0')),header:(),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13015
https://github.com/root-project/root/pull/13015:1240,integrability,wrap,wrap,1240,"See [godbolt](https://www.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,selection:(endColumn:1,endLineNumber:10,positionColumn:1,positionLineNumber:10,selectionStartColumn:1,selectionStartLineNumber:10,startColumn:1,startLineNumber:10),source:'template+%3Cclass+...T%3E%0Astruct+P+%7B%7D%3B%0A%0Atemplate+%3Cclass+ONE,+template+%3Cclass+O_%3E+class...+T%3E%0Astruct+U:+T%3CONE%3E...+%7B%0A++++using+u+%3D+P%3Ctypename+T%3CONE%3E::t...%3E%3B%0A%7D%3B%0A%0AU%3Cint%3E+u%3B%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0'),(h:compiler,i:(compiler:vcpp_v19_latest_x64,deviceViewOpen:'1',filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x64+msvc+v19.latest+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compilerName:'x64+msvc+v19.latest',editorid:1,fontScale:14,fontUsePx:'0',j:1,wrap:'1'),l:'5',n:'0',o:'Output+of+x64+msvc+v19.latest+(Compiler+%231)',t:'0')),header:(),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13015
https://github.com/root-project/root/pull/13015:1389,integrability,version,version,1389,"See [godbolt](https://www.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,selection:(endColumn:1,endLineNumber:10,positionColumn:1,positionLineNumber:10,selectionStartColumn:1,selectionStartLineNumber:10,startColumn:1,startLineNumber:10),source:'template+%3Cclass+...T%3E%0Astruct+P+%7B%7D%3B%0A%0Atemplate+%3Cclass+ONE,+template+%3Cclass+O_%3E+class...+T%3E%0Astruct+U:+T%3CONE%3E...+%7B%0A++++using+u+%3D+P%3Ctypename+T%3CONE%3E::t...%3E%3B%0A%7D%3B%0A%0AU%3Cint%3E+u%3B%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0'),(h:compiler,i:(compiler:vcpp_v19_latest_x64,deviceViewOpen:'1',filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x64+msvc+v19.latest+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compilerName:'x64+msvc+v19.latest',editorid:1,fontScale:14,fontUsePx:'0',j:1,wrap:'1'),l:'5',n:'0',o:'Output+of+x64+msvc+v19.latest+(Compiler+%231)',t:'0')),header:(),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13015
https://github.com/root-project/root/pull/13015:1389,modifiability,version,version,1389,"See [godbolt](https://www.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,selection:(endColumn:1,endLineNumber:10,positionColumn:1,positionLineNumber:10,selectionStartColumn:1,selectionStartLineNumber:10,startColumn:1,startLineNumber:10),source:'template+%3Cclass+...T%3E%0Astruct+P+%7B%7D%3B%0A%0Atemplate+%3Cclass+ONE,+template+%3Cclass+O_%3E+class...+T%3E%0Astruct+U:+T%3CONE%3E...+%7B%0A++++using+u+%3D+P%3Ctypename+T%3CONE%3E::t...%3E%3B%0A%7D%3B%0A%0AU%3Cint%3E+u%3B%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0'),(h:compiler,i:(compiler:vcpp_v19_latest_x64,deviceViewOpen:'1',filters:(b:'0',binary:'1',binaryObject:'1',commentOnly:'0',debugCalls:'1',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,libs:!(),options:'',overrides:!(),selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:'5',n:'0',o:'+x64+msvc+v19.latest+(Editor+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compilerName:'x64+msvc+v19.latest',editorid:1,fontScale:14,fontUsePx:'0',j:1,wrap:'1'),l:'5',n:'0',o:'Output+of+x64+msvc+v19.latest+(Compiler+%231)',t:'0')),header:(),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13015
https://github.com/root-project/root/issues/13016:632,availability,Error,Error,632,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:698,availability,Error,Error,698,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:690,deployability,fail,failed,690,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:756,deployability,fail,failed,756,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:632,performance,Error,Error,632,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:698,performance,Error,Error,698,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:3,reliability,doe,does,3,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:690,reliability,fail,failed,690,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:756,reliability,fail,failed,756,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:614,safety,valid,valid,614,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:632,safety,Error,Error,632,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:698,safety,Error,Error,698,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:219,security,Team,Team,219,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:739,testability,context,context,739,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:412,usability,help,help,412,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:632,usability,Error,Error,632,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:698,usability,Error,Error,698,"GL does not seem to work on lxplus. I get:. ```. -bash-4.2$ root transpar.C . ------------------------------------------------------------------. | Welcome to ROOT 6.24/08 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Sep 29 2022, 13:04:57 |. | From tags/v6-24-08@v6-24-08 |. | With c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] . Processing transpar.C... Fontconfig warning: ignoring UTF-8: not a valid region tag. Error in <TX11GLManager::CreateContext>: glXCreateContext failed. Error in <TRootCanvas::CreateCanvas>: GL context creation failed. Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. CanvasPreferGL is set to true, the red box is expected to be transparent. root [1] . ```. I will investigate",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:18,reliability,doe,does,18,"Hi Olivier,. > GL does not seem to work on lxplus. It works for me, both in ROOT 6.22/06 and 6.28/00 provided on `lxplus` by ATLAS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:150,availability,Error,Error,150,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:220,availability,operat,operation,220,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:114,deployability,fail,fails,114,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:159,deployability,fail,failed,159,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:248,deployability,fail,failed,248,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:291,deployability,fail,failed,291,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:340,deployability,fail,failed,340,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:378,deployability,fail,failed,378,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:398,energy efficiency,Current,Current,398,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:34,interoperability,specif,specifically,34,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:90,interoperability,standard,standard,90,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:460,interoperability,Standard,Standard,460,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:193,modifiability,paramet,parameter,193,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:150,performance,Error,Error,150,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:66,reliability,doe,does,66,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:114,reliability,fail,fails,114,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:159,reliability,fail,failed,159,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:248,reliability,fail,failed,248,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:291,reliability,fail,failed,291,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:340,reliability,fail,failed,340,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:378,reliability,fail,failed,378,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:150,safety,Error,Error,150,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:75,usability,help,help,75,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:150,usability,Error,Error,150,This is weird. I tried to connect specifically on `lxplus7`. That does not help. Even the standard app `glxgears` fails:. ```. -bash-4.2$ glxgears. X Error of failed request: BadValue (integer parameter out of range for operation). Major opcode of failed request: 149 (GLX). Minor opcode of failed request: 3 (X_GLXCreateContext). Value in failed request: 0x0. Serial number of failed request: 26. Current serial number in output stream: 27. -bash-4.2$ . ```. Standard X11 ROOT display works though,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:35,deployability,fail,fails,35,"> Even the standard app `glxgears` fails. Again, `glxgears` works fine for me on `lxplus7`, even before I set up my usual ATLAS environment. FWIW, one difference I could notice is that I use `zsh` while you are using `bash`... <img width=""774"" alt=""2023-06-20 10_12_33-lxplus7 cern ch - PuTTY"" src=""https://github.com/root-project/root/assets/7541582/fad72689-dd41-4ff0-978b-d6df2ca6d464"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:11,interoperability,standard,standard,11,"> Even the standard app `glxgears` fails. Again, `glxgears` works fine for me on `lxplus7`, even before I set up my usual ATLAS environment. FWIW, one difference I could notice is that I use `zsh` while you are using `bash`... <img width=""774"" alt=""2023-06-20 10_12_33-lxplus7 cern ch - PuTTY"" src=""https://github.com/root-project/root/assets/7541582/fad72689-dd41-4ff0-978b-d6df2ca6d464"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:35,reliability,fail,fails,35,"> Even the standard app `glxgears` fails. Again, `glxgears` works fine for me on `lxplus7`, even before I set up my usual ATLAS environment. FWIW, one difference I could notice is that I use `zsh` while you are using `bash`... <img width=""774"" alt=""2023-06-20 10_12_33-lxplus7 cern ch - PuTTY"" src=""https://github.com/root-project/root/assets/7541582/fad72689-dd41-4ff0-978b-d6df2ca6d464"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:37,availability,error,error,37,I tried wich `zsh` . I still get the error with `glxgears`...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:37,performance,error,error,37,I tried wich `zsh` . I still get the error with `glxgears`...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:37,safety,error,error,37,I tried wich `zsh` . I still get the error with `glxgears`...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:37,usability,error,error,37,I tried wich `zsh` . I still get the error with `glxgears`...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:75,deployability,version,version,75,"This has been fixed in the meanwhile, e.g. on lxplus for ROOT 6.32.06, the version currently installed there. ![image](https://github.com/user-attachments/assets/5fb80fa5-faae-4049-8024-e17ba1d263a5).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:93,deployability,instal,installed,93,"This has been fixed in the meanwhile, e.g. on lxplus for ROOT 6.32.06, the version currently installed there. ![image](https://github.com/user-attachments/assets/5fb80fa5-faae-4049-8024-e17ba1d263a5).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:83,energy efficiency,current,currently,83,"This has been fixed in the meanwhile, e.g. on lxplus for ROOT 6.32.06, the version currently installed there. ![image](https://github.com/user-attachments/assets/5fb80fa5-faae-4049-8024-e17ba1d263a5).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:75,integrability,version,version,75,"This has been fixed in the meanwhile, e.g. on lxplus for ROOT 6.32.06, the version currently installed there. ![image](https://github.com/user-attachments/assets/5fb80fa5-faae-4049-8024-e17ba1d263a5).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:75,modifiability,version,version,75,"This has been fixed in the meanwhile, e.g. on lxplus for ROOT 6.32.06, the version currently installed there. ![image](https://github.com/user-attachments/assets/5fb80fa5-faae-4049-8024-e17ba1d263a5).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13016:138,usability,user,user-attachments,138,"This has been fixed in the meanwhile, e.g. on lxplus for ROOT 6.32.06, the version currently installed there. ![image](https://github.com/user-attachments/assets/5fb80fa5-faae-4049-8024-e17ba1d263a5).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13016
https://github.com/root-project/root/issues/13018:72,integrability,sub,submitting,72,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:158,integrability,pub,public-files,158,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:28,performance,latenc,latency,28,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:105,performance,time,time,105,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:287,performance,time,time,287,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:40,testability,simpl,simple,40,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:83,testability,simpl,simple,83,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:28,usability,latenc,latency,28,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:40,usability,simpl,simple,40,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:83,usability,simpl,simple,83,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:. ```. time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -. ```. Gives me: `1.423 sec` total time. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:113,integrability,event,events,113,"Unless we make something like `5*60 / 1.423 = 211` requests, one after the other, in order to retrieve those 60k events this doesn't add up. EDIT:. I'm assuming that the latency is ~constant w.r.t. the size of the request, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:170,performance,latenc,latency,170,"Unless we make something like `5*60 / 1.423 = 211` requests, one after the other, in order to retrieve those 60k events this doesn't add up. EDIT:. I'm assuming that the latency is ~constant w.r.t. the size of the request, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:125,reliability,doe,doesn,125,"Unless we make something like `5*60 / 1.423 = 211` requests, one after the other, in order to retrieve those 60k events this doesn't add up. EDIT:. I'm assuming that the latency is ~constant w.r.t. the size of the request, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:170,usability,latenc,latency,170,"Unless we make something like `5*60 / 1.423 = 211` requests, one after the other, in order to retrieve those 60k events this doesn't add up. EDIT:. I'm assuming that the latency is ~constant w.r.t. the size of the request, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:497,availability,error,errors,497,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:354,energy efficiency,Draw,Draw,354,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:148,integrability,pub,public-files,148,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:415,integrability,sub,submits,415,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:338,performance,perform,perform,338,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:497,performance,error,errors,497,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:497,safety,error,errors,497,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:272,usability,clear,clearly,272,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:338,usability,perform,perform,338,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:497,usability,error,errors,497,"I have more strange effect. I do not compile davix and therefore after opening the file with:. `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` . I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:233,availability,slo,slow,233,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2082,availability,Down,Download-Options,2082,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:173,deployability,fail,fail,173,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1391,integrability,pub,public-files,1391,"e.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2840,interoperability,specif,specified,2840,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2883,modifiability,deco,decode,2883,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:257,performance,latenc,latency,257,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:496,performance,Content,Content,496,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:700,performance,Content,Content-Length,700,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:721,performance,Cach,Cache-Control,721,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:790,performance,Content,Content-Security-Policy,790,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:985,performance,content,content-range,985,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:999,performance,content,content-length,999,"start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-S",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1014,performance,content,content-type,1014,"nding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1082,performance,Content,Content-Type,1082,"se header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Downlo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1165,performance,Content,Content-range,1165," fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1229,performance,Content,Content-range,1229,"w method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --194",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1537,performance,Content,Content,1537," Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1578,performance,Content,Content-Disposition,1578,"s: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba244112099810938",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1648,performance,Content,Content-Length,1648,"""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1669,performance,Content,Content-Range,1669,". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Ty",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1686,performance,Content,Content-Security-Policy,1686,". Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/somethin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1732,performance,Content,Content-Type,1732,"x-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have bou",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2049,performance,Content,Content-Type-Options,2049,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2295,performance,Content,Content-Range,2295,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2330,performance,Content,Content-Type,2330,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2446,performance,Content,Content-Range,2446,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2486,performance,Content,Content-Type,2486,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2643,performance,content,content,2643,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2666,performance,Content,Content-Type,2666,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2957,performance,latenc,latency,2957,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:173,reliability,fail,fail,173,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:233,reliability,slo,slow,233,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:608,security,Modif,Modified,608,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:727,security,Control,Control,727,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:750,security,Expir,Expires,750,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:798,security,Secur,Security-Policy,798,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:857,security,Secur,Security,857,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:885,security,Access,Access-Control-Allow-Origin,885,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:917,security,Access,Access-Control-Allow-Headers,917,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:954,security,Access,Access-Control-Expose-Headers,954,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1042,security,Access,Access-Control-Allow-Methods,1042,"er. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1546,security,Access,Access-Control-Allow-Origin,1546,".41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1694,security,Secur,Security-Policy,1694,"ntent-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1851,security,Modif,Modified,1851,"t-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boun",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2005,security,Secur,Security,2005,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2162,security,Polic,Policies,2162,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2200,security,Xss,Xss-Protection,2200,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:12,testability,understand,understanding,12,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:727,testability,Control,Control,727,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:892,testability,Control,Control-Allow-Origin,892,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:924,testability,Control,Control-Allow-Headers,924,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:961,testability,Control,Control-Expose-Headers,961,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1049,testability,Control,Control-Allow-Methods,1049,"It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Typ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:1553,testability,Control,Control-Allow-Origin,1553," (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:257,usability,latenc,latency,257,"Now I start understanding problem with cernbox http server. It returns wrong http response header on multi-range request. Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - . which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:. ```. curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 . HTTP/1.1 206 Partial Content. Date: Thu, 15 Jun 2023 09:16:57 GMT. Server: Apache/2.4.41 (Ubuntu). X-Frame-Options: SAMEORIGIN. Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT. ETag: ""6521f-4e0ab42683e40"". Accept-Ranges: bytes. Content-Length: 177. Cache-Control: max-age=1800. Expires: Thu, 15 Jun 2023 09:46:57 GMT. Content-Security-Policy: frame-ancestors 'self';. Strict-Transport-Security: max-age=15768000. Access-Control-Allow-Origin: *. Access-Control-Allow-Headers: range. Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2832,usability,clear,clearly,2832,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:2957,usability,latenc,latency,2957,"ength,content-type,accept-ranges. Access-Control-Allow-Methods: HEAD,GET. Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7. Content-range: bytes 0-15/414239. root�mdR. --61c842e35204a0c7. Content-range: bytes 1000-1015/414239. 1ZGqP��. --61c842e35204a0c7--. ```. And here is result from cernbox:. ```. curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 . HTTP/1.1 206 Partial Content. Access-Control-Allow-Origin: *. Content-Disposition: attachment; filename=""test_ntuples_200123.root"". Content-Length: 389. Content-Range: . Content-Security-Policy: default-src 'none';. Content-Type: application/octet-stream. Date: Thu, 15 Jun 2023 09:15:48 GMT. Etag: ""329762575417868288:9d274a18"". Last-Modified: Wed, 24 May 2023 12:22:19 +0000. Oc-Etag: ""329762575417868288:9d274a18"". Oc-Fileid: eoshome-t!103034857. Server: nginx/1.20.1. Strict-Transport-Security: max-age=63072000. Vary: Origin. X-Content-Type-Options: nosniff. X-Download-Options: noopen. X-Frame-Options: SAMEORIGIN. X-Permitted-Cross-Domain-Policies: none. X-Robots-Tag: none. X-Xss-Protection: 1; mode=block. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 0-15/4667337. Content-Type: application/octet-stream. root��dG7�. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb. Content-Range: bytes 1000-1015/4667337. Content-Type: application/octet-stream. .�J.�f6��M�����m. --1941f188e1f15cbc8af2c2ce8ba24411209981093834f193e96822568cbb--. ```. That is wrong? First of all content type must be: ""Content-Type: multipart/something"". In the same line one should have boundary like ""boundary=61c842e35204a0c7"". Such line is not present in cernbox response. Without clearly specified ""boundary"" it is not possible to decode data afterwards. My conclusion - malformed http response and large latency make impossible to use cernbox http server.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:0,reliability,Doe,Does,0,Does the problem still exist? If so did we open an issue with the EOS and/or server support team?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:92,security,team,team,92,Does the problem still exist? If so did we open an issue with the EOS and/or server support team?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:84,usability,support,support,84,Does the problem still exist? If so did we open an issue with the EOS and/or server support team?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13018:60,usability,command,command,60,"Yes, problem with EOS is still there - just check my `curl` command to see it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13018
https://github.com/root-project/root/issues/13019:108,deployability,stack,stacks,108,"Apologies for coming back to this so late. I am closing since it's fixed in 6.30, currently used int LHCb's stacks, and 6.32, which relies on llvm16. Please feel free to re-open if this problem is hitting again the experiments.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13019
https://github.com/root-project/root/issues/13019:82,energy efficiency,current,currently,82,"Apologies for coming back to this so late. I am closing since it's fixed in 6.30, currently used int LHCb's stacks, and 6.32, which relies on llvm16. Please feel free to re-open if this problem is hitting again the experiments.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13019
https://github.com/root-project/root/pull/13029:15,deployability,updat,updated,15,Thanks! I have updated the link to the right PR in the description.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13029
https://github.com/root-project/root/pull/13029:15,safety,updat,updated,15,Thanks! I have updated the link to the right PR in the description.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13029
https://github.com/root-project/root/pull/13029:15,security,updat,updated,15,Thanks! I have updated the link to the right PR in the description.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13029
https://github.com/root-project/root/pull/13031:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13031
https://github.com/root-project/root/pull/13031:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13031
https://github.com/root-project/root/pull/13031:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13031
https://github.com/root-project/root/issues/13032:115,energy efficiency,core,core,115,This is because they did that . https://github.com/root-project/root/blob/05c2b9ef3ff35b9023eb7b9e20db412f5f8dd89b/core/foundation/inc/ROOT/span.hxx#L153. IE inject in the std namespace they own span implementation which is just asking for trouble,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13032
https://github.com/root-project/root/issues/13032:158,integrability,inject,inject,158,This is because they did that . https://github.com/root-project/root/blob/05c2b9ef3ff35b9023eb7b9e20db412f5f8dd89b/core/foundation/inc/ROOT/span.hxx#L153. IE inject in the std namespace they own span implementation which is just asking for trouble,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13032
https://github.com/root-project/root/issues/13032:158,security,inject,inject,158,This is because they did that . https://github.com/root-project/root/blob/05c2b9ef3ff35b9023eb7b9e20db412f5f8dd89b/core/foundation/inc/ROOT/span.hxx#L153. IE inject in the std namespace they own span implementation which is just asking for trouble,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13032
https://github.com/root-project/root/issues/13032:165,deployability,modul,modules,165,"@RoyBellingan I cannot follow yet, this header should only be found as `ROOT/span.hxx`, not as `span`? I think I agree with @pikacic implicit verdict that this is a modules design issue...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13032
https://github.com/root-project/root/issues/13032:165,modifiability,modul,modules,165,"@RoyBellingan I cannot follow yet, this header should only be found as `ROOT/span.hxx`, not as `span`? I think I agree with @pikacic implicit verdict that this is a modules design issue...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13032
https://github.com/root-project/root/issues/13032:165,safety,modul,modules,165,"@RoyBellingan I cannot follow yet, this header should only be found as `ROOT/span.hxx`, not as `span`? I think I agree with @pikacic implicit verdict that this is a modules design issue...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13032
https://github.com/root-project/root/pull/13033:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13033
https://github.com/root-project/root/issues/13039:472,deployability,instal,install,472,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:597,deployability,build,build,597,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:617,deployability,build,build,617,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:654,deployability,Releas,Release,654,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:741,deployability,instal,install,741,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:768,deployability,instal,install,768,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:874,deployability,build,build,874,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:894,deployability,build,build,894,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1012,deployability,instal,install,1012,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1096,deployability,contain,contains,1096,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1447,deployability,version,version,1447,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1039,integrability,configur,configure,1039,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1447,integrability,version,version,1447,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1039,modifiability,configur,configure,1039,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1447,modifiability,version,version,1447,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:210,performance,memor,memory,210,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:49,reliability,doe,does,49,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1039,security,configur,configure,1039,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:5,usability,behavi,behaviour,5,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:66,usability,navigat,navigation,66,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:210,usability,memor,memory,210,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:447,usability,support,support,447,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:498,usability,support,support,498,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1309,usability,Close,CloseGeometry,1309,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1474,usability,support,support,1474,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13039:1639,usability,navigat,navigation,1639,"This behaviour is expected since TGeoTessellated does NOT provide navigation functionality on its own, if this is called it just behaves as its bounding box. There is the possibility to convert the geometry in memory to VecGeom as described in this [post](https://root-forum.cern.ch/t/tessellated-volume-behave-like-box-after-transporting-with-geant-3-and-4-after-converting-cad-to-root-geometry/57083) , this requires compiling ROOT with VecGeom support. Summarizing:. - install VecCore with SIMD support:. ```. DIR=`pwd` && git clone https://github.com/root-project/veccore.git && mkdir veccore/build && cd veccore/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_VC=ON -DCUDA=ON -DCMAKE_INSTALL_PREFIX=$DIR/veccore_install && make -j install && cd $DIR. ```. - install VecGeom:. ```. DIR=`pwd` && git clone https://gitlab.cern.ch/VecGeom/VecGeom.git && mkdir VecGeom/build && cd VecGeom/build && cmake .. -DVECGEOM_BACKEND=vc -DVECGEOM_VECTOR=native -DCMAKE_INSTALL_PREFIX=$DIR/VecGeom_install && make -j install && cd $DIR. ```. - configure ROOT to use VecGeom (use the ROOT master which contains some converter and persistency fixes related to this):. ```. cmake $ROOT_SOURCE -Dvecgeom=ON -DVecGeom_DIR=<use_above_install_directory>/VecGeom_install. ```. - Add the following code AFTER `gGeoManager->CloseGeometry()`:. ```. auto converter = TVirtualGeoConverter::Instance(gGeoManager);. if (!converter) {. printf(""It looks like your ROOT version is missing VecGeom support\n"");. } else {. converter->ConvertGeometry();. }. ```. - at this point all ROOT shapes will be converted to VecGeom ones, including the tessellated, and the navigation will be dispatched to those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13039
https://github.com/root-project/root/issues/13041:1177,availability,ERROR,ERROR,1177,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1241,availability,ERROR,ERROR,1241,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:13,deployability,build,build,13,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:50,deployability,instal,install,50,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:72,deployability,Instal,Installing,72,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:438,deployability,version,version,438,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:438,integrability,version,version,438,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:438,modifiability,version,version,438,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1204,modifiability,PARAMET,PARAMETER,1204,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:705,performance,multi-thread,multi-threading,705,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1177,performance,ERROR,ERROR,1177,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1241,performance,ERROR,ERROR,1241,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1177,safety,ERROR,ERROR,1177,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1241,safety,ERROR,ERROR,1241,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:293,security,Team,Team,293,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:486,usability,help,help,486,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1111,usability,STATU,STATUS,1111,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1177,usability,ERROR,ERROR,1177,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1241,usability,ERROR,ERROR,1241,"The Homebrew build is also affected:. ```. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz. ... $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [4] gaus->SetParameters(1,0,1);. root [5] h1->FillRandom(""gaus1d"",10000);. root [6] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:73,deployability,build,build,73,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:96,deployability,instal,installation,96,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:184,deployability,Build,BuildVersion,184,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:220,deployability,version,version,220,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:241,deployability,Build,Build,241,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:247,deployability,version,version,247,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:565,deployability,version,version,565,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:705,deployability,instal,install,705,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:727,deployability,Instal,Installing,727,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1180,deployability,version,version,1180,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1367,deployability,build,builds,1367,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1407,energy efficiency,CPU,CPUs,1407,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:220,integrability,version,version,220,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:247,integrability,version,version,247,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:565,integrability,version,version,565,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1180,integrability,version,version,1180,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:220,modifiability,version,version,220,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:247,modifiability,version,version,247,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:565,modifiability,version,version,565,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1180,modifiability,version,version,1180,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1407,performance,CPU,CPUs,1407,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:47,safety,test,tested,47,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1379,safety,test,tested,1379,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:411,security,Team,Team,411,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1035,security,Team,Team,1035,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:47,testability,test,tested,47,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:1379,testability,test,tested,1379,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:66,usability,custom,custom,66,"Also affected: macOS Monterey with Xcode 14.2, tested with both a custom build and the Homebrew installation of ROOT 6.26:. ```. $ sw_vers. ProductName:	macOS. ProductVersion:	12.6.5. BuildVersion:	21G531. $ xcodebuild -version. Xcode 14.2. Build version 14C18. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jan 18 2023, 22:03:00 |. | From heads/v6-26-10-halla@ae05868143 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. root [8] .q. $ brew install root. ... ==> Installing root. ==> Pouring root--6.26.06_2.monterey.bottle.tar.gz. ... ==> Summary. 🍺 /usr/local/Cellar/root/6.26.06_2: 6,418 files, 555.7MB. $ /usr/local/bin/root. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With Apple clang version 14.0.0 (clang-1400.0.29.202) |. ... (see above) ... root [7] cout << TVirtualFitter::GetFitter() << endl;. 0x0. ```. macOS Big Sur (11.x) and earlier are OK. So are all our Linux builds. All tested systems run on Intel CPUs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:240,availability,avail,available,240,"Thank you for the report. . With current muster it is not sufficient to call `ROOT::DisableImplicitMT();`, you would need to do : `gGlobalMutex=nullptr`. . I have now applied a new fix (see linked PR) where the TVirtualFitter should now be available also in MT mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:33,energy efficiency,current,current,33,"Thank you for the report. . With current muster it is not sufficient to call `ROOT::DisableImplicitMT();`, you would need to do : `gGlobalMutex=nullptr`. . I have now applied a new fix (see linked PR) where the TVirtualFitter should now be available also in MT mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:240,reliability,availab,available,240,"Thank you for the report. . With current muster it is not sufficient to call `ROOT::DisableImplicitMT();`, you would need to do : `gGlobalMutex=nullptr`. . I have now applied a new fix (see linked PR) where the TVirtualFitter should now be available also in MT mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:240,safety,avail,available,240,"Thank you for the report. . With current muster it is not sufficient to call `ROOT::DisableImplicitMT();`, you would need to do : `gGlobalMutex=nullptr`. . I have now applied a new fix (see linked PR) where the TVirtualFitter should now be available also in MT mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:240,security,availab,available,240,"Thank you for the report. . With current muster it is not sufficient to call `ROOT::DisableImplicitMT();`, you would need to do : `gGlobalMutex=nullptr`. . I have now applied a new fix (see linked PR) where the TVirtualFitter should now be available also in MT mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:777,availability,ERROR,ERROR,777,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:841,availability,ERROR,ERROR,841,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:804,modifiability,PARAMET,PARAMETER,804,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:305,performance,multi-thread,multi-threading,305,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:777,performance,ERROR,ERROR,777,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:841,performance,ERROR,ERROR,841,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:777,safety,ERROR,ERROR,777,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:841,safety,ERROR,ERROR,841,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:6,usability,confirm,confirm,6,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:711,usability,STATU,STATUS,711,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:777,usability,ERROR,ERROR,777,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:841,usability,ERROR,ERROR,841,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```. root [0] gGlobalMutex. (TVirtualMutex *) 0x6000007b4950. root [1] gGlobalMutex=nullptr. (TVirtualMutex *) nullptr. root [2] ROOT::DisableImplicitMT();. Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled. root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }. root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);. root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);. root [6] gaus->SetParameters(1,0,1);. root [7] h1->FillRandom(""gaus1d"",10000);. root [8] auto res = h1->Fit(gaus,""L0S"");. FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL. EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE. EXT PARAMETER STEP FIRST. NO. NAME VALUE ERROR SIZE DERIVATIVE. 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05. 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03. 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01. ERR DEF= 0.5. root [9] cout << TVirtualFitter::GetFitter() << endl;. 0x7fdc0f97b3f0. root [10]. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:174,usability,close,close,174,"Hi @lmoneta , thanks to your PR, it seems we have a good path forward - more than that, we are almost there! Do you think you can address the last comments, merge the PR and close this issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13041:0,usability,Close,Closed,0,Closed by https://github.com/root-project/root/pull/13048.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13041
https://github.com/root-project/root/issues/13042:260,availability,avail,available,260,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:306,availability,avail,available,306,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:153,deployability,build,build,153,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:343,deployability,build,build,343,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:383,deployability,build,build,383,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:1,energy efficiency,core,core,1,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:85,energy efficiency,core,core,85,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:212,integrability,bridg,bridge,212,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:212,interoperability,bridg,bridge,212,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:234,interoperability,standard,standard,234,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:284,interoperability,standard,standard,284,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:326,interoperability,standard,standard,326,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:366,interoperability,standard,standard,366,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:260,reliability,availab,available,260,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:306,reliability,availab,available,306,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:260,safety,avail,available,260,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:306,safety,avail,available,306,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:260,security,availab,available,260,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:306,security,availab,available,306,[core/foundation/inc/ROOT/span.hxx](https://github.com/root-project/root/blob/master/core/foundation/inc/ROOT/span.hxx) should never be used in the same build as the official span. It is literally meants to be a bridge from older C++ standard (where it is not available) to the newer standard (where it is available). . Which standard did you build ROOT with? Which standard did you build your code with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:51,security,control,control,51,"I am using C++23, changed now to 17. I do not have control on who is including what let me dig for you, I will put back 23 and debug more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:51,testability,control,control,51,"I am using C++23, changed now to 17. I do not have control on who is including what let me dig for you, I will put back 23 and debug more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:649,availability,error,error,649,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:902,availability,error,error,902,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:388,energy efficiency,core,core,388,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:441,energy efficiency,Core,CorePackage,441,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:649,performance,error,error,649,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:902,performance,error,error,902,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:649,safety,error,error,649,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:902,safety,error,error,902,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:649,usability,error,error,649,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:902,usability,error,error,902,"```. In file included from /usr/include/root/TCollection.h:33,. from /usr/include/root/TSeqCollection.h:25,. from /usr/include/root/TList.h:25,. from /usr/include/root/TQObject.h:40,. from /usr/include/root/TSysEvtHandler.h:25,. from /usr/include/root/TTimer.h:45,. from /usr/include/root/TSystem.h:36,. from /home/roy/geant/cresta/src/ROOTHeaders.hh:12,. from /home/roy/geant/cresta/src/core/Analysis.hh:4,. from /home/roy/geant/cresta/src/CorePackage.hh:5,. from /home/roy/geant/cresta/src/construction/cresta/CRESTAWorld.hh:22,. from /home/roy/geant/cresta/src/construction/WorldConstruction.cc:21:. /usr/include/root/ROOT/RRangeCast.hxx:186:33: error: template argument 3 is invalid. 186 | RRangeCast<T, false, std::span<U>> RangeStaticCast(U (&arr)[N]). | ^~. /usr/include/root/ROOT/RRangeCast.hxx: In function ‘int ROOT::RangeStaticCast(U (&)[N])’:. /usr/include/root/ROOT/RRangeCast.hxx:188:16: error: reference to ‘span’ is ambiguous. 188 | return std::span<U>(arr, arr + N);. ```. I will check if I can remove some of the header getting included",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:173,energy efficiency,core,core,173,"I think a quick fix could be to just ifdef the whole file, in my case the inclusion is in https://github.com/root-project/root/blob/05c2b9ef3ff35b9023eb7b9e20db412f5f8dd89b/core/cont/inc/TCollection.h#L33",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:401,availability,error,error,401,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:378,deployability,version,version,378,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:378,integrability,version,version,378,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:355,interoperability,mismatch,mismatched,355,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:378,modifiability,version,version,378,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:401,performance,error,error,401,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:102,safety,avoid,avoid,102,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:401,safety,error,error,401,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:156,usability,clear,clear,156,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:219,usability,behavi,behaviour,219,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:401,usability,error,error,401,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a . ```. #if __cplusplus >= 202002L. ```. inside those code block if they are enabled due to this mismatched compilation version and report the error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:128,deployability,build,build,128,"> I am using C++23,. We do not yet support C++23 as we are still using llvm 15 for the interpreter. But even in C++23, the ROOT build should have configured itself to NOT actually use `ROOT/span.hxx` (i.e. see the beginning of the file):. ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. #if !defined(__cpp_lib_span). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:146,integrability,configur,configured,146,"> I am using C++23,. We do not yet support C++23 as we are still using llvm 15 for the interpreter. But even in C++23, the ROOT build should have configured itself to NOT actually use `ROOT/span.hxx` (i.e. see the beginning of the file):. ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. #if !defined(__cpp_lib_span). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:146,modifiability,configur,configured,146,"> I am using C++23,. We do not yet support C++23 as we are still using llvm 15 for the interpreter. But even in C++23, the ROOT build should have configured itself to NOT actually use `ROOT/span.hxx` (i.e. see the beginning of the file):. ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. #if !defined(__cpp_lib_span). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:146,security,configur,configured,146,"> I am using C++23,. We do not yet support C++23 as we are still using llvm 15 for the interpreter. But even in C++23, the ROOT build should have configured itself to NOT actually use `ROOT/span.hxx` (i.e. see the beginning of the file):. ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. #if !defined(__cpp_lib_span). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:35,usability,support,support,35,"> I am using C++23,. We do not yet support C++23 as we are still using llvm 15 for the interpreter. But even in C++23, the ROOT build should have configured itself to NOT actually use `ROOT/span.hxx` (i.e. see the beginning of the file):. ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. #if !defined(__cpp_lib_span). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:193,deployability,fail,failing,193,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:320,deployability,fail,failing,320,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:416,deployability,contain,containing,416,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:110,performance,content,content,110,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:81,reliability,doe,does,81,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:193,reliability,fail,failing,193,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:320,reliability,fail,failing,320,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:351,safety,test,tested,351,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:381,safety,test,testable,381,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:506,safety,test,test,506,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:213,testability,understand,understand,213,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:351,testability,test,tested,351,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:381,testability,test,testable,381,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:397,testability,simpl,simple,397,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:506,testability,test,test,506,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:283,usability,behavi,behavior,283,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:397,usability,simpl,simple,397,"> I see https://github.com/root-project/root/pull/11311. This was not merged and does not reflect that actual content of the file. Somehow in your environment the code snippet I copy/pasted is failing. We need to understand if:. * If the code snippet works in (your) C++20 (expected behavior). * Why is the code snippet failing in (your) C++23 (never tested by us). This should be testable with a simple source file containing just:. ```. #include <span>. #include ""ROOT/RRangeCast.hxx"". ```. (and another test with just the second one).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:351,deployability,version,version,351,"@pcanal thank you for the support! I will now check why this block . ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. ```. Is not working. . | With c++ (SUSE Linux) 12.2.1 20230124 [revision 193f7e62815b4089dfaed4c2bd34fd4f10209e27] |. Because I do not have master, I will check if my distro as a current version of root. Sorry but seeing the std namespace violation ""tunnel visioned me"" -.-. No opensuse tumbleweed has root until 6.26, I will patch in local, thank you for the support, and sorry for the bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:490,deployability,patch,patch,490,"@pcanal thank you for the support! I will now check why this block . ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. ```. Is not working. . | With c++ (SUSE Linux) 12.2.1 20230124 [revision 193f7e62815b4089dfaed4c2bd34fd4f10209e27] |. Because I do not have master, I will check if my distro as a current version of root. Sorry but seeing the std namespace violation ""tunnel visioned me"" -.-. No opensuse tumbleweed has root until 6.26, I will patch in local, thank you for the support, and sorry for the bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:343,energy efficiency,current,current,343,"@pcanal thank you for the support! I will now check why this block . ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. ```. Is not working. . | With c++ (SUSE Linux) 12.2.1 20230124 [revision 193f7e62815b4089dfaed4c2bd34fd4f10209e27] |. Because I do not have master, I will check if my distro as a current version of root. Sorry but seeing the std namespace violation ""tunnel visioned me"" -.-. No opensuse tumbleweed has root until 6.26, I will patch in local, thank you for the support, and sorry for the bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:351,integrability,version,version,351,"@pcanal thank you for the support! I will now check why this block . ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. ```. Is not working. . | With c++ (SUSE Linux) 12.2.1 20230124 [revision 193f7e62815b4089dfaed4c2bd34fd4f10209e27] |. Because I do not have master, I will check if my distro as a current version of root. Sorry but seeing the std namespace violation ""tunnel visioned me"" -.-. No opensuse tumbleweed has root until 6.26, I will patch in local, thank you for the support, and sorry for the bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:351,modifiability,version,version,351,"@pcanal thank you for the support! I will now check why this block . ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. ```. Is not working. . | With c++ (SUSE Linux) 12.2.1 20230124 [revision 193f7e62815b4089dfaed4c2bd34fd4f10209e27] |. Because I do not have master, I will check if my distro as a current version of root. Sorry but seeing the std namespace violation ""tunnel visioned me"" -.-. No opensuse tumbleweed has root until 6.26, I will patch in local, thank you for the support, and sorry for the bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:490,safety,patch,patch,490,"@pcanal thank you for the support! I will now check why this block . ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. ```. Is not working. . | With c++ (SUSE Linux) 12.2.1 20230124 [revision 193f7e62815b4089dfaed4c2bd34fd4f10209e27] |. Because I do not have master, I will check if my distro as a current version of root. Sorry but seeing the std namespace violation ""tunnel visioned me"" -.-. No opensuse tumbleweed has root until 6.26, I will patch in local, thank you for the support, and sorry for the bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:490,security,patch,patch,490,"@pcanal thank you for the support! I will now check why this block . ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. ```. Is not working. . | With c++ (SUSE Linux) 12.2.1 20230124 [revision 193f7e62815b4089dfaed4c2bd34fd4f10209e27] |. Because I do not have master, I will check if my distro as a current version of root. Sorry but seeing the std namespace violation ""tunnel visioned me"" -.-. No opensuse tumbleweed has root until 6.26, I will patch in local, thank you for the support, and sorry for the bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:26,usability,support,support,26,"@pcanal thank you for the support! I will now check why this block . ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. ```. Is not working. . | With c++ (SUSE Linux) 12.2.1 20230124 [revision 193f7e62815b4089dfaed4c2bd34fd4f10209e27] |. Because I do not have master, I will check if my distro as a current version of root. Sorry but seeing the std namespace violation ""tunnel visioned me"" -.-. No opensuse tumbleweed has root until 6.26, I will patch in local, thank you for the support, and sorry for the bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/issues/13042:524,usability,support,support,524,"@pcanal thank you for the support! I will now check why this block . ```. #if __cplusplus >= 202002. # if __has_include(<span>). # include <span>. # endif. #endif. ```. Is not working. . | With c++ (SUSE Linux) 12.2.1 20230124 [revision 193f7e62815b4089dfaed4c2bd34fd4f10209e27] |. Because I do not have master, I will check if my distro as a current version of root. Sorry but seeing the std namespace violation ""tunnel visioned me"" -.-. No opensuse tumbleweed has root until 6.26, I will patch in local, thank you for the support, and sorry for the bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13042
https://github.com/root-project/root/pull/13044:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13044
https://github.com/root-project/root/pull/13046:11,deployability,build,build,11,"@phsft-bot build just on mac11/cxx17, mac11arm/cxx17, mac12/cxx17, mac12arm/cxx17, mac13/cxx17, mac13arm/cxx17 with flags -DCTEST_TEST_EXCLUDE_NONE=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13046
https://github.com/root-project/root/pull/13048:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13048
https://github.com/root-project/root/pull/13049:188,reliability,doe,doesn,188,"Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:9,safety,review,review,9,"Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:326,security,sign,signalling,326,"Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:9,testability,review,review,9,"Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:304,availability,down,down,304,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:838,deployability,modul,modules,838,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:914,deployability,build,build,914,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:848,energy efficiency,core,core,848,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:475,integrability,sub,submodule,475,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:287,interoperability,conflict,conflict,287,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:715,modifiability,requires chang,requires changing,715,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:838,modifiability,modul,modules,838,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:190,reliability,doe,doesn,190,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:11,safety,review,review,11,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:279,safety,avoid,avoid,279,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:838,safety,modul,modules,838,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:625,security,sign,signalling,625,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:11,testability,review,review,11,"> Before I review and out of curiosity, did you consider `interpreter/llvm`, `interpreter/clang`, `interpreter/cling`, `interpreter/cmake`, etc? Is that worse because the top-most directory doesn't correspond to upstream anymore? Yes, and two consequences thereof: (a) I want to avoid a conflict further down the line if LLVM ever puts a `CMakeLists.txt` in their top-level directory, and (b) we had the proposal at some point to replace our copy in `interpreter/llvm/` by a submodule, which requires a directory on its own. > If so, would `interpreter/llvm-project/llvm` be better than `interpreter/llvm/llvm`, because it's signalling that this is from upstream? Yes, I'm open to that - I thought about it, but it requires changing a few more paths to `interpreter/llvm/ROOT/` and I was lazy. Btw do we still need those headers with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:76,deployability,modul,modules,76,> Btw do we still need those headers (in `interpreter/llvm/ROOT/`) with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system... ie what breaks with https://github.com/root-project/root/pull/13054 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:152,deployability,build,build,152,> Btw do we still need those headers (in `interpreter/llvm/ROOT/`) with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system... ie what breaks with https://github.com/root-project/root/pull/13054 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:86,energy efficiency,core,core,86,> Btw do we still need those headers (in `interpreter/llvm/ROOT/`) with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system... ie what breaks with https://github.com/root-project/root/pull/13054 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:76,modifiability,modul,modules,76,> Btw do we still need those headers (in `interpreter/llvm/ROOT/`) with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system... ie what breaks with https://github.com/root-project/root/pull/13054 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:76,safety,modul,modules,76,> Btw do we still need those headers (in `interpreter/llvm/ROOT/`) with C++ modules? `core/clingutils/CMakeLists.txt` even copies some headers from the build system... ie what breaks with https://github.com/root-project/root/pull/13054 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:5,modifiability,requires chang,requires changing,5,"> it requires changing a few more paths. Never mind then, I don't have a strong enough opinion on this to trigger extra work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:99,performance,time,time,99,"I'm willing to spend that extra work if it's the better layout - it's likely to survive quite some time, so I think it's better not to compromise right now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:11,deployability,build,build,11,"@phsft-bot build just on ROOT-debian10-i386/soversion, windows10/cxx14",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13049:94,deployability,build,builds,94,"Now everything seems clean, and I will proceed to merge this during the weekend - incremental builds across this change won't work very nicely, I will post a note on Mattermost after it's in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13049
https://github.com/root-project/root/pull/13050:6,availability,failur,failure,6,"build failure on `mac12arm/cxx20` is unrelated, but cc @Axel-Naumann @guitargeek - there's probably a backport missing for C++20 in RooFit...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13050
https://github.com/root-project/root/pull/13050:0,deployability,build,build,0,"build failure on `mac12arm/cxx20` is unrelated, but cc @Axel-Naumann @guitargeek - there's probably a backport missing for C++20 in RooFit...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13050
https://github.com/root-project/root/pull/13050:6,deployability,fail,failure,6,"build failure on `mac12arm/cxx20` is unrelated, but cc @Axel-Naumann @guitargeek - there's probably a backport missing for C++20 in RooFit...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13050
https://github.com/root-project/root/pull/13050:6,performance,failur,failure,6,"build failure on `mac12arm/cxx20` is unrelated, but cc @Axel-Naumann @guitargeek - there's probably a backport missing for C++20 in RooFit...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13050
https://github.com/root-project/root/pull/13050:6,reliability,fail,failure,6,"build failure on `mac12arm/cxx20` is unrelated, but cc @Axel-Naumann @guitargeek - there's probably a backport missing for C++20 in RooFit...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13050
https://github.com/root-project/root/pull/13051:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13051
https://github.com/root-project/root/pull/13052:69,safety,test,testHistFactory,69,"Hello @guitargeek, as reported by Jenkins this seems to have broken `testHistFactory` on Windows. Could you please take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13052
https://github.com/root-project/root/pull/13052:69,testability,test,testHistFactory,69,"Hello @guitargeek, as reported by Jenkins this seems to have broken `testHistFactory` on Windows. Could you please take a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13052
https://github.com/root-project/root/pull/13054:29,deployability,modul,modules,29,"Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:29,modifiability,modul,modules,29,"Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:17,reliability,doe,doesn,17,"Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:38,reliability,doe,does,38,"Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:29,safety,modul,modules,29,"Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:31,deployability,modul,modules,31,"> Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though. Unless I'm missing something obvious here, this isn't used for Cling standalone at all - `core/clingutils/CMakeLists.txt` is a ROOT thing, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:246,energy efficiency,core,core,246,"> Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though. Unless I'm missing something obvious here, this isn't used for Cling standalone at all - `core/clingutils/CMakeLists.txt` is a ROOT thing, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:31,modifiability,modul,modules,31,"> Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though. Unless I'm missing something obvious here, this isn't used for Cling standalone at all - `core/clingutils/CMakeLists.txt` is a ROOT thing, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:19,reliability,doe,doesn,19,"> Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though. Unless I'm missing something obvious here, this isn't used for Cling standalone at all - `core/clingutils/CMakeLists.txt` is a ROOT thing, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:40,reliability,doe,does,40,"> Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though. Unless I'm missing something obvious here, this isn't used for Cling standalone at all - `core/clingutils/CMakeLists.txt` is a ROOT thing, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:31,safety,modul,modules,31,"> Standalone cling doesn't use modules; does it work even without copying headers, in a relocatable way? We might be able to turn this off for ROOT though. Unless I'm missing something obvious here, this isn't used for Cling standalone at all - `core/clingutils/CMakeLists.txt` is a ROOT thing, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:16,safety,test,test,16,"You should also test with `-Druntime_cxxmodules=Off`, please.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:16,testability,test,test,16,"You should also test with `-Druntime_cxxmodules=Off`, please.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:11,deployability,build,build,11,@phsft-bot build with flags -Druntime_cxxmodules=Off -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:66,availability,failur,failure,66,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:2,deployability,Build,Build,2,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:8,deployability,fail,failed,8,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:66,deployability,fail,failure,66,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:249,deployability,build,building,249,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:302,deployability,modul,modules,302,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:329,deployability,instal,installing,329,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:457,deployability,modul,modules,457,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:302,modifiability,modul,modules,302,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:457,modifiability,modul,modules,457,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:23,performance,perform,performance-,23,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:66,performance,failur,failure,66,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:8,reliability,fail,failed,8,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:66,reliability,fail,failure,66,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:302,safety,modul,modules,302,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:315,safety,compl,complain,315,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:457,safety,modul,modules,457,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:315,security,compl,complain,315,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/pull/13054:23,usability,perform,performance-,23,"> Build failed on ROOT-performance-centos8-multicore/cxx17. These failure are pre-existing, I opened https://github.com/root-project/root/issues/13058. I briefly discussed with Axel, and we decided to merge this for now. In the worst case, somebody building their own ROOT binaries without C++ runtime modules will complain when installing on a system with non-matching headers, in which case we'll investigate (hopefully all experiments enable C++ runtime modules by now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13054
https://github.com/root-project/root/issues/13055:22,deployability,build,build,22,So removing the sofie build breaks many dependencies. I'll check with @lmoneta how to fix that correctly once he's back.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:40,deployability,depend,dependencies,40,So removing the sofie build breaks many dependencies. I'll check with @lmoneta how to fix that correctly once he's back.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:40,integrability,depend,dependencies,40,So removing the sofie build breaks many dependencies. I'll check with @lmoneta how to fix that correctly once he's back.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:40,modifiability,depend,dependencies,40,So removing the sofie build breaks many dependencies. I'll check with @lmoneta how to fix that correctly once he's back.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:40,safety,depend,dependencies,40,So removing the sofie build breaks many dependencies. I'll check with @lmoneta how to fix that correctly once he's back.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:40,testability,depend,dependencies,40,So removing the sofie build breaks many dependencies. I'll check with @lmoneta how to fix that correctly once he's back.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:18,deployability,updat,update,18,Thank you for the update. Could you give an ETA for having this fixed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:18,safety,updat,update,18,Thank you for the update. Could you give an ETA for having this fixed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:18,security,updat,update,18,Thank you for the update. Could you give an ETA for having this fixed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:20,deployability,updat,update,20,> Thank you for the update. Could you give an ETA for having this fixed? I'll let @lmoneta comment on this issue which is apparently not a real issue...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:20,safety,updat,update,20,> Thank you for the update. Could you give an ETA for having this fixed? I'll let @lmoneta comment on this issue which is apparently not a real issue...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:20,security,updat,update,20,> Thank you for the update. Could you give an ETA for having this fixed? I'll let @lmoneta comment on this issue which is apparently not a real issue...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:60,deployability,depend,depends,60,"`-Dtmva-sofie=Off` switch off the sofie parser library that depends on protobuf. There is no reason to remove the sofie library, that is a small one, so this is enabled always by default. If you really want to switch off sofie, you can do this by doing `-Dtmva=Off`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:60,integrability,depend,depends,60,"`-Dtmva-sofie=Off` switch off the sofie parser library that depends on protobuf. There is no reason to remove the sofie library, that is a small one, so this is enabled always by default. If you really want to switch off sofie, you can do this by doing `-Dtmva=Off`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:60,modifiability,depend,depends,60,"`-Dtmva-sofie=Off` switch off the sofie parser library that depends on protobuf. There is no reason to remove the sofie library, that is a small one, so this is enabled always by default. If you really want to switch off sofie, you can do this by doing `-Dtmva=Off`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:60,safety,depend,depends,60,"`-Dtmva-sofie=Off` switch off the sofie parser library that depends on protobuf. There is no reason to remove the sofie library, that is a small one, so this is enabled always by default. If you really want to switch off sofie, you can do this by doing `-Dtmva=Off`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:60,testability,depend,depends,60,"`-Dtmva-sofie=Off` switch off the sofie parser library that depends on protobuf. There is no reason to remove the sofie library, that is a small one, so this is enabled always by default. If you really want to switch off sofie, you can do this by doing `-Dtmva=Off`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:64,energy efficiency,load,loading,64,"The ""small"" library seems to add 70MB of RSS per process due to loading a bunch of pcms (thanks to the fact everything sits in the Experimental namespace, AFAICT). We do want TMVA (which does not get loaded premptively, apparently).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:200,energy efficiency,load,loaded,200,"The ""small"" library seems to add 70MB of RSS per process due to loading a bunch of pcms (thanks to the fact everything sits in the Experimental namespace, AFAICT). We do want TMVA (which does not get loaded premptively, apparently).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:64,performance,load,loading,64,"The ""small"" library seems to add 70MB of RSS per process due to loading a bunch of pcms (thanks to the fact everything sits in the Experimental namespace, AFAICT). We do want TMVA (which does not get loaded premptively, apparently).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:200,performance,load,loaded,200,"The ""small"" library seems to add 70MB of RSS per process due to loading a bunch of pcms (thanks to the fact everything sits in the Experimental namespace, AFAICT). We do want TMVA (which does not get loaded premptively, apparently).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:187,reliability,doe,does,187,"The ""small"" library seems to add 70MB of RSS per process due to loading a bunch of pcms (thanks to the fact everything sits in the Experimental namespace, AFAICT). We do want TMVA (which does not get loaded premptively, apparently).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:18,energy efficiency,load,load,18,"You should anyway load SOFIE only when you use it. If this is not the case, then this is maybe the issue. But weird you add 70MB, I see only an increase of 2 MB, when loading the library",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:167,energy efficiency,load,loading,167,"You should anyway load SOFIE only when you use it. If this is not the case, then this is maybe the issue. But weird you add 70MB, I see only an increase of 2 MB, when loading the library",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:18,performance,load,load,18,"You should anyway load SOFIE only when you use it. If this is not the case, then this is maybe the issue. But weird you add 70MB, I see only an increase of 2 MB, when loading the library",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:167,performance,load,loading,167,"You should anyway load SOFIE only when you use it. If this is not the case, then this is maybe the issue. But weird you add 70MB, I see only an increase of 2 MB, when loading the library",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:175,energy efficiency,load,loaded,175,"If I have understood well, doing this (using an arbitrary ROOT file). ```. ROOTDEBUG=7 root.exe -l -b -q test.root 2>&1 | grep Preloading. ```. you see `libROOTTMVASofie` pre-loaded. I actually I do not see this with the master. I see other libs preloaded (e.g. libGraf)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:175,performance,load,loaded,175,"If I have understood well, doing this (using an arbitrary ROOT file). ```. ROOTDEBUG=7 root.exe -l -b -q test.root 2>&1 | grep Preloading. ```. you see `libROOTTMVASofie` pre-loaded. I actually I do not see this with the master. I see other libs preloaded (e.g. libGraf)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:105,safety,test,test,105,"If I have understood well, doing this (using an arbitrary ROOT file). ```. ROOTDEBUG=7 root.exe -l -b -q test.root 2>&1 | grep Preloading. ```. you see `libROOTTMVASofie` pre-loaded. I actually I do not see this with the master. I see other libs preloaded (e.g. libGraf)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:105,testability,test,test,105,"If I have understood well, doing this (using an arbitrary ROOT file). ```. ROOTDEBUG=7 root.exe -l -b -q test.root 2>&1 | grep Preloading. ```. you see `libROOTTMVASofie` pre-loaded. I actually I do not see this with the master. I see other libs preloaded (e.g. libGraf)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:58,integrability,pub,public,58,Could you also try:. ```. ROOTDEBUG=7 root.exe -l -b -q ~/public/AO2D.root 2>&1 | grep 'on demand' | cut -d' ' -f 2 | sort | uniq | wc -l. ```. ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:465,deployability,modul,module,465,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:45,energy efficiency,Load,Loading,45,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:91,energy efficiency,Load,Loading,91,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:145,energy efficiency,Load,Loading,145,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:324,energy efficiency,load,loaded,324,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:472,energy efficiency,load,loading,472,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:465,modifiability,modul,module,465,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:45,performance,Load,Loading,45,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:91,performance,Load,Loading,91,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:145,performance,Load,Loading,145,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:324,performance,load,loaded,324,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:379,performance,memor,memory,379,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:472,performance,load,loading,472,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:465,safety,modul,module,465,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:379,usability,memor,memory,379,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:402,usability,command,command,402,"With your file I have . ```. ............... Loading 'PyMVA' on demand for 'Experimental'. Loading 'ROOTTMVASofie' on demand for 'Experimental'. Loading 'ROOTTMVASofieParser' on demand for 'Experimental'. ```. Is it because `ROOT::Experimental` namespace objects are stored in the file? . I see also RooFit and TMVA are pre-loaded. These are much bigger libraries using a lot of memory. . We can add a command to switch off SOFIE, but I think the problem is in the module loading and should be fixed in https://github.com/root-project/root/issues/13000.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:358,deployability,modul,modularisation,358,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:402,deployability,instal,install,402,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:358,integrability,modular,modularisation,358,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:358,modifiability,modul,modularisation,358,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:21,performance,memor,memory,21,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:358,safety,modul,modularisation,358,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:119,testability,verif,verifying,119,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:358,testability,modula,modularisation,358,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:21,usability,memor,memory,21,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:80,usability,confirm,confirmed,80,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:471,usability,user,user,471,"I think the unwanted memory hoarding has been fixed so far (CMS, ATLAS and LHCb confirmed and we are in the process of verifying this for Alice, too https://github.com/root-project/root/issues/13000#issuecomment-1926377943). I still think that if SOFIE is disabled, nothing should be built relative to it - this is also a desirable feature given the kind of modularisation ahead of us required by `pip install ROOT`. @lmoneta @bellenot can SOFIE be fully disabled if the user sets `-Dsofie=OFF`, as one would expect?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:239,deployability,depend,dependency,239,"We can add another option to disable completely SOFIE, but it is itself a small library and we could consider in general as part of tmva. The Onyx parser instead needs to be switch is off for cases where we don't want to have the protobuf dependency",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:239,integrability,depend,dependency,239,"We can add another option to disable completely SOFIE, but it is itself a small library and we could consider in general as part of tmva. The Onyx parser instead needs to be switch is off for cases where we don't want to have the protobuf dependency",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:239,modifiability,depend,dependency,239,"We can add another option to disable completely SOFIE, but it is itself a small library and we could consider in general as part of tmva. The Onyx parser instead needs to be switch is off for cases where we don't want to have the protobuf dependency",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:37,safety,compl,completely,37,"We can add another option to disable completely SOFIE, but it is itself a small library and we could consider in general as part of tmva. The Onyx parser instead needs to be switch is off for cases where we don't want to have the protobuf dependency",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:239,safety,depend,dependency,239,"We can add another option to disable completely SOFIE, but it is itself a small library and we could consider in general as part of tmva. The Onyx parser instead needs to be switch is off for cases where we don't want to have the protobuf dependency",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:37,security,compl,completely,37,"We can add another option to disable completely SOFIE, but it is itself a small library and we could consider in general as part of tmva. The Onyx parser instead needs to be switch is off for cases where we don't want to have the protobuf dependency",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/issues/13055:239,testability,depend,dependency,239,"We can add another option to disable completely SOFIE, but it is itself a small library and we could consider in general as part of tmva. The Onyx parser instead needs to be switch is off for cases where we don't want to have the protobuf dependency",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13055
https://github.com/root-project/root/pull/13056:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13056
https://github.com/root-project/root/pull/13056:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13056
https://github.com/root-project/root/pull/13056:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13056
https://github.com/root-project/root/pull/13057:126,availability,error,error,126,I agree that the new setting should not be increasing the threads past `cgroup`. I think a malformed `ROOT_MAX_THREADS` is an error as setting this specific variable is very unlikely to have been done 'casually/just-because' and hence the program is mis-behaving (using too many threads) compared to the user's expectations.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13057
