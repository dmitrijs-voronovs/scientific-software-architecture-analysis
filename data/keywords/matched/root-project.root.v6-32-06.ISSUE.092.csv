id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/13494:148,deployability,updat,updated,148,"[cmake,ci] Add support for llvm coverage. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13494
https://github.com/root-project/root/pull/13494:118,safety,test,tested,118,"[cmake,ci] Add support for llvm coverage. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13494
https://github.com/root-project/root/pull/13494:148,safety,updat,updated,148,"[cmake,ci] Add support for llvm coverage. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13494
https://github.com/root-project/root/pull/13494:148,security,updat,updated,148,"[cmake,ci] Add support for llvm coverage. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13494
https://github.com/root-project/root/pull/13494:32,testability,coverag,coverage,32,"[cmake,ci] Add support for llvm coverage. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13494
https://github.com/root-project/root/pull/13494:118,testability,test,tested,118,"[cmake,ci] Add support for llvm coverage. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13494
https://github.com/root-project/root/pull/13494:15,usability,support,support,15,"[cmake,ci] Add support for llvm coverage. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13494
https://github.com/root-project/root/pull/13495:151,deployability,updat,updated,151,[ci] Disable codecov for PRs: takes 4 hours. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13495
https://github.com/root-project/root/pull/13495:121,safety,test,tested,121,[ci] Disable codecov for PRs: takes 4 hours. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13495
https://github.com/root-project/root/pull/13495:151,safety,updat,updated,151,[ci] Disable codecov for PRs: takes 4 hours. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13495
https://github.com/root-project/root/pull/13495:151,security,updat,updated,151,[ci] Disable codecov for PRs: takes 4 hours. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13495
https://github.com/root-project/root/pull/13495:121,testability,test,tested,121,[ci] Disable codecov for PRs: takes 4 hours. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13495
https://github.com/root-project/root/pull/13496:22,availability,replic,replication,22,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/pull/13496:34,deployability,log,log,34,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/pull/13496:145,deployability,updat,updated,145,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/pull/13496:34,safety,log,log,34,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/pull/13496:115,safety,test,tested,115,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/pull/13496:145,safety,updat,updated,145,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/pull/13496:34,security,log,log,34,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/pull/13496:145,security,updat,updated,145,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/pull/13496:34,testability,log,log,34,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/pull/13496:115,testability,test,tested,115,[ci] Fix untar dir in replication log. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13496
https://github.com/root-project/root/issues/13497:10,availability,failur,failure,10,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:63,availability,error,error,63,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:1209,availability,Operat,Operating,1209,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:10,deployability,fail,failure,10,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:697,deployability,contain,container,697,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:887,deployability,contain,container,887,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:934,deployability,stack,stackoverflow,934,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:1144,deployability,version,version,1144,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:1165,deployability,Instal,Installation,1165,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:1144,integrability,version,version,1144,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:49,interoperability,incompatib,incompatible,49,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:553,interoperability,incompatib,incompatible,553,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:1004,interoperability,incompatib,incompatible-c,1004,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:1144,modifiability,version,version,1144,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:10,performance,failur,failure,10,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:63,performance,error,error,63,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:489,performance,time,time,489,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:766,performance,time,time,766,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:10,reliability,fail,failure,10,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:600,reliability,doe,does,600,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:642,reliability,doe,does,642,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:63,safety,error,error,63,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:635,safety,safe,safety,635,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:1087,safety,test,tests,1087,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:0,testability,Assert,Assertion,0,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:977,testability,assert,assertion-vector-iterators-incompatible-c,977,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:1087,testability,test,tests,1087,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:1251,testability,context,context,1251,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:63,usability,error,error,63,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13497:651,usability,help,help,651,"Assertion failure in TMVA with `vector iterators incompatible` error on Windows; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/src/MethodLD.cxx`, line 177 and line 202, at `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c)). A possible fix is in the PR #13321. ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13497
https://github.com/root-project/root/issues/13498:10,availability,failur,failure,10,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:761,availability,Operat,Operating,761,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:10,deployability,fail,failure,10,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:373,deployability,contain,container,373,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:696,deployability,version,version,696,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:717,deployability,Instal,Installation,717,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:696,integrability,version,version,696,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:329,interoperability,standard,standard,329,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:696,modifiability,version,version,696,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:10,performance,failur,failure,10,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:10,reliability,fail,failure,10,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:639,safety,test,tests,639,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:532,security,access,access,532,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:0,testability,Assert,Assertion,0,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:639,testability,test,tests,639,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:803,testability,context,context,803,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/issues/13498:563,usability,behavi,behavior,563,"Assertion failure in TMVA `can't dereference value-initialized vector iterator`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In `tmva/tmva/inc/TMVA/RTensor.hxx`, line 217 and line 231. With and empty vector, `vector::begin() == vector::end()` and one cannot dereference end(), [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. A possible fix is in the PR #13322 . ### Reproducer. Run the TMVA tests in debug mode with /RTC1 flag on Windows. ### ROOT version. master. ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13498
https://github.com/root-project/root/pull/13499:1115,deployability,updat,updated,1115,"Correct documentation options for TDavixFile when using Amazon S3; # This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY"". ""S3_ACCKEY"" -> ""S3ACCKEY"". ""S3_TOKEN"" -> ""S3TOKEN"". etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c. const char* s3_seckey_opt = ""s3seckey="";. const char* s3_acckey_opt = ""s3acckey="";. const char* s3_region_opt = ""s3region="";. const char* s3_token_opt = ""s3token="";. const char* s3_alternate_opt = ""s3alternate="";. ```. For example, this works:. ```. const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" . + ""S3ACCKEY="" + aws_access_key_id + "" "". + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );. ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally. - [y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13499
https://github.com/root-project/root/pull/13499:1085,safety,test,tested,1085,"Correct documentation options for TDavixFile when using Amazon S3; # This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY"". ""S3_ACCKEY"" -> ""S3ACCKEY"". ""S3_TOKEN"" -> ""S3TOKEN"". etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c. const char* s3_seckey_opt = ""s3seckey="";. const char* s3_acckey_opt = ""s3acckey="";. const char* s3_region_opt = ""s3region="";. const char* s3_token_opt = ""s3token="";. const char* s3_alternate_opt = ""s3alternate="";. ```. For example, this works:. ```. const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" . + ""S3ACCKEY="" + aws_access_key_id + "" "". + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );. ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally. - [y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13499
https://github.com/root-project/root/pull/13499:1115,safety,updat,updated,1115,"Correct documentation options for TDavixFile when using Amazon S3; # This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY"". ""S3_ACCKEY"" -> ""S3ACCKEY"". ""S3_TOKEN"" -> ""S3TOKEN"". etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c. const char* s3_seckey_opt = ""s3seckey="";. const char* s3_acckey_opt = ""s3acckey="";. const char* s3_region_opt = ""s3region="";. const char* s3_token_opt = ""s3token="";. const char* s3_alternate_opt = ""s3alternate="";. ```. For example, this works:. ```. const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" . + ""S3ACCKEY="" + aws_access_key_id + "" "". + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );. ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally. - [y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13499
https://github.com/root-project/root/pull/13499:128,security,access,accessing,128,"Correct documentation options for TDavixFile when using Amazon S3; # This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY"". ""S3_ACCKEY"" -> ""S3ACCKEY"". ""S3_TOKEN"" -> ""S3TOKEN"". etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c. const char* s3_seckey_opt = ""s3seckey="";. const char* s3_acckey_opt = ""s3acckey="";. const char* s3_region_opt = ""s3region="";. const char* s3_token_opt = ""s3token="";. const char* s3_alternate_opt = ""s3alternate="";. ```. For example, this works:. ```. const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" . + ""S3ACCKEY="" + aws_access_key_id + "" "". + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );. ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally. - [y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13499
https://github.com/root-project/root/pull/13499:1115,security,updat,updated,1115,"Correct documentation options for TDavixFile when using Amazon S3; # This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY"". ""S3_ACCKEY"" -> ""S3ACCKEY"". ""S3_TOKEN"" -> ""S3TOKEN"". etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c. const char* s3_seckey_opt = ""s3seckey="";. const char* s3_acckey_opt = ""s3acckey="";. const char* s3_region_opt = ""s3region="";. const char* s3_token_opt = ""s3token="";. const char* s3_alternate_opt = ""s3alternate="";. ```. For example, this works:. ```. const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" . + ""S3ACCKEY="" + aws_access_key_id + "" "". + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );. ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally. - [y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13499
https://github.com/root-project/root/pull/13499:1085,testability,test,tested,1085,"Correct documentation options for TDavixFile when using Amazon S3; # This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY"". ""S3_ACCKEY"" -> ""S3ACCKEY"". ""S3_TOKEN"" -> ""S3TOKEN"". etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c. const char* s3_seckey_opt = ""s3seckey="";. const char* s3_acckey_opt = ""s3acckey="";. const char* s3_region_opt = ""s3region="";. const char* s3_token_opt = ""s3token="";. const char* s3_alternate_opt = ""s3alternate="";. ```. For example, this works:. ```. const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" . + ""S3ACCKEY="" + aws_access_key_id + "" "". + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );. ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally. - [y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13499
https://github.com/root-project/root/pull/13499:8,usability,document,documentation,8,"Correct documentation options for TDavixFile when using Amazon S3; # This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY"". ""S3_ACCKEY"" -> ""S3ACCKEY"". ""S3_TOKEN"" -> ""S3TOKEN"". etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c. const char* s3_seckey_opt = ""s3seckey="";. const char* s3_acckey_opt = ""s3acckey="";. const char* s3_region_opt = ""s3region="";. const char* s3_token_opt = ""s3token="";. const char* s3_alternate_opt = ""s3alternate="";. ```. For example, this works:. ```. const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" . + ""S3ACCKEY="" + aws_access_key_id + "" "". + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );. ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally. - [y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13499
https://github.com/root-project/root/pull/13499:109,usability,document,documentation,109,"Correct documentation options for TDavixFile when using Amazon S3; # This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY"". ""S3_ACCKEY"" -> ""S3ACCKEY"". ""S3_TOKEN"" -> ""S3TOKEN"". etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c. const char* s3_seckey_opt = ""s3seckey="";. const char* s3_acckey_opt = ""s3acckey="";. const char* s3_region_opt = ""s3region="";. const char* s3_token_opt = ""s3token="";. const char* s3_alternate_opt = ""s3alternate="";. ```. For example, this works:. ```. const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" . + ""S3ACCKEY="" + aws_access_key_id + "" "". + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );. ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally. - [y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13499
https://github.com/root-project/root/pull/13499:1049,usability,document,documentation,1049,"Correct documentation options for TDavixFile when using Amazon S3; # This Pull request:. Fixes to TDavixFile documentation when accessing files on Amazon S3. The options suggested do not work. Instead the options must be used without the underscore. e.g. . ""S3_SECKEY"" -> ""S3SECKEY"". ""S3_ACCKEY"" -> ""S3ACCKEY"". ""S3_TOKEN"" -> ""S3TOKEN"". etc. You can see the source code here: https://github.com/root-project/root/blob/4e8c577dfd6a19d7c38a74e3074b406a598bf76a/net/davix/src/TDavixFile.cxx#L69. where they are defined without the underscore. ```c. const char* s3_seckey_opt = ""s3seckey="";. const char* s3_acckey_opt = ""s3acckey="";. const char* s3_region_opt = ""s3region="";. const char* s3_token_opt = ""s3token="";. const char* s3_alternate_opt = ""s3alternate="";. ```. For example, this works:. ```. const std::string options(""S3SECKEY="" + aws_secret_access_key + "" "" . + ""S3ACCKEY="" + aws_access_key_id + "" "". + ""S3TOKEN="" + aws_session_token);. TFile::Open(input_filename.c_str(), (options + "" READ"").c_str()) );. ```. ## Changes or fixes:. TDavixFile documentation. ## Checklist:. - [y] tested changes locally. - [y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13499
https://github.com/root-project/root/pull/13500:345,availability,failur,failures,345,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:505,availability,Error,Error,505,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:687,availability,Error,Error,687,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:861,availability,error,error,861,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:345,deployability,fail,failures,345,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:547,deployability,build,build,547,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:723,deployability,build,build,723,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:759,deployability,INSTAL,INSTALL,759,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:944,deployability,FAIL,FAILED,944,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1076,deployability,Updat,Update,1076,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1148,deployability,Updat,Update,1148,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1083,energy efficiency,core,core,1083,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1155,energy efficiency,core,core,1155,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:345,performance,failur,failures,345,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:505,performance,Error,Error,505,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:687,performance,Error,Error,687,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:861,performance,error,error,861,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1133,performance,memor,memory,1133,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:345,reliability,fail,failures,345,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:603,reliability,doe,does,603,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:944,reliability,FAIL,FAILED,944,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:73,safety,safe,safe,73,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:146,safety,safe,safe,146,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:462,safety,test,test,462,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:505,safety,Error,Error,505,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:578,safety,test,test,578,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:687,safety,Error,Error,687,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:754,safety,test,test,754,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:830,safety,test,test,830,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:861,safety,error,error,861,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1076,safety,Updat,Update,1076,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1116,safety,Prevent,Prevent,1116,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1148,safety,Updat,Update,1148,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1076,security,Updat,Update,1076,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1116,security,Preven,Prevent,1116,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1148,security,Updat,Update,1148,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:462,testability,test,test,462,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:578,testability,test,test,578,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:754,testability,test,test,754,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:830,testability,test,test,830,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:505,usability,Error,Error,505,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:687,usability,Error,Error,687,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:861,usability,error,error,861,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1053,usability,help,helper,1053,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13500:1133,usability,memor,memory,1133,"[v6.28][backport][windows] Make `OpenDirectory` and `GetDirEntry` thread safe (#13472); * [windows] Make `OpenDirectory` and `GetDirEntry` thread safe. Create a struct holding the flag, `HANDLE`, and `WIN32_FIND_DATA` used by `OpenDirectory`, `GetDirEntry`, and `FreeDirectory`, so each thread creates its own instance of it. This fixes randome failures in mutithreaded applications on Windows, like for example in the `R__USE_IMT` part of the `datasource-root` test:. ```. [ RUN ] TRootTDS.DefineSlotMT. Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist. [ OK ] TRootTDS.DefineSlotMT (191 ms). [ RUN ] TRootTDS.FromARDFMT. Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file. C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:. 29. Which is: 29. *max. Which is: 23. [ FAILED ] TRootTDS.FromARDFMT (6 ms). ```. * Adress the comments from Axel. * Pass the correct pointer to the helper. * Cosmetics. * Update core/winnt/src/TWinNTSystem.cxx. Prevent possible memory leak. * Update core/winnt/src/TWinNTSystem.cxx.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13500
https://github.com/root-project/root/pull/13501:427,integrability,schema,schema,427,"[RF] Only keep class declaration of `RooRefCountList`; This is another commit to clean RooFit of unneeded code and associated documentation. The RooRefCountList is only kept for IO backwards compatibility. From an IO point of view, it is equivalent to its parent class, the `RooLinkedList`. So we don't need to keep all the member function implementations. IN the one place where the `refCount()` member function is used in IO schema evolution rules, it now uses the `RooLinkedList` interface directly. This PR was tested by reading some old workspaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13501
https://github.com/root-project/root/pull/13501:483,integrability,interfac,interface,483,"[RF] Only keep class declaration of `RooRefCountList`; This is another commit to clean RooFit of unneeded code and associated documentation. The RooRefCountList is only kept for IO backwards compatibility. From an IO point of view, it is equivalent to its parent class, the `RooLinkedList`. So we don't need to keep all the member function implementations. IN the one place where the `refCount()` member function is used in IO schema evolution rules, it now uses the `RooLinkedList` interface directly. This PR was tested by reading some old workspaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13501
https://github.com/root-project/root/pull/13501:191,interoperability,compatib,compatibility,191,"[RF] Only keep class declaration of `RooRefCountList`; This is another commit to clean RooFit of unneeded code and associated documentation. The RooRefCountList is only kept for IO backwards compatibility. From an IO point of view, it is equivalent to its parent class, the `RooLinkedList`. So we don't need to keep all the member function implementations. IN the one place where the `refCount()` member function is used in IO schema evolution rules, it now uses the `RooLinkedList` interface directly. This PR was tested by reading some old workspaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13501
https://github.com/root-project/root/pull/13501:483,interoperability,interfac,interface,483,"[RF] Only keep class declaration of `RooRefCountList`; This is another commit to clean RooFit of unneeded code and associated documentation. The RooRefCountList is only kept for IO backwards compatibility. From an IO point of view, it is equivalent to its parent class, the `RooLinkedList`. So we don't need to keep all the member function implementations. IN the one place where the `refCount()` member function is used in IO schema evolution rules, it now uses the `RooLinkedList` interface directly. This PR was tested by reading some old workspaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13501
https://github.com/root-project/root/pull/13501:483,modifiability,interfac,interface,483,"[RF] Only keep class declaration of `RooRefCountList`; This is another commit to clean RooFit of unneeded code and associated documentation. The RooRefCountList is only kept for IO backwards compatibility. From an IO point of view, it is equivalent to its parent class, the `RooLinkedList`. So we don't need to keep all the member function implementations. IN the one place where the `refCount()` member function is used in IO schema evolution rules, it now uses the `RooLinkedList` interface directly. This PR was tested by reading some old workspaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13501
https://github.com/root-project/root/pull/13501:515,safety,test,tested,515,"[RF] Only keep class declaration of `RooRefCountList`; This is another commit to clean RooFit of unneeded code and associated documentation. The RooRefCountList is only kept for IO backwards compatibility. From an IO point of view, it is equivalent to its parent class, the `RooLinkedList`. So we don't need to keep all the member function implementations. IN the one place where the `refCount()` member function is used in IO schema evolution rules, it now uses the `RooLinkedList` interface directly. This PR was tested by reading some old workspaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13501
https://github.com/root-project/root/pull/13501:515,testability,test,tested,515,"[RF] Only keep class declaration of `RooRefCountList`; This is another commit to clean RooFit of unneeded code and associated documentation. The RooRefCountList is only kept for IO backwards compatibility. From an IO point of view, it is equivalent to its parent class, the `RooLinkedList`. So we don't need to keep all the member function implementations. IN the one place where the `refCount()` member function is used in IO schema evolution rules, it now uses the `RooLinkedList` interface directly. This PR was tested by reading some old workspaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13501
https://github.com/root-project/root/pull/13501:126,usability,document,documentation,126,"[RF] Only keep class declaration of `RooRefCountList`; This is another commit to clean RooFit of unneeded code and associated documentation. The RooRefCountList is only kept for IO backwards compatibility. From an IO point of view, it is equivalent to its parent class, the `RooLinkedList`. So we don't need to keep all the member function implementations. IN the one place where the `refCount()` member function is used in IO schema evolution rules, it now uses the `RooLinkedList` interface directly. This PR was tested by reading some old workspaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13501
https://github.com/root-project/root/pull/13502:163,deployability,observ,observables,163,"[RF] Improve documentation of `RooAbsData::split()`; In https://github.com/root-project/root/issues/13087, it was noted that `RooAbsData::split()` does not split. observables. However, there is already one overload of this function to. do this, taking a RooSimultaneous as an input to know what the. observables are. This PR improves the docs of `RooAbsData::split()` by. adding a comment that links to this other overload, such that it is. easier to find. Closes https://github.com/root-project/root/issues/13087.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13502
https://github.com/root-project/root/pull/13502:300,deployability,observ,observables,300,"[RF] Improve documentation of `RooAbsData::split()`; In https://github.com/root-project/root/issues/13087, it was noted that `RooAbsData::split()` does not split. observables. However, there is already one overload of this function to. do this, taking a RooSimultaneous as an input to know what the. observables are. This PR improves the docs of `RooAbsData::split()` by. adding a comment that links to this other overload, such that it is. easier to find. Closes https://github.com/root-project/root/issues/13087.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13502
https://github.com/root-project/root/pull/13502:147,reliability,doe,does,147,"[RF] Improve documentation of `RooAbsData::split()`; In https://github.com/root-project/root/issues/13087, it was noted that `RooAbsData::split()` does not split. observables. However, there is already one overload of this function to. do this, taking a RooSimultaneous as an input to know what the. observables are. This PR improves the docs of `RooAbsData::split()` by. adding a comment that links to this other overload, such that it is. easier to find. Closes https://github.com/root-project/root/issues/13087.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13502
https://github.com/root-project/root/pull/13502:276,safety,input,input,276,"[RF] Improve documentation of `RooAbsData::split()`; In https://github.com/root-project/root/issues/13087, it was noted that `RooAbsData::split()` does not split. observables. However, there is already one overload of this function to. do this, taking a RooSimultaneous as an input to know what the. observables are. This PR improves the docs of `RooAbsData::split()` by. adding a comment that links to this other overload, such that it is. easier to find. Closes https://github.com/root-project/root/issues/13087.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13502
https://github.com/root-project/root/pull/13502:163,testability,observ,observables,163,"[RF] Improve documentation of `RooAbsData::split()`; In https://github.com/root-project/root/issues/13087, it was noted that `RooAbsData::split()` does not split. observables. However, there is already one overload of this function to. do this, taking a RooSimultaneous as an input to know what the. observables are. This PR improves the docs of `RooAbsData::split()` by. adding a comment that links to this other overload, such that it is. easier to find. Closes https://github.com/root-project/root/issues/13087.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13502
https://github.com/root-project/root/pull/13502:300,testability,observ,observables,300,"[RF] Improve documentation of `RooAbsData::split()`; In https://github.com/root-project/root/issues/13087, it was noted that `RooAbsData::split()` does not split. observables. However, there is already one overload of this function to. do this, taking a RooSimultaneous as an input to know what the. observables are. This PR improves the docs of `RooAbsData::split()` by. adding a comment that links to this other overload, such that it is. easier to find. Closes https://github.com/root-project/root/issues/13087.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13502
https://github.com/root-project/root/pull/13502:13,usability,document,documentation,13,"[RF] Improve documentation of `RooAbsData::split()`; In https://github.com/root-project/root/issues/13087, it was noted that `RooAbsData::split()` does not split. observables. However, there is already one overload of this function to. do this, taking a RooSimultaneous as an input to know what the. observables are. This PR improves the docs of `RooAbsData::split()` by. adding a comment that links to this other overload, such that it is. easier to find. Closes https://github.com/root-project/root/issues/13087.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13502
https://github.com/root-project/root/pull/13502:276,usability,input,input,276,"[RF] Improve documentation of `RooAbsData::split()`; In https://github.com/root-project/root/issues/13087, it was noted that `RooAbsData::split()` does not split. observables. However, there is already one overload of this function to. do this, taking a RooSimultaneous as an input to know what the. observables are. This PR improves the docs of `RooAbsData::split()` by. adding a comment that links to this other overload, such that it is. easier to find. Closes https://github.com/root-project/root/issues/13087.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13502
https://github.com/root-project/root/pull/13502:457,usability,Close,Closes,457,"[RF] Improve documentation of `RooAbsData::split()`; In https://github.com/root-project/root/issues/13087, it was noted that `RooAbsData::split()` does not split. observables. However, there is already one overload of this function to. do this, taking a RooSimultaneous as an input to know what the. observables are. This PR improves the docs of `RooAbsData::split()` by. adding a comment that links to this other overload, such that it is. easier to find. Closes https://github.com/root-project/root/issues/13087.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13502
https://github.com/root-project/root/issues/13503:669,availability,Operat,Operating,669,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:272,deployability,integr,integrating,272,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:589,deployability,version,version,589,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:630,deployability,Instal,Installation,630,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:272,integrability,integr,integrating,272,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:589,integrability,version,version,589,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:272,interoperability,integr,integrating,272,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:272,modifiability,integr,integrating,272,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:589,modifiability,version,version,589,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:272,reliability,integr,integrating,272,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:272,security,integr,integrating,272,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:272,testability,integr,integrating,272,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:709,testability,context,context,709,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:29,usability,Close,Close,29,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:163,usability,Close,Close,163,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:227,usability,Close,Close,227,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:547,usability,Close,Close,547,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/issues/13503:565,usability,Close,Close,565,"Double call to `TNetXNGFile::Close()` leads to a segfault; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Double call to `TNetXNGFile::Close()` leads to a segfault, which is not the case for `TFile::Close()` in general. This leads to bugs when integrating software together like https://github.com/AIDASoft/DD4hep/issues/1156. ### Reproducer. ```c++. TFile *_file0 = TFile::Open(""root://dtn-eic.jlab.org//work/eic2/EPIC/Tutorials/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv.hepmc3.tree.root"");. _file0->Close();. _file0->Close();. ```. ### ROOT version. ROOT 6.26/06. xrootd-5.4.3. ### Installation method. from nixpkgs. ### Operating system. macOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13503
https://github.com/root-project/root/pull/13504:338,availability,error,error,338,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:453,availability,Error,Error,453,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:118,deployability,patch,patches,118,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:259,deployability,patch,patch,259,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:224,integrability,sub,substring,224,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:482,integrability,messag,message,482,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:482,interoperability,messag,message,482,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:338,performance,error,error,338,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:453,performance,Error,Error,453,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:118,safety,patch,patches,118,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:259,safety,patch,patch,259,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:338,safety,error,error,338,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:453,safety,Error,Error,453,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:585,safety,test,tested,585,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:118,security,patch,patches,118,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:259,security,patch,patch,259,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:585,testability,test,tested,585,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:338,usability,error,error,338,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13504:453,usability,Error,Error,453,"[cmake] relatedrepo_GetClosestMatch: fix well-known branch regex; Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below. ```. Cloning into 'roottest'... fatal: Remote branch master-13449 not found in upstream origin. CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?). ```. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13504
https://github.com/root-project/root/pull/13505:266,interoperability,specif,specified,266,"Introduce TCanvas::SaveAll method; Allows to create images for vector of pads at once. Using ""%d"" or ""%03d"" or any similar printf qualifier one can put image. number into the file name. Like ""image%d.png"". Special handling for PDF. If qualifier in PDF file name not specified,. all provided pads will be placed into single PDF document. Can use normal (default) and web-based image production. Only if web display is explicitly specified with `root --web`, will run chrome browser. . For web following formats are supported: ""png"", ""svg"", ""pdf"", ""jpg"", ""jpeg"", ""webp"". Also extend export into ROOT file - now it is possible to append object to existing ROOT file using ""a"" option. Means if ""file.root"" is specified, all pads will be saved into that single ROOT file. But if file name includes printf qualifier like ""file%d.root"", N root files will be created. . Same is for XML files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:428,interoperability,specif,specified,428,"Introduce TCanvas::SaveAll method; Allows to create images for vector of pads at once. Using ""%d"" or ""%03d"" or any similar printf qualifier one can put image. number into the file name. Like ""image%d.png"". Special handling for PDF. If qualifier in PDF file name not specified,. all provided pads will be placed into single PDF document. Can use normal (default) and web-based image production. Only if web display is explicitly specified with `root --web`, will run chrome browser. . For web following formats are supported: ""png"", ""svg"", ""pdf"", ""jpg"", ""jpeg"", ""webp"". Also extend export into ROOT file - now it is possible to append object to existing ROOT file using ""a"" option. Means if ""file.root"" is specified, all pads will be saved into that single ROOT file. But if file name includes printf qualifier like ""file%d.root"", N root files will be created. . Same is for XML files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:502,interoperability,format,formats,502,"Introduce TCanvas::SaveAll method; Allows to create images for vector of pads at once. Using ""%d"" or ""%03d"" or any similar printf qualifier one can put image. number into the file name. Like ""image%d.png"". Special handling for PDF. If qualifier in PDF file name not specified,. all provided pads will be placed into single PDF document. Can use normal (default) and web-based image production. Only if web display is explicitly specified with `root --web`, will run chrome browser. . For web following formats are supported: ""png"", ""svg"", ""pdf"", ""jpg"", ""jpeg"", ""webp"". Also extend export into ROOT file - now it is possible to append object to existing ROOT file using ""a"" option. Means if ""file.root"" is specified, all pads will be saved into that single ROOT file. But if file name includes printf qualifier like ""file%d.root"", N root files will be created. . Same is for XML files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:705,interoperability,specif,specified,705,"Introduce TCanvas::SaveAll method; Allows to create images for vector of pads at once. Using ""%d"" or ""%03d"" or any similar printf qualifier one can put image. number into the file name. Like ""image%d.png"". Special handling for PDF. If qualifier in PDF file name not specified,. all provided pads will be placed into single PDF document. Can use normal (default) and web-based image production. Only if web display is explicitly specified with `root --web`, will run chrome browser. . For web following formats are supported: ""png"", ""svg"", ""pdf"", ""jpg"", ""jpeg"", ""webp"". Also extend export into ROOT file - now it is possible to append object to existing ROOT file using ""a"" option. Means if ""file.root"" is specified, all pads will be saved into that single ROOT file. But if file name includes printf qualifier like ""file%d.root"", N root files will be created. . Same is for XML files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:874,interoperability,XML,XML,874,"Introduce TCanvas::SaveAll method; Allows to create images for vector of pads at once. Using ""%d"" or ""%03d"" or any similar printf qualifier one can put image. number into the file name. Like ""image%d.png"". Special handling for PDF. If qualifier in PDF file name not specified,. all provided pads will be placed into single PDF document. Can use normal (default) and web-based image production. Only if web display is explicitly specified with `root --web`, will run chrome browser. . For web following formats are supported: ""png"", ""svg"", ""pdf"", ""jpg"", ""jpeg"", ""webp"". Also extend export into ROOT file - now it is possible to append object to existing ROOT file using ""a"" option. Means if ""file.root"" is specified, all pads will be saved into that single ROOT file. But if file name includes printf qualifier like ""file%d.root"", N root files will be created. . Same is for XML files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:574,modifiability,exten,extend,574,"Introduce TCanvas::SaveAll method; Allows to create images for vector of pads at once. Using ""%d"" or ""%03d"" or any similar printf qualifier one can put image. number into the file name. Like ""image%d.png"". Special handling for PDF. If qualifier in PDF file name not specified,. all provided pads will be placed into single PDF document. Can use normal (default) and web-based image production. Only if web display is explicitly specified with `root --web`, will run chrome browser. . For web following formats are supported: ""png"", ""svg"", ""pdf"", ""jpg"", ""jpeg"", ""webp"". Also extend export into ROOT file - now it is possible to append object to existing ROOT file using ""a"" option. Means if ""file.root"" is specified, all pads will be saved into that single ROOT file. But if file name includes printf qualifier like ""file%d.root"", N root files will be created. . Same is for XML files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:327,usability,document,document,327,"Introduce TCanvas::SaveAll method; Allows to create images for vector of pads at once. Using ""%d"" or ""%03d"" or any similar printf qualifier one can put image. number into the file name. Like ""image%d.png"". Special handling for PDF. If qualifier in PDF file name not specified,. all provided pads will be placed into single PDF document. Can use normal (default) and web-based image production. Only if web display is explicitly specified with `root --web`, will run chrome browser. . For web following formats are supported: ""png"", ""svg"", ""pdf"", ""jpg"", ""jpeg"", ""webp"". Also extend export into ROOT file - now it is possible to append object to existing ROOT file using ""a"" option. Means if ""file.root"" is specified, all pads will be saved into that single ROOT file. But if file name includes printf qualifier like ""file%d.root"", N root files will be created. . Same is for XML files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13505:514,usability,support,supported,514,"Introduce TCanvas::SaveAll method; Allows to create images for vector of pads at once. Using ""%d"" or ""%03d"" or any similar printf qualifier one can put image. number into the file name. Like ""image%d.png"". Special handling for PDF. If qualifier in PDF file name not specified,. all provided pads will be placed into single PDF document. Can use normal (default) and web-based image production. Only if web display is explicitly specified with `root --web`, will run chrome browser. . For web following formats are supported: ""png"", ""svg"", ""pdf"", ""jpg"", ""jpeg"", ""webp"". Also extend export into ROOT file - now it is possible to append object to existing ROOT file using ""a"" option. Means if ""file.root"" is specified, all pads will be saved into that single ROOT file. But if file name includes printf qualifier like ""file%d.root"", N root files will be created. . Same is for XML files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13505
https://github.com/root-project/root/pull/13506:139,performance,time,times,139,"Implement TPad::ClearPrimitives methods; Solves two problems. First is object duplication in list of primitives. If object appears several times, ROOT will try to delete it as many times. Not always one can verify that object was deleted already. Second problem is `TPad::RecursiveRemove()`. While object deleted, it will try to remove it from list and may interfere with list cleanup. Therefore set `fPrimitives` to `nullptr` when calling `TList::Cleanup()`. Triggered by https://root-forum.cern.ch/t/56089/. Edited: second point was disabled. One need to be able remove objects which indirectly can be deleted and need to be removed from primitives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:181,performance,time,times,181,"Implement TPad::ClearPrimitives methods; Solves two problems. First is object duplication in list of primitives. If object appears several times, ROOT will try to delete it as many times. Not always one can verify that object was deleted already. Second problem is `TPad::RecursiveRemove()`. While object deleted, it will try to remove it from list and may interfere with list cleanup. Therefore set `fPrimitives` to `nullptr` when calling `TList::Cleanup()`. Triggered by https://root-forum.cern.ch/t/56089/. Edited: second point was disabled. One need to be able remove objects which indirectly can be deleted and need to be removed from primitives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:207,testability,verif,verify,207,"Implement TPad::ClearPrimitives methods; Solves two problems. First is object duplication in list of primitives. If object appears several times, ROOT will try to delete it as many times. Not always one can verify that object was deleted already. Second problem is `TPad::RecursiveRemove()`. While object deleted, it will try to remove it from list and may interfere with list cleanup. Therefore set `fPrimitives` to `nullptr` when calling `TList::Cleanup()`. Triggered by https://root-forum.cern.ch/t/56089/. Edited: second point was disabled. One need to be able remove objects which indirectly can be deleted and need to be removed from primitives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13506:16,usability,Clear,ClearPrimitives,16,"Implement TPad::ClearPrimitives methods; Solves two problems. First is object duplication in list of primitives. If object appears several times, ROOT will try to delete it as many times. Not always one can verify that object was deleted already. Second problem is `TPad::RecursiveRemove()`. While object deleted, it will try to remove it from list and may interfere with list cleanup. Therefore set `fPrimitives` to `nullptr` when calling `TList::Cleanup()`. Triggered by https://root-forum.cern.ch/t/56089/. Edited: second point was disabled. One need to be able remove objects which indirectly can be deleted and need to be removed from primitives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13506
https://github.com/root-project/root/pull/13507:88,availability,state,state,88,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13507:153,availability,state,state,153,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13507:49,deployability,API,API,49,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13507:49,integrability,API,API,49,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13507:88,integrability,state,state,88,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13507:153,integrability,state,state,153,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13507:49,interoperability,API,API,49,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13507:15,safety,safe,safety,15,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13507:229,safety,test,tested,229,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13507:229,testability,test,tested,229,[ntuple] Minor safety improvements to the RField API; # This Pull request:. - Makes the state transition of a field during its lifetime explicit. - Adds state checks to some of the methods. - Removes `RFieldBase::Flush()`. - [X] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13507
https://github.com/root-project/root/pull/13508:18,interoperability,specif,specific,18,"[RF] Less Windows-specific RooFit code ; In particular, don't exclude tests that are now running fine on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13508
https://github.com/root-project/root/pull/13508:70,safety,test,tests,70,"[RF] Less Windows-specific RooFit code ; In particular, don't exclude tests that are now running fine on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13508
https://github.com/root-project/root/pull/13508:70,testability,test,tests,70,"[RF] Less Windows-specific RooFit code ; In particular, don't exclude tests that are now running fine on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13508
https://github.com/root-project/root/pull/13509:23,deployability,fail,failed,23,[ci] Report summary of failed tests. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13509
https://github.com/root-project/root/pull/13509:143,deployability,updat,updated,143,[ci] Report summary of failed tests. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13509
https://github.com/root-project/root/pull/13509:23,reliability,fail,failed,23,[ci] Report summary of failed tests. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13509
https://github.com/root-project/root/pull/13509:30,safety,test,tests,30,[ci] Report summary of failed tests. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13509
https://github.com/root-project/root/pull/13509:113,safety,test,tested,113,[ci] Report summary of failed tests. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13509
https://github.com/root-project/root/pull/13509:143,safety,updat,updated,143,[ci] Report summary of failed tests. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13509
https://github.com/root-project/root/pull/13509:143,security,updat,updated,143,[ci] Report summary of failed tests. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13509
https://github.com/root-project/root/pull/13509:30,testability,test,tests,30,[ci] Report summary of failed tests. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13509
https://github.com/root-project/root/pull/13509:113,testability,test,tested,113,[ci] Report summary of failed tests. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13509
https://github.com/root-project/root/pull/13510:367,integrability,compon,components,367,"Remove Experimental namespace from web gui classes; These are:. - `gui/webdisplay` basic web display classes like RWebWindow. - `gui/browsable` auxiliary classes for RBrowser. - `gui/browserv7` RBrowser, RFileDialog. - `geom/webviewer` RGeomViewer. - `tree/webviewer` RTreeViewer. All these classes are now landing in ROOT namespace. . Some other experimental webgui components like `REve` or `RCanvasPainter` or `RFitPanel` adjusted to use proper namespace for `RWebWindow`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13510
https://github.com/root-project/root/pull/13510:367,interoperability,compon,components,367,"Remove Experimental namespace from web gui classes; These are:. - `gui/webdisplay` basic web display classes like RWebWindow. - `gui/browsable` auxiliary classes for RBrowser. - `gui/browserv7` RBrowser, RFileDialog. - `geom/webviewer` RGeomViewer. - `tree/webviewer` RTreeViewer. All these classes are now landing in ROOT namespace. . Some other experimental webgui components like `REve` or `RCanvasPainter` or `RFitPanel` adjusted to use proper namespace for `RWebWindow`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13510
https://github.com/root-project/root/pull/13510:367,modifiability,compon,components,367,"Remove Experimental namespace from web gui classes; These are:. - `gui/webdisplay` basic web display classes like RWebWindow. - `gui/browsable` auxiliary classes for RBrowser. - `gui/browserv7` RBrowser, RFileDialog. - `geom/webviewer` RGeomViewer. - `tree/webviewer` RTreeViewer. All these classes are now landing in ROOT namespace. . Some other experimental webgui components like `REve` or `RCanvasPainter` or `RFitPanel` adjusted to use proper namespace for `RWebWindow`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13510
https://github.com/root-project/root/pull/13510:394,reliability,RCa,RCanvasPainter,394,"Remove Experimental namespace from web gui classes; These are:. - `gui/webdisplay` basic web display classes like RWebWindow. - `gui/browsable` auxiliary classes for RBrowser. - `gui/browserv7` RBrowser, RFileDialog. - `geom/webviewer` RGeomViewer. - `tree/webviewer` RTreeViewer. All these classes are now landing in ROOT namespace. . Some other experimental webgui components like `REve` or `RCanvasPainter` or `RFitPanel` adjusted to use proper namespace for `RWebWindow`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13510
https://github.com/root-project/root/issues/13511:188,availability,monitor,monitoring,188,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:508,availability,error,error,508,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:538,availability,fault,fault,538,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:642,availability,error,errors,642,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1057,availability,error,error,1057,"ked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1173,availability,error,error,1173," the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1267,availability,Error,Error,1267,"sions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. As",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1332,availability,avail,available,1332,"cc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run "".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2562,availability,operat,operating,2562," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2586,availability,error,error,2586," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2752,availability,Operat,Operating,2752," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:188,deployability,monitor,monitoring,188,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:267,deployability,version,versions,267,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:896,deployability,version,version,896,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2572,deployability,version,versions,2572," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2631,deployability,version,version,2631," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2689,deployability,Instal,Installation,2689," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:188,energy efficiency,monitor,monitoring,188,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:538,energy efficiency,fault,fault,538,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:267,integrability,version,versions,267,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:514,integrability,messag,message,514,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:896,integrability,version,version,896,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1179,integrability,messag,message,1179,"line monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2572,integrability,version,versions,2572," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2592,integrability,messag,message,2592," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2631,integrability,version,version,2631," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:514,interoperability,messag,message,514,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1179,interoperability,messag,message,1179,"line monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2592,interoperability,messag,message,2592," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:267,modifiability,version,versions,267,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:896,modifiability,version,version,896,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2572,modifiability,version,versions,2572," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2631,modifiability,version,version,2631," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2739,modifiability,pac,package,2739," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:508,performance,error,error,508,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:538,performance,fault,fault,538,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:642,performance,error,errors,642,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1057,performance,error,error,1057,"ked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1173,performance,error,error,1173," the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1267,performance,Error,Error,1267,"sions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. As",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1302,performance,memor,memory,1302,"6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and crea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2586,performance,error,error,2586," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:188,reliability,monitor,monitoring,188,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:490,reliability,doe,doesn,490,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:538,reliability,fault,fault,538,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:605,reliability,doe,doesn,605,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1332,reliability,availab,available,1332,"cc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run "".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:188,safety,monitor,monitoring,188,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:508,safety,error,error,508,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:538,safety,fault,fault,538,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:642,safety,error,errors,642,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1057,safety,error,error,1057,"ked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1173,safety,error,error,1173," the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1267,safety,Error,Error,1267,"sions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. As",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1332,safety,avail,available,1332,"cc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run "".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2586,safety,error,error,2586," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1332,security,availab,available,1332,"cc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run "".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:188,testability,monitor,monitoring,188,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2794,testability,context,context,2794," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:508,usability,error,error,508,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:642,usability,error,errors,642,"TMapFile can't work ; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1057,usability,error,error,1057,"ked for duplicates. ### Description. Dear Rooters,. Indeed I used the TMapFile together with TApplication to realize the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1173,usability,error,error,1173," the online monitoring for my DAQ. After having tried many combinations of ROOT and ubuntu versions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1267,usability,Error,Error,1267,"sions, finally it worked with ROOT 6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. As",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1302,usability,memor,memory,1302,"6.12.06 on Ubuntu 16.04.7 LTS (gcc 5.4.0). . The main problem is remaining with the TMapFile which requires -lNew to be included in the makefile. Once this works, the TApplication just doesn't work with error message of segmentation fault or violation. Or vice versa, TApplication works but TMapFile doesn't work. In order to repeat the errors, I collected the three ROOT example macros (as attached) and created a makefile to compile them. In the Makefile, the option of --new or -lNew have been added. One can include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and crea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:1963,usability,tip,tipps,1963," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/issues/13511:2586,usability,error,error,2586," include them or comment them out. On Ubuntu 20.04.1 LTS (gcc 9.4.0), with ROOT version from 6.12.06 to 6.28.04, none of the combinations got to work. For instance, when the TMapFile works with ROOT 6.12.06, then the TApplication returns an error of ""Segmentation violation"". With a newer ROOT, e.g. 6.28.04, the TApplication works but the TMapFile got the error message. *****************************************************************************. Error in <TMapFile::TMapFile> : no memory mapped file capability available. Use rootn.exe or link application against ""-lNew"". *****************************************************************************. Could you guys have a look at this problem and find out what happened or may find a solution? Many thanks in advance. Huagen Xu from FZ Juelich, IKP. [root_examples.zip](https://github.com/root-project/root/files/12415948/root_examples.zip). ### Reproducer. As attached, there are three Macro files plus one Makefile. Those three files are all the ROOT examples to demostrate how the TMapFile as well as the TApplication work. To reproduce the problem described above, one could follow the tipps below. 1. Unzip the file into a local directory . 2. Open a terminal and cd to the unzipped directory, type ""make"" to compile the files. 3. Run ""./appdemo"" in a terminal to check whether TApplication works properly. 4. Run ""./hisprod"" in a termianl to check whether the TMapFile will be created. 5. Assuming the ""hisprod"" works and creates a ""hsimple.map"" file, run ""./hisplot"" in a new Terminal to check whether the TMapFile and TApplication could work together. In the Makefile, it is required to have the link of -lNew or --new for running TMapFile. With different combinations of ROOT and operating versions, the error message might be different. . ### ROOT version. Ubuntu 20.04.2 LTS. ROOT 6.12.06 to 6.28.04. ### Installation method. both of compiling and binary package. ### Operating system. Ubuntu . ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13511
https://github.com/root-project/root/pull/13512:18,deployability,build,build,18,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:138,deployability,updat,updated,138,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:108,safety,test,tested,108,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:138,safety,updat,updated,138,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:138,security,updat,updated,138,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/pull/13512:108,testability,test,tested,108,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13512
https://github.com/root-project/root/issues/13513:319,interoperability,distribut,distributed,319,"A typo in source code; From https://root.cern.ch/doc/master/TRandom_8cxx_source.html#l00544:. ```c++. ////////////////////////////////////////////////////////////////////////////////. /// Machine independent random number generator. /// Based on the BSD Unix (Rand) Linear congrential generator. /// Produces uniformly-distributed floating points between 0 and 1. /// Identical sequence on all machines of >= 32 bits. /// Periodicity = 2**31, generates a number in (0,1). /// Note that this is a generator which is known to have defects. /// (the lower random bits are correlated) and therefore should NOT be. /// used in any statistical study). . Double_t TRandom::Rndm( ). {. ```. congrential -> congruential",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13513
https://github.com/root-project/root/issues/13513:368,security,Ident,Identical,368,"A typo in source code; From https://root.cern.ch/doc/master/TRandom_8cxx_source.html#l00544:. ```c++. ////////////////////////////////////////////////////////////////////////////////. /// Machine independent random number generator. /// Based on the BSD Unix (Rand) Linear congrential generator. /// Produces uniformly-distributed floating points between 0 and 1. /// Identical sequence on all machines of >= 32 bits. /// Periodicity = 2**31, generates a number in (0,1). /// Note that this is a generator which is known to have defects. /// (the lower random bits are correlated) and therefore should NOT be. /// used in any statistical study). . Double_t TRandom::Rndm( ). {. ```. congrential -> congruential",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13513
https://github.com/root-project/root/pull/13514:18,deployability,build,build,18,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13514
https://github.com/root-project/root/pull/13514:138,deployability,updat,updated,138,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13514
https://github.com/root-project/root/pull/13514:108,safety,test,tested,108,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13514
https://github.com/root-project/root/pull/13514:138,safety,updat,updated,138,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13514
https://github.com/root-project/root/pull/13514:138,security,updat,updated,138,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13514
https://github.com/root-project/root/pull/13514:108,testability,test,tested,108,[ci] Use Ninja as build system. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13514
https://github.com/root-project/root/pull/13515:18,deployability,log,log,18,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/pull/13515:169,deployability,updat,updated,169,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/pull/13515:18,safety,log,log,18,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/pull/13515:139,safety,test,tested,139,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/pull/13515:169,safety,updat,updated,169,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/pull/13515:18,security,log,log,18,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/pull/13515:169,security,updat,updated,169,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/pull/13515:18,testability,log,log,18,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/pull/13515:139,testability,test,tested,139,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci]; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13515
https://github.com/root-project/root/issues/13516:235,availability,failur,failure,235,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:325,availability,error,error,325,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:731,availability,Operat,Operating,731,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:53,deployability,fail,fails,53,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:235,deployability,fail,failure,235,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:346,deployability,build,builder,346,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:413,deployability,build,builder,413,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:541,deployability,instal,installed,541,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:666,deployability,version,version,666,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:687,deployability,Instal,Installation,687,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:708,deployability,build,build,708,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:666,integrability,version,version,666,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:62,interoperability,standard,standard,62,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:77,interoperability,distribut,distribution,77,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:572,interoperability,distribut,distributions,572,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:666,modifiability,version,version,666,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:235,performance,failur,failure,235,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:325,performance,error,error,325,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:53,reliability,fail,fails,53,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:235,reliability,fail,failure,235,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:26,safety,test,test,26,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:286,safety,test,test,286,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:325,safety,error,error,325,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:338,safety,test,testing,338,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:405,safety,test,testing,405,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:491,safety,test,testing,491,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:26,testability,test,test,26,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:286,testability,test,test,286,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:338,testability,test,testing,338,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:405,testability,test,testing,405,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:491,testability,test,testing,491,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:780,testability,context,context,780,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/issues/13516:325,usability,error,error,325,"Compilation of `dataframe/test/datasource_arrow.cxx` fails on standard linux distribution; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. When compiles ROOT on OpenSUSE Linux, one gets following compilation failure:. ```. /home/linev/git/json/tree/dataframe/test/datasource_arrow.cxx:14:10: fatal error: arrow/testing/builder.h: No such file or directory. 14 | #include <arrow/testing/builder.h>. | ^~~~~~~~~~~~~~~~~~~~~~~~~. ```. Seems to be `/usr/include/arrow/testing` directory not exists at all when `arrow` installed as provided by linux distributions. ### Reproducer. Compilation with `-Darrow=ON` on OpenSUSE Tumbleweed. ### ROOT version. master. ### Installation method. build from source. ### Operating system. OpenSUSE Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13516
https://github.com/root-project/root/pull/13517:4,deployability,modul,modulemap,4,"std.modulemap: Make bits/invoke.h optional [v6.28]; It only appears in GCC 7, but C++14 is already supported since GCC 6 and users want to build ROOT 6.28 using that compiler. Fixes #13453. **Note:** This is *not* a backport because we require C++17 in `master`, so support for GCC 6 is not needed there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13517:139,deployability,build,build,139,"std.modulemap: Make bits/invoke.h optional [v6.28]; It only appears in GCC 7, but C++14 is already supported since GCC 6 and users want to build ROOT 6.28 using that compiler. Fixes #13453. **Note:** This is *not* a backport because we require C++17 in `master`, so support for GCC 6 is not needed there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13517:4,modifiability,modul,modulemap,4,"std.modulemap: Make bits/invoke.h optional [v6.28]; It only appears in GCC 7, but C++14 is already supported since GCC 6 and users want to build ROOT 6.28 using that compiler. Fixes #13453. **Note:** This is *not* a backport because we require C++17 in `master`, so support for GCC 6 is not needed there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13517:4,safety,modul,modulemap,4,"std.modulemap: Make bits/invoke.h optional [v6.28]; It only appears in GCC 7, but C++14 is already supported since GCC 6 and users want to build ROOT 6.28 using that compiler. Fixes #13453. **Note:** This is *not* a backport because we require C++17 in `master`, so support for GCC 6 is not needed there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13517:99,usability,support,supported,99,"std.modulemap: Make bits/invoke.h optional [v6.28]; It only appears in GCC 7, but C++14 is already supported since GCC 6 and users want to build ROOT 6.28 using that compiler. Fixes #13453. **Note:** This is *not* a backport because we require C++17 in `master`, so support for GCC 6 is not needed there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13517:125,usability,user,users,125,"std.modulemap: Make bits/invoke.h optional [v6.28]; It only appears in GCC 7, but C++14 is already supported since GCC 6 and users want to build ROOT 6.28 using that compiler. Fixes #13453. **Note:** This is *not* a backport because we require C++17 in `master`, so support for GCC 6 is not needed there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13517:266,usability,support,support,266,"std.modulemap: Make bits/invoke.h optional [v6.28]; It only appears in GCC 7, but C++14 is already supported since GCC 6 and users want to build ROOT 6.28 using that compiler. Fixes #13453. **Note:** This is *not* a backport because we require C++17 in `master`, so support for GCC 6 is not needed there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13517
https://github.com/root-project/root/pull/13518:491,deployability,integr,integrals,491,"[RF] Fix to empty `_normSet` check in RooAddPdf createExpectedEventsFunc; The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13518
https://github.com/root-project/root/pull/13518:491,integrability,integr,integrals,491,"[RF] Fix to empty `_normSet` check in RooAddPdf createExpectedEventsFunc; The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13518
https://github.com/root-project/root/pull/13518:491,interoperability,integr,integrals,491,"[RF] Fix to empty `_normSet` check in RooAddPdf createExpectedEventsFunc; The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13518
https://github.com/root-project/root/pull/13518:491,modifiability,integr,integrals,491,"[RF] Fix to empty `_normSet` check in RooAddPdf createExpectedEventsFunc; The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13518
https://github.com/root-project/root/pull/13518:491,reliability,integr,integrals,491,"[RF] Fix to empty `_normSet` check in RooAddPdf createExpectedEventsFunc; The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13518
https://github.com/root-project/root/pull/13518:442,safety,avoid,avoids,442,"[RF] Fix to empty `_normSet` check in RooAddPdf createExpectedEventsFunc; The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13518
https://github.com/root-project/root/pull/13518:491,security,integr,integrals,491,"[RF] Fix to empty `_normSet` check in RooAddPdf createExpectedEventsFunc; The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13518
https://github.com/root-project/root/pull/13518:491,testability,integr,integrals,491,"[RF] Fix to empty `_normSet` check in RooAddPdf createExpectedEventsFunc; The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13518
https://github.com/root-project/root/pull/13518:369,usability,help,helps,369,"[RF] Fix to empty `_normSet` check in RooAddPdf createExpectedEventsFunc; The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13518
https://github.com/root-project/root/pull/13519:213,availability,down,down,213,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:362,availability,avail,available,362,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:262,deployability,scale,scale,262,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:325,deployability,version,version,325,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:262,energy efficiency,scale,scale,262,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:325,integrability,version,version,325,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:262,modifiability,scal,scale,262,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:325,modifiability,version,version,325,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:262,performance,scale,scale,262,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:362,reliability,availab,available,362,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:362,safety,avail,available,362,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13519:362,security,availab,available,362,"[DF] Add systematic variations to HiggsToFourLeptons tutorials; This PR is based on PR #11200. . The systematic variations in the Higgs to four leptons tutorial are implemented. The improved plot shows the up and down variations of the total Monte Carlo weight (scale factor) on top of what was previously shown. Now the C++ version of the full tutorial is also available. I decided to rename the tutorial from df106_HiggsToFourLeptons.py to df106_HiggsToFourLeptons_withVaariations.py but it's just a suggestion, I can change it back to what it was. . Note (I suppose only relevant since I run it on Mac ARM)- in order to use the Interpolator I built root with `-Dbuiltin_gsl=ON` option. . ![df106_HiggsToFourLeptons_python](https://github.com/root-project/root/assets/80402204/e273ae21-fbf3-4813-8d23-99ee59c4b431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13519
https://github.com/root-project/root/pull/13520:32,availability,operat,operations,32,Add GraphAsymmErrors to DistRDF operations; # This Pull request:. ## Changes or fixes:. GraphAsymmErrors was missing from the list of allowed operations for DistRDF. This PR fixes #13588. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13520:142,availability,operat,operations,142,Add GraphAsymmErrors to DistRDF operations; # This Pull request:. ## Changes or fixes:. GraphAsymmErrors was missing from the list of allowed operations for DistRDF. This PR fixes #13588. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13520:239,deployability,updat,updated,239,Add GraphAsymmErrors to DistRDF operations; # This Pull request:. ## Changes or fixes:. GraphAsymmErrors was missing from the list of allowed operations for DistRDF. This PR fixes #13588. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13520:209,safety,test,tested,209,Add GraphAsymmErrors to DistRDF operations; # This Pull request:. ## Changes or fixes:. GraphAsymmErrors was missing from the list of allowed operations for DistRDF. This PR fixes #13588. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13520:239,safety,updat,updated,239,Add GraphAsymmErrors to DistRDF operations; # This Pull request:. ## Changes or fixes:. GraphAsymmErrors was missing from the list of allowed operations for DistRDF. This PR fixes #13588. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13520:239,security,updat,updated,239,Add GraphAsymmErrors to DistRDF operations; # This Pull request:. ## Changes or fixes:. GraphAsymmErrors was missing from the list of allowed operations for DistRDF. This PR fixes #13588. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13520:209,testability,test,tested,209,Add GraphAsymmErrors to DistRDF operations; # This Pull request:. ## Changes or fixes:. GraphAsymmErrors was missing from the list of allowed operations for DistRDF. This PR fixes #13588. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13520
https://github.com/root-project/root/pull/13521:240,deployability,updat,updated,240,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:107,energy efficiency,reduc,reduce,107,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:84,performance,Perform,Performs,84,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:98,performance,time,time,98,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:149,performance,time,time,149,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:210,safety,test,tested,210,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:240,safety,updat,updated,240,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:240,security,updat,updated,240,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:210,testability,test,tested,210,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:5,usability,visual,visualization,5,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:27,usability,prototyp,prototype,27,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13521:84,usability,Perform,Performs,84,Live visualization feature prototype; # This Pull request:. ## Adds a new feature:. Performs real-time map-reduce using Dask framework allowing real-time data representation. Fixes #13607. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13521
https://github.com/root-project/root/pull/13522:25,deployability,Instal,Installing,25,minuit2: missing header; Installing missing header MnMatrixfwd.h when building standalone Minuit2. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13522
https://github.com/root-project/root/pull/13522:70,deployability,build,building,70,minuit2: missing header; Installing missing header MnMatrixfwd.h when building standalone Minuit2. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13522
https://github.com/root-project/root/pull/13522:150,deployability,updat,updated,150,minuit2: missing header; Installing missing header MnMatrixfwd.h when building standalone Minuit2. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13522
https://github.com/root-project/root/pull/13522:120,safety,test,tested,120,minuit2: missing header; Installing missing header MnMatrixfwd.h when building standalone Minuit2. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13522
https://github.com/root-project/root/pull/13522:150,safety,updat,updated,150,minuit2: missing header; Installing missing header MnMatrixfwd.h when building standalone Minuit2. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13522
https://github.com/root-project/root/pull/13522:150,security,updat,updated,150,minuit2: missing header; Installing missing header MnMatrixfwd.h when building standalone Minuit2. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13522
https://github.com/root-project/root/pull/13522:120,testability,test,tested,120,minuit2: missing header; Installing missing header MnMatrixfwd.h when building standalone Minuit2. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13522
https://github.com/root-project/root/pull/13523:74,deployability,depend,dependency,74,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:297,deployability,updat,updated,297,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:74,integrability,depend,dependency,74,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:74,modifiability,depend,dependency,74,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:0,safety,Avoid,Avoid,0,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:25,safety,test,testing,25,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:74,safety,depend,dependency,74,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:94,safety,test,testing,94,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:116,safety,test,tests,116,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:267,safety,test,tested,267,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:297,safety,updat,updated,297,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:297,security,updat,updated,297,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:25,testability,test,testing,25,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:74,testability,depend,dependency,74,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:94,testability,test,testing,94,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:116,testability,test,tests,116,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:267,testability,test,tested,267,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13523:197,usability,help,helpers,197,Avoid inclusion of arrow testing stuff; # This Pull request:. Removes the dependency on arrow/testing for dataframe tests. ## Changes or fixes:. Copies over the various ArrayFromVector / ASSERT_OK helpers dropping the arrow:: namespace for them. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #13516.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13523
https://github.com/root-project/root/pull/13524:29,deployability,version,version,29,"[pymva] Fix retrieving Keras version when using new version of tensorflow; With the latest tensorflow (2.13) tf.keras.__version__ is not existing anymore, oone needs to use tf.__version__.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13524
https://github.com/root-project/root/pull/13524:52,deployability,version,version,52,"[pymva] Fix retrieving Keras version when using new version of tensorflow; With the latest tensorflow (2.13) tf.keras.__version__ is not existing anymore, oone needs to use tf.__version__.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13524
https://github.com/root-project/root/pull/13524:29,integrability,version,version,29,"[pymva] Fix retrieving Keras version when using new version of tensorflow; With the latest tensorflow (2.13) tf.keras.__version__ is not existing anymore, oone needs to use tf.__version__.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13524
https://github.com/root-project/root/pull/13524:52,integrability,version,version,52,"[pymva] Fix retrieving Keras version when using new version of tensorflow; With the latest tensorflow (2.13) tf.keras.__version__ is not existing anymore, oone needs to use tf.__version__.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13524
https://github.com/root-project/root/pull/13524:29,modifiability,version,version,29,"[pymva] Fix retrieving Keras version when using new version of tensorflow; With the latest tensorflow (2.13) tf.keras.__version__ is not existing anymore, oone needs to use tf.__version__.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13524
https://github.com/root-project/root/pull/13524:52,modifiability,version,version,52,"[pymva] Fix retrieving Keras version when using new version of tensorflow; With the latest tensorflow (2.13) tf.keras.__version__ is not existing anymore, oone needs to use tf.__version__.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13524
https://github.com/root-project/root/pull/13526:27,availability,Sli,Slice,27,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:39,availability,Operat,Operator,39,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:55,availability,sli,slice,55,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:104,availability,Sli,Slice,104,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:115,availability,Operat,Operator,115,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:231,availability,Sli,Slice,231,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:237,availability,Operat,Operator,237,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:27,reliability,Sli,Slice,27,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:55,reliability,sli,slice,55,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:104,reliability,Sli,Slice,104,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13526:231,reliability,Sli,Slice,231,"[TMVA-SOFIE] Fixed bugs in Slice SOFIE Operator, added slice gtests; - Fixed bugs in the parser for the Slice ONNX Operator, like adding code that handles cases where Steps/Axes attribute is missing. - Added missing gtests for the Slice Operator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13526
https://github.com/root-project/root/pull/13527:195,interoperability,plug,plugin,195,"[webgui] let start fit panel from TWebCanvas, fix TBrowser start; 1.Let start fit panel from web-based canvas. 2. Let start TBrowser from web-based canvas. 3. Remove ""Experimental"" from TBrowser plugin.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13527
https://github.com/root-project/root/pull/13528:115,availability,error,error,115,"[RF][HF] HistFactory improvements for gaussian constrained terms ; Give gaussian constrained parameters an initial error, and don't create lumi constraint if there is no error on it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:170,availability,error,error,170,"[RF][HF] HistFactory improvements for gaussian constrained terms ; Give gaussian constrained parameters an initial error, and don't create lumi constraint if there is no error on it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:93,modifiability,paramet,parameters,93,"[RF][HF] HistFactory improvements for gaussian constrained terms ; Give gaussian constrained parameters an initial error, and don't create lumi constraint if there is no error on it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:115,performance,error,error,115,"[RF][HF] HistFactory improvements for gaussian constrained terms ; Give gaussian constrained parameters an initial error, and don't create lumi constraint if there is no error on it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:170,performance,error,error,170,"[RF][HF] HistFactory improvements for gaussian constrained terms ; Give gaussian constrained parameters an initial error, and don't create lumi constraint if there is no error on it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:115,safety,error,error,115,"[RF][HF] HistFactory improvements for gaussian constrained terms ; Give gaussian constrained parameters an initial error, and don't create lumi constraint if there is no error on it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:170,safety,error,error,170,"[RF][HF] HistFactory improvements for gaussian constrained terms ; Give gaussian constrained parameters an initial error, and don't create lumi constraint if there is no error on it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:115,usability,error,error,115,"[RF][HF] HistFactory improvements for gaussian constrained terms ; Give gaussian constrained parameters an initial error, and don't create lumi constraint if there is no error on it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/pull/13528:170,usability,error,error,170,"[RF][HF] HistFactory improvements for gaussian constrained terms ; Give gaussian constrained parameters an initial error, and don't create lumi constraint if there is no error on it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13528
https://github.com/root-project/root/issues/13529:12,availability,error,error,12,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:235,availability,error,error,235,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:344,availability,Down,Downloads,344,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:401,availability,Down,Downloads,401,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:458,availability,Down,Downloads,458,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:510,availability,Down,Downloads,510,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:562,availability,Down,Downloads,562,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:614,availability,Down,Downloads,614,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:666,availability,Down,Downloads,666,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:717,availability,Down,Downloads,717,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:771,availability,Down,Downloads,771,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:829,availability,Down,Downloads,829,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1274,availability,Down,Downloads,1274,"es/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a differ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1406,availability,Down,Downloads,1406,"root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1488,availability,Down,Downloads,1488,"c -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1582,availability,Down,Downloads,1582,"re/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1671,availability,error,error,1671,"s/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1885,availability,Down,Downloads,1885,"=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1957,availability,Down,Downloads,1957," -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2191,availability,error,error,2191,".d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2383,availability,Down,Downloads,2383,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2733,availability,error,error,2733,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:3005,availability,down,download,3005,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:3207,availability,Operat,Operating,3207,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:248,deployability,FAIL,FAILED,248,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2597,deployability,Build,Building,2597,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:3115,deployability,build,build,3115,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:3147,deployability,version,version,3147,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:3169,deployability,Instal,Installation,3169,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:256,energy efficiency,core,core,256,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:367,energy efficiency,core,core,367,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:424,energy efficiency,core,core,424,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:481,energy efficiency,core,core,481,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:533,energy efficiency,core,core,533,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:585,energy efficiency,core,core,585,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:637,energy efficiency,core,core,637,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:689,energy efficiency,core,core,689,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:740,energy efficiency,core,core,740,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:794,energy efficiency,core,core,794,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1075,energy efficiency,core,core,1075,"n specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1137,energy efficiency,core,core,1137,"licates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, siz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1200,energy efficiency,core,core,1200,"using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: decl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1297,energy efficiency,core,core,1297,"/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specif",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1429,energy efficiency,core,core,1429,"xtinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1511,energy efficiency,core,core,1511,"nloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1605,energy efficiency,core,core,1605,"maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building C",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1908,energy efficiency,core,core,1908,"-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1980,energy efficiency,core,core,1980,"tual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN cur",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2406,energy efficiency,core,core,2406,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2617,energy efficiency,core,core,2617,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:3147,integrability,version,version,3147,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:79,interoperability,specif,specifier,79,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1773,interoperability,specif,specifier,1773,"ds/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: he",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2293,interoperability,specif,specifier,2293,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2838,modifiability,pac,pacman,2838,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2868,modifiability,pac,pacman,2868,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:3147,modifiability,version,version,3147,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:12,performance,error,error,12,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:235,performance,error,error,235,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1671,performance,error,error,1671,"s/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2191,performance,error,error,2191,".d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2733,performance,error,error,2733,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:248,reliability,FAIL,FAILED,248,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:12,safety,error,error,12,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:69,safety,except,exception,69,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:235,safety,error,error,235,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1671,safety,error,error,1671,"s/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1763,safety,except,exception,1763,"oe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2191,safety,error,error,2191,".d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2283,safety,except,exception,2283,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2733,safety,error,error,2733,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:3265,testability,context,context,3265,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:12,usability,error,error,12,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:235,usability,error,error,235,"Compilation error on arch using gcc 13.2.1: strlcopy has a different exception specifier; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Compiling root 6.28-04 on arch linux using gcc 13.2.1 results in this error:. ```. FAILED: core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o . /usr/bin/c++ -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/inc -I/home/maxnoe/Downloads/root-6.28.04/core/textinput/src -I/home/maxnoe/Downloads/root-6.28.04/core/base/inc -I/home/maxnoe/Downloads/root-6.28.04/core/clib/inc -I/home/maxnoe/Downloads/root-6.28.04/core/meta/inc -I/home/maxnoe/Downloads/root-6.28.04/core/cont/inc -I/home/maxnoe/Downloads/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:1671,usability,error,error,1671,"s/root-6.28.04/core/gui/inc -I/home/maxnoe/Downloads/root-6.28.04/core/thread/inc -I/home/maxnoe/Downloads/root-6.28.04/core/foundation/inc -I/home/maxnoe/Downloads/root_build/ginclude -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG -std=c++17 -fPIC -fdiagnostics-color=always -MD -MT core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -MF core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o.d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2191,usability,error,error,2191,".d -o core/textinput/CMakeFiles/TextInput.dir/src/Getline.cxx.o -c /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/issues/13529:2733,usability,error,error,2733,"t-6.28.04/core/textinput/src/Getline.cxx. In file included from /usr/include/c++/13.2.1/cstring:42,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/Text.h:19,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/textinput/TextInputContext.h:20,. from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:19:. /usr/include/string.h:506:15: error: declaration of ‘size_t strlcpy(char*, const char*, size_t) noexcept’ has a different exception specifier. 506 | extern size_t strlcpy (char *__restrict __dest,. | ^~~~~~~. In file included from /home/maxnoe/Downloads/root-6.28.04/core/textinput/src/Getline.cxx:13:. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:26:8: note: from previous declaration ‘size_t strlcpy(char*, const char*, size_t)’. 26 | size_t strlcpy(char *dst, const char *src, size_t siz);. | ^~~~~~~. /usr/include/string.h:512:15: error: declaration of ‘size_t strlcat(char*, const char*, size_t) noexcept’ has a different exception specifier. 512 | extern size_t strlcat (char *__restrict __dest,. | ^~~~~~~. /home/maxnoe/Downloads/root-6.28.04/core/clib/inc/strlcpy.h:27:8: note: from previous declaration ‘size_t strlcat(char*, const char*, size_t)’. 27 | size_t strlcat(char *dst, const char *src, size_t siz);. | ^~~~~~~. [29/2579] Building CXX object core/unix/CMakeFiles/Unix.dir/src/TUnixSystem.cxx.o. ```. ### Reproducer. If needed, I'll provide a Dockerfile, but error looks pretty straight forward. Edit: here is the docker file:. ```. FROM archlinux:base-devel. RUN pacman -Syu --noconfirm \. && pacman --noconfirm -S \. curl cmake ninja gcc libjpeg \. python python-numpy gsl git libxpm libxft libx11. RUN curl -L https://root.cern/download/root_v6.28.04.source.tar.gz | tar xz. RUN cmake -S root-6.28.04 -B root_build -G Ninja \. && cmake --build root_build. ```. ### ROOT version. 6.28.04. ### Installation method. from source. ### Operating system. Arch Llinux, gcc 13.2.1. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13529
https://github.com/root-project/root/pull/13530:219,energy efficiency,GPU,GPU,219,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:282,energy efficiency,GPU,GPU,282,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:64,integrability,pub,public,64,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:142,integrability,pub,public,142,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:219,performance,GPU,GPU,219,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:282,performance,GPU,GPU,282,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:498,reliability,doe,does,498,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:107,testability,plan,planned,107,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:369,testability,context,context,369,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:188,usability,experien,experience,188,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/pull/13530:470,usability,clear,clear,470,"[RF] Rename the RooFitDriver to `RooFit::Evaluator` and make it public; As explained in 85c5cb4e3f, it was planned to make the RooFitDriver a public class to greatly improve the developer experience when working on the GPU backend of RooFit. Before, it was only possible to use the GPU backend in the likelihood evaluation, and with this commit it can be used from any context. This makes it possible to run the script listed in the description of PR #13389. To be more clear in what the new class does, which is purely focusing on the evaluation of computation graphs, it got renamed from RooFitDriver to `RooFit::Evaluator`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13530
https://github.com/root-project/root/issues/13531:2650,availability,Operat,Operating,2650," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:912,deployability,contain,contains,912,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:1341,deployability,contain,contains,1341,"sted it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `faster",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:1383,deployability,contain,containing,1383,"ger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCusto",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2500,deployability,version,version,2500," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2578,deployability,version,versions,2578," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2606,deployability,Instal,Installation,2606," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:869,energy efficiency,reduc,reduced,869,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2500,integrability,version,version,2500," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2578,integrability,version,versions,2578," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2500,modifiability,version,version,2500," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2578,modifiability,version,versions,2578," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:238,performance,memor,memory,238,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:761,performance,memor,memory,761,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:1975,performance,memor,memory,1975," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:45,safety,input,input,45,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:188,safety,input,input,188,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:343,safety,test,tested,343,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:1060,safety,input,input,1060,"everal directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2511,safety,test,tested,2511," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:343,testability,test,tested,343,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2511,testability,test,tested,2511," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:2690,testability,context,context,2690," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:33,usability,command,command,33,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:45,usability,input,input,45,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:132,usability,command,command,132,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:188,usability,input,input,188,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:238,usability,memor,memory,238,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:313,usability,command,command,313,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:695,usability,command,command,695,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:761,usability,memor,memory,761,"Huge RAM consumption of the hadd command for input files with several directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:1060,usability,input,input,1060,"everal directories ; Hello, . I would like to report that the `hadd` command is consuming a large amount of RAM when hadding input files that have several TDirectories. . The memory is increasing linearly as the directories are processed by the hadd command. . I think (I did not tested it fully), by looking at the `TFileMerger` class it seems the `target` directory is not deleted after having called . ```c++. target->SaveSelf(kTRUE);. ```. I guess the issue is coming from that . **This becomes a real issue as if you have a lot of histograms stored in different directories (which is the case of our analysis) then the hadding command is killed on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/issues/13531:1975,usability,memor,memory,1975," on lxplus. I have seen a hadd reaching 21 GB of memory used...**. **Here is a way to reproduce the issue and that shows the RAM consumption can be strongly reduced.**. I attach a `tar.gz` file which contains 2 scripts: . [haddIssue.tar.gz](https://github.com/root-project/root/files/12429530/haddIssue.tar.gz). * `createFile.cxx` for creating the input file which will be used to illustrate the issue . Compilation and execution (it takes ~10 min to create the file) . ```bash. g++ createFile.cxx -o createFile.exe -Wall $(root-config --cflags --glibs). ./createFile.exe. ``` . --> this will create the file `myFile.root` which contains 1000 directories, each directory containing `10k` histograms . . * `fasterCustomHadd.cxx` script which **allows doing a hadd but without a huge RAM consumption**. Compilation and execution . ```bash. g++ fasterCustomHadd.cxx -o fasterCustomHadd.exe -Wall $(root-config --cflags --glibs). ./fasterCustomHadd.exe -j 1 -f myOtherFile2.root myFile.root . ```. NB: please use the `-j 1` to request one thread as otherwise the script is creating partial hadded files . . A comparison with . ```. hadd -f myOtherFile.root myFile.root . ``` . Gives (see screen shots below): . * `hadd`: at the very end the RAM used is **`4.4 GB`** (memory increasing during the whole processing of directories) . * `fasterCustomHadd` the RAM used is only **`~205-210 MB`** and remains constant from the start to the end of the hadd. . . Many thanks in advance for the fix! . ### `hadd` RAM consumption . ![hadd_RAM](https://github.com/root-project/root/assets/29270790/6096548f-23c8-4de8-9445-43db76f5d95b). ### `fasterCustomHadd` RAM consumption . ![fasterCustomHadd_RAM](https://github.com/root-project/root/assets/29270790/7d45dbe5-5b46-40fc-a1e0-450d6df0c070). ### ROOT version. I tested both for ROOT root 6.20.06 and 6.24.08 . I believe all ROOT versions are affected . ### Installation method. Built from source. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13531
https://github.com/root-project/root/pull/13532:109,deployability,version,versions,109,"[PyROOT][9058] Implement TPython::ExecScript for Python 3; Two implementations are provided, i.e. for Python versions older than 3.8, for which PEP 587 is not in force, and newer. # This Pull request:. ## Changes or fixes:. Implements TPython::ExecFile for Python 3. ## Checklist:. - [v] tested changes locally. - [] updated the docs (if necessary). This PR fixes #9058 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:317,deployability,updat,updated,317,"[PyROOT][9058] Implement TPython::ExecScript for Python 3; Two implementations are provided, i.e. for Python versions older than 3.8, for which PEP 587 is not in force, and newer. # This Pull request:. ## Changes or fixes:. Implements TPython::ExecFile for Python 3. ## Checklist:. - [v] tested changes locally. - [] updated the docs (if necessary). This PR fixes #9058 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:109,integrability,version,versions,109,"[PyROOT][9058] Implement TPython::ExecScript for Python 3; Two implementations are provided, i.e. for Python versions older than 3.8, for which PEP 587 is not in force, and newer. # This Pull request:. ## Changes or fixes:. Implements TPython::ExecFile for Python 3. ## Checklist:. - [v] tested changes locally. - [] updated the docs (if necessary). This PR fixes #9058 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:109,modifiability,version,versions,109,"[PyROOT][9058] Implement TPython::ExecScript for Python 3; Two implementations are provided, i.e. for Python versions older than 3.8, for which PEP 587 is not in force, and newer. # This Pull request:. ## Changes or fixes:. Implements TPython::ExecFile for Python 3. ## Checklist:. - [v] tested changes locally. - [] updated the docs (if necessary). This PR fixes #9058 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:288,safety,test,tested,288,"[PyROOT][9058] Implement TPython::ExecScript for Python 3; Two implementations are provided, i.e. for Python versions older than 3.8, for which PEP 587 is not in force, and newer. # This Pull request:. ## Changes or fixes:. Implements TPython::ExecFile for Python 3. ## Checklist:. - [v] tested changes locally. - [] updated the docs (if necessary). This PR fixes #9058 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:317,safety,updat,updated,317,"[PyROOT][9058] Implement TPython::ExecScript for Python 3; Two implementations are provided, i.e. for Python versions older than 3.8, for which PEP 587 is not in force, and newer. # This Pull request:. ## Changes or fixes:. Implements TPython::ExecFile for Python 3. ## Checklist:. - [v] tested changes locally. - [] updated the docs (if necessary). This PR fixes #9058 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:317,security,updat,updated,317,"[PyROOT][9058] Implement TPython::ExecScript for Python 3; Two implementations are provided, i.e. for Python versions older than 3.8, for which PEP 587 is not in force, and newer. # This Pull request:. ## Changes or fixes:. Implements TPython::ExecFile for Python 3. ## Checklist:. - [v] tested changes locally. - [] updated the docs (if necessary). This PR fixes #9058 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13532:288,testability,test,tested,288,"[PyROOT][9058] Implement TPython::ExecScript for Python 3; Two implementations are provided, i.e. for Python versions older than 3.8, for which PEP 587 is not in force, and newer. # This Pull request:. ## Changes or fixes:. Implements TPython::ExecFile for Python 3. ## Checklist:. - [v] tested changes locally. - [] updated the docs (if necessary). This PR fixes #9058 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13532
https://github.com/root-project/root/pull/13533:143,availability,error,error,143,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:217,availability,failur,failure,217,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:643,availability,failur,failures,643,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:211,deployability,build,build,211,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:217,deployability,fail,failure,217,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:475,deployability,build,building,475,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:643,deployability,fail,failures,643,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:104,energy efficiency,Model,Model,104,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:181,energy efficiency,model,models,181,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:274,energy efficiency,model,model,274,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:415,energy efficiency,model,models,415,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:8,modifiability,Refact,Refactor,8,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:8,performance,Refactor,Refactor,8,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:143,performance,error,error,143,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:217,performance,failur,failure,217,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:643,performance,failur,failures,643,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:217,reliability,fail,failure,217,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:643,reliability,fail,failures,643,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:17,safety,Test,TestRModelParserPyTorch,17,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:116,safety,avoid,avoids,116,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:143,safety,error,error,143,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:262,safety,test,tests,262,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:429,safety,Test,TestRModelParserKeras,429,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:454,safety,avoid,avoid,454,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:628,safety,test,tests,628,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:637,safety,avoid,avoid,637,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:104,security,Model,Model,104,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:181,security,model,models,181,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:274,security,model,model,274,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:415,security,model,models,415,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:17,testability,Test,TestRModelParserPyTorch,17,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:262,testability,test,tests,262,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:429,testability,Test,TestRModelParserKeras,429,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:628,testability,test,tests,628,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13533:143,usability,error,error,143,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader; Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the . model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5. .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13533
https://github.com/root-project/root/pull/13534:596,reliability,pra,pragma,596,"[cling][NFC] Cleanup `DeclUnloader`; This pull request moves helper functions to an anonymous namespace at the beginning of the TU. **There are no functional changes in this PR**; instead it makes the code more readable. The follow-up PR, which is the important thing, fixes a number of issues in the handling of instantiation of member functions of templated classes, which should fix https://github.com/root-project/root/issues/10049 and all the issues mentioned there :rocket:. ## Changes or fixes:. - Move helper functions to anonymous namespace at the beginning of the TU. - Fix unmatched `#pragma clang diagnostic push`. - Fix wrong indentation in some parts of the file. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13534
https://github.com/root-project/root/pull/13534:609,reliability,diagno,diagnostic,609,"[cling][NFC] Cleanup `DeclUnloader`; This pull request moves helper functions to an anonymous namespace at the beginning of the TU. **There are no functional changes in this PR**; instead it makes the code more readable. The follow-up PR, which is the important thing, fixes a number of issues in the handling of instantiation of member functions of templated classes, which should fix https://github.com/root-project/root/issues/10049 and all the issues mentioned there :rocket:. ## Changes or fixes:. - Move helper functions to anonymous namespace at the beginning of the TU. - Fix unmatched `#pragma clang diagnostic push`. - Fix wrong indentation in some parts of the file. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13534
https://github.com/root-project/root/pull/13534:699,safety,test,tested,699,"[cling][NFC] Cleanup `DeclUnloader`; This pull request moves helper functions to an anonymous namespace at the beginning of the TU. **There are no functional changes in this PR**; instead it makes the code more readable. The follow-up PR, which is the important thing, fixes a number of issues in the handling of instantiation of member functions of templated classes, which should fix https://github.com/root-project/root/issues/10049 and all the issues mentioned there :rocket:. ## Changes or fixes:. - Move helper functions to anonymous namespace at the beginning of the TU. - Fix unmatched `#pragma clang diagnostic push`. - Fix wrong indentation in some parts of the file. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13534
https://github.com/root-project/root/pull/13534:609,testability,diagno,diagnostic,609,"[cling][NFC] Cleanup `DeclUnloader`; This pull request moves helper functions to an anonymous namespace at the beginning of the TU. **There are no functional changes in this PR**; instead it makes the code more readable. The follow-up PR, which is the important thing, fixes a number of issues in the handling of instantiation of member functions of templated classes, which should fix https://github.com/root-project/root/issues/10049 and all the issues mentioned there :rocket:. ## Changes or fixes:. - Move helper functions to anonymous namespace at the beginning of the TU. - Fix unmatched `#pragma clang diagnostic push`. - Fix wrong indentation in some parts of the file. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13534
https://github.com/root-project/root/pull/13534:699,testability,test,tested,699,"[cling][NFC] Cleanup `DeclUnloader`; This pull request moves helper functions to an anonymous namespace at the beginning of the TU. **There are no functional changes in this PR**; instead it makes the code more readable. The follow-up PR, which is the important thing, fixes a number of issues in the handling of instantiation of member functions of templated classes, which should fix https://github.com/root-project/root/issues/10049 and all the issues mentioned there :rocket:. ## Changes or fixes:. - Move helper functions to anonymous namespace at the beginning of the TU. - Fix unmatched `#pragma clang diagnostic push`. - Fix wrong indentation in some parts of the file. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13534
https://github.com/root-project/root/pull/13534:61,usability,help,helper,61,"[cling][NFC] Cleanup `DeclUnloader`; This pull request moves helper functions to an anonymous namespace at the beginning of the TU. **There are no functional changes in this PR**; instead it makes the code more readable. The follow-up PR, which is the important thing, fixes a number of issues in the handling of instantiation of member functions of templated classes, which should fix https://github.com/root-project/root/issues/10049 and all the issues mentioned there :rocket:. ## Changes or fixes:. - Move helper functions to anonymous namespace at the beginning of the TU. - Fix unmatched `#pragma clang diagnostic push`. - Fix wrong indentation in some parts of the file. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13534
https://github.com/root-project/root/pull/13534:510,usability,help,helper,510,"[cling][NFC] Cleanup `DeclUnloader`; This pull request moves helper functions to an anonymous namespace at the beginning of the TU. **There are no functional changes in this PR**; instead it makes the code more readable. The follow-up PR, which is the important thing, fixes a number of issues in the handling of instantiation of member functions of templated classes, which should fix https://github.com/root-project/root/issues/10049 and all the issues mentioned there :rocket:. ## Changes or fixes:. - Move helper functions to anonymous namespace at the beginning of the TU. - Fix unmatched `#pragma clang diagnostic push`. - Fix wrong indentation in some parts of the file. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13534
https://github.com/root-project/root/pull/13535:9,deployability,updat,update,9,[webgui] update three.js to r155 [skip-ci]; 1. Update jsroot with several other fixes. 2. Adjust eve7 where three.js is used.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13535
https://github.com/root-project/root/pull/13535:47,deployability,Updat,Update,47,[webgui] update three.js to r155 [skip-ci]; 1. Update jsroot with several other fixes. 2. Adjust eve7 where three.js is used.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13535
https://github.com/root-project/root/pull/13535:9,safety,updat,update,9,[webgui] update three.js to r155 [skip-ci]; 1. Update jsroot with several other fixes. 2. Adjust eve7 where three.js is used.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13535
https://github.com/root-project/root/pull/13535:47,safety,Updat,Update,47,[webgui] update three.js to r155 [skip-ci]; 1. Update jsroot with several other fixes. 2. Adjust eve7 where three.js is used.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13535
https://github.com/root-project/root/pull/13535:9,security,updat,update,9,[webgui] update three.js to r155 [skip-ci]; 1. Update jsroot with several other fixes. 2. Adjust eve7 where three.js is used.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13535
https://github.com/root-project/root/pull/13535:47,security,Updat,Update,47,[webgui] update three.js to r155 [skip-ci]; 1. Update jsroot with several other fixes. 2. Adjust eve7 where three.js is used.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13535
https://github.com/root-project/root/issues/13536:824,availability,operat,operate,824,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:16,deployability,modul,module,16,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:151,deployability,modul,modules,151,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:223,deployability,API,APIs,223,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:239,deployability,modul,module,239,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:390,deployability,modul,modules,390,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:445,deployability,depend,depend,445,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:578,deployability,depend,dependencies,578,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:616,deployability,modul,modules,616,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:706,deployability,modul,modules,706,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:767,deployability,modul,modules,767,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:866,deployability,depend,depended,866,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:917,deployability,modul,modules,917,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1475,deployability,modul,modules,1475,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1501,deployability,modul,module,1501,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:210,integrability,encapsulat,encapsulated,210,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:223,integrability,API,APIs,223,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:445,integrability,depend,depend,445,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:578,integrability,depend,dependencies,578,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:866,integrability,depend,depended,866,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1524,integrability,event,eventually,1524,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:23,interoperability,compatib,compatibility,23,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:223,interoperability,API,APIs,223,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:265,interoperability,specif,specific,265,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:16,modifiability,modul,module,16,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:151,modifiability,modul,modules,151,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:210,modifiability,encapsul,encapsulated,210,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:239,modifiability,modul,module,239,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:390,modifiability,modul,modules,390,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:445,modifiability,depend,depend,445,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:578,modifiability,depend,dependencies,578,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:616,modifiability,modul,modules,616,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:706,modifiability,modul,modules,706,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:767,modifiability,modul,modules,767,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:866,modifiability,depend,depended,866,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:917,modifiability,modul,modules,917,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1475,modifiability,modul,modules,1475,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1501,modifiability,modul,module,1501,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:16,safety,modul,module,16,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:151,safety,modul,modules,151,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:239,safety,modul,module,239,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:390,safety,modul,modules,390,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:445,safety,depend,depend,445,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:578,safety,depend,dependencies,578,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:616,safety,modul,modules,616,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:706,safety,modul,modules,706,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:767,safety,modul,modules,767,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:866,safety,depend,depended,866,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:917,safety,modul,modules,917,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1082,safety,compl,complexity,1082,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1475,safety,modul,modules,1475,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1501,safety,modul,module,1501,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1082,security,compl,complexity,1082,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:173,testability,context,context,173,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:445,testability,depend,depend,445,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:578,testability,depend,dependencies,578,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:866,testability,depend,depended,866,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1221,testability,context,context,1221,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:1334,testability,verif,verified,1334,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/issues/13536:322,usability,interact,interactions,322,"Request _C++20_ module compatibility with ROOT 6.30/00; ### Feature description. As C++20 goes mainstream, there are many reasons to start using C++20 modules in a non-ROOT context to provide well-designed and encapsulated APIs. Generated module files are compiler-specific, which would seem likely to lead to issues with interactions between Cling-generated PCM dictionaries and any C++20 modules used by the code upon which those dictionaries depend. My request is for the upcoming ROOT with Clang 16 to be able to accommodate the generation and use of PCM dictionaries where dependencies thereof are or use C++20 modules. This may or may not involve transitioning PCM dictionary generation to use C++20 modules as opposed to Clang's original implementation of C++ modules. ### Alternatives considered. Short of having to operate under the constraint that no code depended upon by a ROOT dictionary be or use C++20 modules at any level (direct or indirect), I do not see an alternative to providing the requested feature, although it is certainly possible I am overestimating the complexity of the situation and that the feature request either is already implemented or, ""just works"" already in 6.28/04. ### Additional context. In dealing with https://github.com/root-project/root/issues/13461 it was suggested by @pcanal and later verified _in vitro_ that using PCM dictionaries vs `.rootmap` dictionaries would be a viable workaround. This led to thoughts about ROOT C++ modules vs non-ROOT C++20 module generation, and eventually this feature request.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13536
https://github.com/root-project/root/pull/13537:140,deployability,version,version,140,[RF][HS3] Fix dicts instead of lists option and general HistFactory test improvements; # This Pull request:. Fixes a bug that made the dict-version crash for HistFactory setups. ## Changes or fixes:. - make sure modifiers are always kept as a list such as to avoid collisions between HistoSys and OverallSys with the same name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13537
https://github.com/root-project/root/pull/13537:140,integrability,version,version,140,[RF][HS3] Fix dicts instead of lists option and general HistFactory test improvements; # This Pull request:. Fixes a bug that made the dict-version crash for HistFactory setups. ## Changes or fixes:. - make sure modifiers are always kept as a list such as to avoid collisions between HistoSys and OverallSys with the same name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13537
https://github.com/root-project/root/pull/13537:140,modifiability,version,version,140,[RF][HS3] Fix dicts instead of lists option and general HistFactory test improvements; # This Pull request:. Fixes a bug that made the dict-version crash for HistFactory setups. ## Changes or fixes:. - make sure modifiers are always kept as a list such as to avoid collisions between HistoSys and OverallSys with the same name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13537
https://github.com/root-project/root/pull/13537:68,safety,test,test,68,[RF][HS3] Fix dicts instead of lists option and general HistFactory test improvements; # This Pull request:. Fixes a bug that made the dict-version crash for HistFactory setups. ## Changes or fixes:. - make sure modifiers are always kept as a list such as to avoid collisions between HistoSys and OverallSys with the same name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13537
https://github.com/root-project/root/pull/13537:259,safety,avoid,avoid,259,[RF][HS3] Fix dicts instead of lists option and general HistFactory test improvements; # This Pull request:. Fixes a bug that made the dict-version crash for HistFactory setups. ## Changes or fixes:. - make sure modifiers are always kept as a list such as to avoid collisions between HistoSys and OverallSys with the same name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13537
https://github.com/root-project/root/pull/13537:212,security,modif,modifiers,212,[RF][HS3] Fix dicts instead of lists option and general HistFactory test improvements; # This Pull request:. Fixes a bug that made the dict-version crash for HistFactory setups. ## Changes or fixes:. - make sure modifiers are always kept as a list such as to avoid collisions between HistoSys and OverallSys with the same name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13537
https://github.com/root-project/root/pull/13537:68,testability,test,test,68,[RF][HS3] Fix dicts instead of lists option and general HistFactory test improvements; # This Pull request:. Fixes a bug that made the dict-version crash for HistFactory setups. ## Changes or fixes:. - make sure modifiers are always kept as a list such as to avoid collisions between HistoSys and OverallSys with the same name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13537
https://github.com/root-project/root/pull/13538:32,deployability,integr,integrals,32,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:119,deployability,depend,depends,119,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:163,deployability,observ,observables,163,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:253,deployability,observ,observables,253,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:412,deployability,integr,integrals,412,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:32,integrability,integr,integrals,32,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:60,integrability,Batch,BatchMode,60,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:82,integrability,compon,components,82,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:104,integrability,compon,component,104,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:119,integrability,depend,depends,119,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:132,integrability,sub,subset,132,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:217,integrability,compon,component,217,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:325,integrability,interfac,interface,325,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:412,integrability,integr,integrals,412,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:32,interoperability,integr,integrals,32,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:82,interoperability,compon,components,82,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:104,interoperability,compon,component,104,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:217,interoperability,compon,component,217,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:325,interoperability,interfac,interface,325,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:412,interoperability,integr,integrals,412,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:443,interoperability,specif,specific,443,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:32,modifiability,integr,integrals,32,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:82,modifiability,compon,components,82,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:104,modifiability,compon,component,104,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:119,modifiability,depend,depends,119,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:217,modifiability,compon,component,217,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:325,modifiability,interfac,interface,325,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:412,modifiability,integr,integrals,412,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:60,performance,Batch,BatchMode,60,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:32,reliability,integr,integrals,32,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:412,reliability,integr,integrals,412,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:5,safety,Avoid,Avoid,5,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:119,safety,depend,depends,119,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:274,safety,valid,validated,274,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:298,safety,test,test,298,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:672,safety,test,tests,672,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:32,security,integr,integrals,32,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:274,security,validat,validated,274,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:412,security,integr,integrals,412,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:32,testability,integr,integrals,32,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:119,testability,depend,depends,119,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:163,testability,observ,observables,163,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:197,testability,understand,understand,197,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:253,testability,observ,observables,253,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:293,testability,unit,unit,293,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:298,testability,test,test,298,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:412,testability,integr,integrals,412,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13538:672,testability,test,tests,672,"[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode; If you add components where each component only depends on a subset of the union set of the observables, the RooAddPdf should understand that the component is uniform in the missing observables. This is validated in a new unit test for both the getVal() interface and evaluation with the RooFit::Evaluator. To make this work, the projection integrals are evaluated for no specific normalization set in `RooAddPdf::computeBatch()` the supplementary normalization terms are already included in `RooAddPdf::compileForNormSet()` and they should not be double counted. This commit also makes the RooAddPdf tests less verbose by using more the RooWorkspace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13538
https://github.com/root-project/root/pull/13539:150,deployability,automat,automatically,150,"Set kMustCleanup bit for all pad primitives when streaming; When primitive add to the pad via `TObjectt::AppendPad()` method, . `kMustCleanup` bit is automatically set for that object. . But when primitives read from the IO buffer,. TH1::Streamer reset `kMustCleanup` in IO. This has side effect afterwards, when pad is deleted during ROOT shutdown and when pad has same histogram twice in list of primitives. Replaces #13506 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13539
https://github.com/root-project/root/pull/13539:224,integrability,buffer,buffer,224,"Set kMustCleanup bit for all pad primitives when streaming; When primitive add to the pad via `TObjectt::AppendPad()` method, . `kMustCleanup` bit is automatically set for that object. . But when primitives read from the IO buffer,. TH1::Streamer reset `kMustCleanup` in IO. This has side effect afterwards, when pad is deleted during ROOT shutdown and when pad has same histogram twice in list of primitives. Replaces #13506 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13539
https://github.com/root-project/root/pull/13539:150,testability,automat,automatically,150,"Set kMustCleanup bit for all pad primitives when streaming; When primitive add to the pad via `TObjectt::AppendPad()` method, . `kMustCleanup` bit is automatically set for that object. . But when primitives read from the IO buffer,. TH1::Streamer reset `kMustCleanup` in IO. This has side effect afterwards, when pad is deleted during ROOT shutdown and when pad has same histogram twice in list of primitives. Replaces #13506 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13539
https://github.com/root-project/root/pull/13540:42,usability,help,help,42,[skip-ci] clarify option -f; Improve hadd help as requested here: https://github.com/root-project/root/issues/13445.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13540
https://github.com/root-project/root/pull/13541:253,deployability,updat,updated,253,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe; # This Pull request:. ## Changes or fixes:. Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11580 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:66,safety,safe,safe,66,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe; # This Pull request:. ## Changes or fixes:. Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11580 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:163,safety,safe,safe,163,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe; # This Pull request:. ## Changes or fixes:. Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11580 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:179,safety,test,test,179,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe; # This Pull request:. ## Changes or fixes:. Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11580 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:223,safety,test,tested,223,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe; # This Pull request:. ## Changes or fixes:. Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11580 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:253,safety,updat,updated,253,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe; # This Pull request:. ## Changes or fixes:. Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11580 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:253,security,updat,updated,253,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe; # This Pull request:. ## Changes or fixes:. Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11580 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:179,testability,test,test,179,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe; # This Pull request:. ## Changes or fixes:. Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11580 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13541:223,testability,test,tested,223,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe; # This Pull request:. ## Changes or fixes:. Makes TDatabasePDG::GetParticle methods thread safe and adds a test for this feature. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11580 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13541
https://github.com/root-project/root/pull/13542:555,availability,Error,Error,555,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:614,availability,avail,available,614,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:314,deployability,fail,fails,314,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:420,integrability,configur,configured,420,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:454,integrability,messag,message,454,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:454,interoperability,messag,message,454,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:420,modifiability,configur,configured,420,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:689,modifiability,paramet,parameter,689,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:256,performance,perform,performed,256,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:555,performance,Error,Error,555,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:314,reliability,fail,fails,314,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:614,reliability,availab,available,614,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:272,safety,avoid,avoid,272,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:555,safety,Error,Error,555,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:614,safety,avail,available,614,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:7,security,control,control,7,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:420,security,configur,configured,420,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:614,security,availab,available,614,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:7,testability,control,control,7,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:293,testability,simpl,simple,293,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:256,usability,perform,performed,256,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:293,usability,simpl,simple,293,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/pull/13542:555,usability,Error,Error,555,"[http] control used threads number, limit websocket connections; civetweb server creates pre-coinfigured number of threads and this number cannot be change once server running. Each active websocket consumes one thread, where all communication handling is performed. . To avoid situation that simple http requests fails just while websockets blocked all threads number of. websocket connection will be limited by 90% of configured threads. Issue warning message from `TCivetweb.cxx` when websocket connection refused because of threads number like:. ```. Error in <TCivetweb::WebSocketHandler>: Only 2 threads are available, reject connection request for win3. Increase WebGui.HttpThreads parameter in rootrc, now it is 7. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13542
https://github.com/root-project/root/issues/13543:486,availability,Down,Download,486,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:772,availability,down,down,772,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:914,availability,Operat,Operating,914,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:844,deployability,version,version,844,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:884,deployability,Instal,Installation,884,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:241,integrability,discover,discovered,241,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:844,integrability,version,version,844,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:76,interoperability,XML,XML,76,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:241,interoperability,discover,discovered,241,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:844,modifiability,version,version,844,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:784,security,checksum,checksum,784,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:952,testability,context,context,952,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:241,usability,discov,discovered,241,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:427,usability,behavi,behavior,427,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/issues/13543:745,usability,command,command,745,"`rootcling --genreflex` ignores `<field... transient=""true""/>` in selection XML; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. After following advice to transition from `genreflex` to `rootcling --genreflex`, we discovered that IO dictionaries generated for classes with transient (non-persistent) data members actually included stream information for those data members, in contrast both with the behavior of `genreflex` and our desire. ### Reproducer. 1. Download, unpack and `cd` into the top level directory of [rootcling-genreflex-transient-bug.tgz](https://github.com/root-project/root/files/12439967/rootcling-genreflex-transient-bug.tgz). 2. `./makeit good`. 3. `./makeit`. The output of the final `ROOT -b` command should be the same down to the checksum reported if the problem were not present. ### ROOT version. `ROOT 6.28/04@30598a8430`. ### Installation method. UPS. ### Operating system. SL7. ### Additional context. Compiled with GCC 13.1.0/C++20. May be related to the (insufficiently detailed) #13361.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13543
https://github.com/root-project/root/pull/13545:72,deployability,updat,updated,72,[NFC] fix typo docu; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/13513.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13545
https://github.com/root-project/root/pull/13545:42,safety,test,tested,42,[NFC] fix typo docu; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/13513.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13545
https://github.com/root-project/root/pull/13545:72,safety,updat,updated,72,[NFC] fix typo docu; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/13513.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13545
https://github.com/root-project/root/pull/13545:72,security,updat,updated,72,[NFC] fix typo docu; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/13513.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13545
https://github.com/root-project/root/pull/13545:42,testability,test,tested,42,[NFC] fix typo docu; ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/13513.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13545
https://github.com/root-project/root/pull/13546:550,deployability,updat,updated,550,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:181,energy efficiency,schedul,scheduled,181,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:359,energy efficiency,batter,battery,359,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:417,energy efficiency,schedul,scheduled,417,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:93,integrability,event,event,93,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:126,integrability,messag,message,126,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:487,integrability,event,event,487,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:126,interoperability,messag,message,126,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:181,performance,schedul,scheduled,181,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:231,performance,memor,memory,231,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:417,performance,schedul,scheduled,417,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:35,safety,except,exception,35,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:69,safety,Except,Exceptions,69,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:354,safety,test,test,354,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:456,safety,except,exception,456,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:520,safety,test,tested,520,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:550,safety,updat,updated,550,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:550,security,updat,updated,550,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:354,testability,test,test,354,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:520,testability,test,tested,520,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:231,usability,memor,memory,231,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13546:333,usability,progress,progress,333,[DF][10484] Finalize actions if an exception occurs during evt loop; Exceptions thrown in an event loop are caught to print a message. This catch block is leveraged to finalize all scheduled actions in order to properly deallocate memory where needed and save the partial results which are obtained. # This Pull request:. Is work in progress and lacks a test battery. ## Changes or fixes:. Allows to finalize actions scheduled in a RDF analysis in case an exception is thrown during the event loop. ## Checklist:. - [V] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #10484.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13546
https://github.com/root-project/root/pull/13547:7,usability,Support,Support,7,[REve] Support 3 different marker styles in REvePointSet; Include marker style in REvePointSet rendering.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13547
https://github.com/root-project/root/issues/13548:548,availability,error,error,548,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:828,availability,Operat,Operating,828,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:15,deployability,instal,installation,15,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:777,deployability,version,version,777,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:796,deployability,Instal,Installation,796,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:777,integrability,version,version,777,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:777,modifiability,version,version,777,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:548,performance,error,error,548,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:9,safety,test,test,9,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:181,safety,test,test-cannot-be-found,181,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:548,safety,error,error,548,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:605,safety,test,test,605,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:664,safety,test,test,664,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:710,safety,test,test,710,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:9,testability,test,test,9,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:181,testability,test,test-cannot-be-found,181,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:605,testability,test,test,605,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:664,testability,test,test,664,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:710,testability,test,test,710,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:878,testability,context,context,878,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/issues/13548:548,usability,error,error,548,"Missing `test` installation folder in $ROOTSYS; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. As first reported at https://root-forum.cern.ch/t/rootsys-test-cannot-be-found/56151 . Running the `copytree3.C` tutorial produces the following. ```. $: root $ROOTSYS/tutorials/tree/copytree3.C . root [0] . Processing /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C... In file included from input_line_8:1:. /home/vpadulan/programs/mambaforge/envs/root-628/tutorials/tree/copytree3.C:14:1: fatal error: '/home/vpadulan/programs/mambaforge/envs/root-628/test/libEvent.so' file not found. R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so). ```. In fact, there is no `test` folder in the $ROOTSYS . ### Reproducer. See above. ### ROOT version. 6.28. ### Installation method. conda. ### Operating system. Linux Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13548
https://github.com/root-project/root/pull/13549:199,deployability,updat,updated,199,[ntuple] specifications.md: fully describe a Compression block; This pull request extends the description of a ROOT compression block in the RNTuple binary format specification. ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13549
https://github.com/root-project/root/pull/13549:9,interoperability,specif,specifications,9,[ntuple] specifications.md: fully describe a Compression block; This pull request extends the description of a ROOT compression block in the RNTuple binary format specification. ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13549
https://github.com/root-project/root/pull/13549:156,interoperability,format,format,156,[ntuple] specifications.md: fully describe a Compression block; This pull request extends the description of a ROOT compression block in the RNTuple binary format specification. ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13549
https://github.com/root-project/root/pull/13549:163,interoperability,specif,specification,163,[ntuple] specifications.md: fully describe a Compression block; This pull request extends the description of a ROOT compression block in the RNTuple binary format specification. ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13549
https://github.com/root-project/root/pull/13549:82,modifiability,exten,extends,82,[ntuple] specifications.md: fully describe a Compression block; This pull request extends the description of a ROOT compression block in the RNTuple binary format specification. ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13549
https://github.com/root-project/root/pull/13549:199,safety,updat,updated,199,[ntuple] specifications.md: fully describe a Compression block; This pull request extends the description of a ROOT compression block in the RNTuple binary format specification. ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13549
https://github.com/root-project/root/pull/13549:199,security,updat,updated,199,[ntuple] specifications.md: fully describe a Compression block; This pull request extends the description of a ROOT compression block in the RNTuple binary format specification. ## Checklist:. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13549
https://github.com/root-project/root/pull/13550:525,availability,Operat,Operators,525,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:619,availability,Sli,Slice,619,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:717,availability,operat,operator,717,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:168,energy efficiency,GPU,GPUs,168,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:404,energy efficiency,Current,Currently,404,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:215,integrability,rout,routines,215,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:599,integrability,Batch,BatchNormalization,599,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:85,modifiability,exten,extends,85,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:168,performance,GPU,GPUs,168,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:599,performance,Batch,BatchNormalization,599,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:619,reliability,Sli,Slice,619,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:544,safety,test,tested,544,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:544,testability,test,tested,544,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:444,usability,support,supported,444,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/pull/13550:739,usability,support,supported,739,"[TMVA-SOFIE] Added functionality for SYCL code generation; ## SOFIE-SYCL. SOFIE-SYCL extends SOFIE functionality so that SYCL inference code can be generated for Intel GPUs using Intel oneAPI libraries for the BLAS routines. This functionality is already enabled by default when -Dtmva-sofie=On. The inference code should be compiled with a SYCL compiler and linked against the Intel oneAPI MKL library. Currently, the only SYCL Implementation supported is IntelDPCPP. The correctness of the SYCL implementations of the ONNX Operators has been tested with the SOFIE gtests. Also, missing gtests for BatchNormalization, Slice, Transpose have been added. In addition, the transpose convolution for 3d (ConvTranspose3d) operator that was not supported before has been added for both C++ and SYCL inference code, as well as the respective gtest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13550
https://github.com/root-project/root/issues/13551:314,availability,Operat,Operating,314,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/issues/13551:260,deployability,version,version,260,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/issues/13551:276,deployability,Instal,Installation,276,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/issues/13551:260,integrability,version,version,260,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/issues/13551:260,modifiability,version,version,260,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/issues/13551:58,performance,memor,memory,58,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/issues/13551:208,performance,memor,memory,208,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/issues/13551:359,testability,context,context,359,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/issues/13551:58,usability,memor,memory,58,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/issues/13551:208,usability,memor,memory,208,[df] Creation of Snapshot actions writes to uninitialized memory ; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. We were writing and then reading back booleans from uninitialized memory (just reserved). ### Reproducer. -. ### ROOT version. -. ### Installation method. From source. ### Operating system. Some Linux. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13551
https://github.com/root-project/root/pull/13552:17,deployability,Updat,UpdateAsync,17,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:70,deployability,updat,update,70,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:115,deployability,updat,update,115,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:185,deployability,updat,update,185,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:303,deployability,log,logical,303,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:362,deployability,Updat,Update,362,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:50,integrability,asynchron,asynchronous,50,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:41,performance,perform,performs,41,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:50,performance,asynch,asynchronous,50,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:317,performance,lock,locks,317,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:374,performance,perform,performed,374,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:161,reliability,doe,does,161,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:17,safety,Updat,UpdateAsync,17,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:70,safety,updat,update,70,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:115,safety,updat,update,115,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:185,safety,updat,update,185,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:195,safety,compl,completed,195,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:206,safety,Avoid,Avoids,206,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:297,safety,avoid,avoid,297,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:303,safety,log,logical,303,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:362,safety,Updat,Update,362,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:17,security,Updat,UpdateAsync,17,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:70,security,updat,update,70,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:115,security,updat,update,115,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:185,security,updat,update,185,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:195,security,compl,completed,195,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:303,security,log,logical,303,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:317,security,lock,locks,317,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:362,security,Updat,Update,362,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:303,testability,log,logical,303,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:41,usability,perform,performs,41,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:287,usability,widget,widget,287,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13552:374,usability,perform,performed,374,"Introduce `TPad::UpdateAsync` method; It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas. on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical. dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13552
https://github.com/root-project/root/pull/13553:554,deployability,updat,updated,554,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:44,energy efficiency,model,modelConfig,44,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:156,energy efficiency,model,modelConfigs,156,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:381,energy efficiency,model,modelConfigs,381,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:442,energy efficiency,measur,measurement,442,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:67,performance,I/O,I/O,67,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:434,performance,perform,perform,434,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:524,safety,test,tested,524,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:554,safety,updat,updated,554,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:44,security,model,modelConfig,44,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:156,security,model,modelConfigs,156,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:381,security,model,modelConfigs,381,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:554,security,updat,updated,554,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:524,testability,test,tested,524,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13553:434,usability,perform,perform,434,[PyROOT][RF] Feature to import datasets and modelConfig using JSON I/O and a new tutorial; # This Pull request: . - Adds the feature to import datasets and modelConfigs to RooWorkspace using the `RooJSONFactoryWSTool`. - Adds a new Pythonic tutorial for fitting and plotting using single-channel data. ## Changes:. - `RooJSONFactoryWSTool` to import binned & unbinned datasets and modelConfigs. - Adds a `FitModelAndPlot` overload to perform measurement using RooWorkspace. - A new tutorial `hf101.py`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13553
https://github.com/root-project/root/pull/13554:59,interoperability,standard,standard,59,Backport CEF and Arrow fixes [6.28][skip-ci]; Now CEF uses standard types like `int64_t` instead of `int64`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13554
https://github.com/root-project/root/pull/13555:369,deployability,updat,updated,369,"[RF][HS3] RooFormulaVar at syntax bug; # This Pull request:. Fixes a problem where RooFormulaVar instances using the `@1`, `@2` syntax were not properly exported. ## Changes or fixes:. Variables referenced by `@N` in the expression of RooFormulaVar or RooGenericPdf are now replaced by the variable names upon export. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13555
https://github.com/root-project/root/pull/13555:185,modifiability,Variab,Variables,185,"[RF][HS3] RooFormulaVar at syntax bug; # This Pull request:. Fixes a problem where RooFormulaVar instances using the `@1`, `@2` syntax were not properly exported. ## Changes or fixes:. Variables referenced by `@N` in the expression of RooFormulaVar or RooGenericPdf are now replaced by the variable names upon export. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13555
https://github.com/root-project/root/pull/13555:290,modifiability,variab,variable,290,"[RF][HS3] RooFormulaVar at syntax bug; # This Pull request:. Fixes a problem where RooFormulaVar instances using the `@1`, `@2` syntax were not properly exported. ## Changes or fixes:. Variables referenced by `@N` in the expression of RooFormulaVar or RooGenericPdf are now replaced by the variable names upon export. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13555
https://github.com/root-project/root/pull/13555:339,safety,test,tested,339,"[RF][HS3] RooFormulaVar at syntax bug; # This Pull request:. Fixes a problem where RooFormulaVar instances using the `@1`, `@2` syntax were not properly exported. ## Changes or fixes:. Variables referenced by `@N` in the expression of RooFormulaVar or RooGenericPdf are now replaced by the variable names upon export. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13555
https://github.com/root-project/root/pull/13555:369,safety,updat,updated,369,"[RF][HS3] RooFormulaVar at syntax bug; # This Pull request:. Fixes a problem where RooFormulaVar instances using the `@1`, `@2` syntax were not properly exported. ## Changes or fixes:. Variables referenced by `@N` in the expression of RooFormulaVar or RooGenericPdf are now replaced by the variable names upon export. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13555
https://github.com/root-project/root/pull/13555:369,security,updat,updated,369,"[RF][HS3] RooFormulaVar at syntax bug; # This Pull request:. Fixes a problem where RooFormulaVar instances using the `@1`, `@2` syntax were not properly exported. ## Changes or fixes:. Variables referenced by `@N` in the expression of RooFormulaVar or RooGenericPdf are now replaced by the variable names upon export. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13555
https://github.com/root-project/root/pull/13555:339,testability,test,tested,339,"[RF][HS3] RooFormulaVar at syntax bug; # This Pull request:. Fixes a problem where RooFormulaVar instances using the `@1`, `@2` syntax were not properly exported. ## Changes or fixes:. Variables referenced by `@N` in the expression of RooFormulaVar or RooGenericPdf are now replaced by the variable names upon export. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13555
https://github.com/root-project/root/pull/13556:60,deployability,version,version,60,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:60,integrability,version,version,60,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:342,integrability,compon,components,342,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:770,integrability,event,event,770,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:342,interoperability,compon,components,342,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:60,modifiability,version,version,60,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:261,modifiability,variab,variables,261,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:342,modifiability,compon,components,342,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:107,performance,Perform,Performance,107,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:217,safety,Avoid,Avoid,217,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:255,safety,input,input,255,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:227,security,hardcod,hardcoded,227,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:107,usability,Perform,Performance,107,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13556:255,usability,input,input,255,"[RF] Improve the implementation of the RooBatchCompute CUDA version; These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device. 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:. https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13556
https://github.com/root-project/root/pull/13557:1,energy efficiency,core,core,1,[core] Do not provide our own strlcpy if glibc >= 2.38 (v6.26); Backport of https://github.com/root-project/root/pull/13393.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13557
https://github.com/root-project/root/pull/13558:390,deployability,updat,updated,390,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:5,integrability,Translat,Translated,5,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:5,interoperability,Translat,Translated,5,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:97,interoperability,Standard,StandardProfileInspectorDemo,97,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:133,interoperability,Standard,StandardProfileLikelihoodDemo,133,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:172,interoperability,Standard,StandardProfileInspectorDemo,172,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:207,interoperability,Standard,StandardProfileLikelihoodDemo,207,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:261,interoperability,Standard,StandardProfileInspectorDemo,261,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:429,interoperability,format,formatted,429,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:360,safety,test,tested,360,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:390,safety,updat,updated,390,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:390,security,updat,updated,390,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13558:360,testability,test,tested,360,"[RF] Translated 2 RooStats tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Adds StandardProfileInspectorDemo.py and StandardProfileLikelihoodDemo.py, from StandardProfileInspectorDemo.C and StandardProfileLikelihoodDemo.C. Also fixes a typo in StandardProfileInspectorDemo.C and a comment in TMVA_Higgs_Classification.py. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] formatted with black (`black --line-length=120 <tutorial file>.py`). This PR contributes to #8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13558
https://github.com/root-project/root/pull/13559:66,availability,avail,available,66,Make TNetXNGFile::Close() reentrant; Check if fFile pointer still available. Fixes #13503,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13559
https://github.com/root-project/root/pull/13559:66,reliability,availab,available,66,Make TNetXNGFile::Close() reentrant; Check if fFile pointer still available. Fixes #13503,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13559
https://github.com/root-project/root/pull/13559:66,safety,avail,available,66,Make TNetXNGFile::Close() reentrant; Check if fFile pointer still available. Fixes #13503,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13559
https://github.com/root-project/root/pull/13559:66,security,availab,available,66,Make TNetXNGFile::Close() reentrant; Check if fFile pointer still available. Fixes #13503,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13559
https://github.com/root-project/root/pull/13559:18,usability,Close,Close,18,Make TNetXNGFile::Close() reentrant; Check if fFile pointer still available. Fixes #13503,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13559
https://github.com/root-project/root/issues/13560:1259,availability,Operat,Operating,1259,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1193,deployability,version,version,1193,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1207,deployability,version,version,1207,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1229,deployability,Instal,Installation,1229,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1093,energy efficiency,Draw,Draw,1093,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1193,integrability,version,version,1193,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1207,integrability,version,version,1207,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1193,modifiability,version,version,1193,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1207,modifiability,version,version,1207,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:717,performance,Content,Contents,717,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:262,safety,compl,complaines,262,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1113,safety,Test,Test,1113,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:262,security,compl,complaines,262,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:323,testability,understand,understand,323,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1113,testability,Test,Test,1113,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/issues/13560:1301,testability,context,context,1301,"Printing pad to pdf is missing endobj in some cases; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. I played around with printing a canvas to pdf, using the EmbedFonts option or not. During EmbedFonts, where ghostcsript is called, it complaines about missing endobj in the pdf file. As far as i understand it is just a warning and the output still looks correct. . Still, no need for this warning. Why not just print the endobj? . Also: ghostscript option -dUseCIEColor is deprecated for gs > 9.11 One could remove this option in the print. Changes to the ROOT code: . graf2d/postscript/src/TPDF.cxx:. Add `PrintStr(""endobj@"");` at the end of the `""/Title (Page""` blocks and the` ""/Title (Contents""` block. graf2d/gpad/src/TPad.cxx:. remove option `-dUseCIEColor` from the gs system call. After this two changes, everything is fine for me again. No more warnings. And output looks still the same. ### Reproducer. ROOT macro: (Macro.cpp). ```. {. TCanvas *c1=new TCanvas(""c1"",""c1"");. double *a=new double[3];. a[0]=1;a[1]=2;a[2]=3;. TGraph *g=new TGraph(3,a,a);. g->Draw();. c1->Print(""Test.pdf"",""EmbedFonts"");. }. ```. Run with: `root -l -b -q Macro.cpp`. ### ROOT version. ROOT version: 6.24/08. ### Installation method. yum. ### Operating system. CentOS7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13560
https://github.com/root-project/root/pull/13561:83,availability,avail,available,83,Make TNetXNGFile::Close() reentrant [6.28] [skip-ci]; Check if fFile pointer still available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13561
https://github.com/root-project/root/pull/13561:83,reliability,availab,available,83,Make TNetXNGFile::Close() reentrant [6.28] [skip-ci]; Check if fFile pointer still available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13561
https://github.com/root-project/root/pull/13561:83,safety,avail,available,83,Make TNetXNGFile::Close() reentrant [6.28] [skip-ci]; Check if fFile pointer still available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13561
https://github.com/root-project/root/pull/13561:83,security,availab,available,83,Make TNetXNGFile::Close() reentrant [6.28] [skip-ci]; Check if fFile pointer still available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13561
https://github.com/root-project/root/pull/13561:18,usability,Close,Close,18,Make TNetXNGFile::Close() reentrant [6.28] [skip-ci]; Check if fFile pointer still available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13561
https://github.com/root-project/root/pull/13562:4,safety,test,testing,4,Add testing for TNetXNGFile; Especially for double Close calling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13562
https://github.com/root-project/root/pull/13562:4,testability,test,testing,4,Add testing for TNetXNGFile; Especially for double Close calling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13562
https://github.com/root-project/root/pull/13562:51,usability,Close,Close,51,Add testing for TNetXNGFile; Especially for double Close calling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13562
https://github.com/root-project/root/pull/13563:317,deployability,updat,updated,317,[HS3][RF] Fixed ordering bug in datasets; # This Pull request:. Fixes a bug that can lead to datasets and distributions being wrongly ordered in HS3 JSON files. ## Changes or fixes:. Use the name of the split datasets rather than their index to decide the ordering. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13563
https://github.com/root-project/root/pull/13563:106,interoperability,distribut,distributions,106,[HS3][RF] Fixed ordering bug in datasets; # This Pull request:. Fixes a bug that can lead to datasets and distributions being wrongly ordered in HS3 JSON files. ## Changes or fixes:. Use the name of the split datasets rather than their index to decide the ordering. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13563
https://github.com/root-project/root/pull/13563:287,safety,test,tested,287,[HS3][RF] Fixed ordering bug in datasets; # This Pull request:. Fixes a bug that can lead to datasets and distributions being wrongly ordered in HS3 JSON files. ## Changes or fixes:. Use the name of the split datasets rather than their index to decide the ordering. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13563
https://github.com/root-project/root/pull/13563:317,safety,updat,updated,317,[HS3][RF] Fixed ordering bug in datasets; # This Pull request:. Fixes a bug that can lead to datasets and distributions being wrongly ordered in HS3 JSON files. ## Changes or fixes:. Use the name of the split datasets rather than their index to decide the ordering. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13563
https://github.com/root-project/root/pull/13563:317,security,updat,updated,317,[HS3][RF] Fixed ordering bug in datasets; # This Pull request:. Fixes a bug that can lead to datasets and distributions being wrongly ordered in HS3 JSON files. ## Changes or fixes:. Use the name of the split datasets rather than their index to decide the ordering. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13563
https://github.com/root-project/root/pull/13563:287,testability,test,tested,287,[HS3][RF] Fixed ordering bug in datasets; # This Pull request:. Fixes a bug that can lead to datasets and distributions being wrongly ordered in HS3 JSON files. ## Changes or fixes:. Use the name of the split datasets rather than their index to decide the ordering. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13563
https://github.com/root-project/root/pull/13564:94,deployability,version,versions,94,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:184,deployability,version,version,184,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:94,integrability,version,versions,94,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:184,integrability,version,version,184,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:200,integrability,discover,discovered,200,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:327,integrability,discover,discovered,327,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:200,interoperability,discover,discovered,200,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:327,interoperability,discover,discovered,327,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:94,modifiability,version,versions,94,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:184,modifiability,version,version,184,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:134,safety,valid,valid,134,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:200,usability,discov,discovered,200,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:251,usability,close,closed,251,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13564:327,usability,discov,discovered,327,Fix the EmbedFonts functionnality; The EmbedFonts functionality produced warnings with recent versions of `gs`. A `gs` option was not valid anymore. It is now removed. Also the recent version of `gs` discovered that some PDF objects were not properly closed. A mechanism has been implemented to check that. These problems were discovered by this issue:. https://github.com/root-project/root/issues/13560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13564
https://github.com/root-project/root/pull/13565:1206,availability,state,state,1206,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:26,deployability,unload,unloading,26,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:106,deployability,unload,unloading,106,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1519,deployability,patch,patch,1519,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1593,deployability,updat,updated,1593,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1206,integrability,state,state,1206,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:158,interoperability,Specif,Specifically,158,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1451,modifiability,variab,variables,1451,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1362,performance,time,time,1362,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1519,safety,patch,patch,1519,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1563,safety,test,tested,1563,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1593,safety,updat,updated,1593,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1645,safety,test,test,1645,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1519,security,patch,patch,1519,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1593,security,updat,updated,1593,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1424,testability,simpl,simpler,1424,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1563,testability,test,tested,1563,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1645,testability,test,test,1645,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13565:1424,usability,simpl,simpler,1424,"[cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used. ```. `-ClassTemplateDecl. |-TemplateTypeParmDecl referenced typename depth 0 index 0 T. |-CXXRecordDecl struct Foo definition. | |-DefinitionData. | `-CXXMethodDecl f 'T (T)'. | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'. | `-CompoundStmt. | `-ReturnStmt. | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'. `-ClassTemplateSpecializationDecl struct Foo definition. |-DefinitionData. |-TemplateArgument type 'int'. | `-BuiltinType 'int'. |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending. | `-ParmVarDecl x 'int':'int'. |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial. ```. Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:. - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`. - Apply the patch described above. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13565
https://github.com/root-project/root/pull/13566:165,availability,avail,available,165,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:14,deployability,releas,release,14,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:72,deployability,releas,release,72,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:129,energy efficiency,model,model,129,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:135,modifiability,extens,extension,135,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:165,reliability,availab,available,165,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:165,safety,avail,available,165,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:195,safety,safe,safe,195,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:235,safety,test,tested,235,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:129,security,model,model,129,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:165,security,availab,available,165,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13566:235,testability,test,tested,235,"[ntuple] Bump release candidate tag to RC2; As discussed in #12376, the release candidate tag was to be bumped to RC2 after late model extension + split encoding is available. In principle, it's safe to do it now. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13566
https://github.com/root-project/root/pull/13567:99,integrability,discover,discovered,99,"[test] Fix number of iterations in `InterpreterStress::stressSTLDict()`; It's not important, but I discovered by chance that `InterpreterStress::stressSTLDict()` was doing one iteration less than expected. Fix that. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13567
https://github.com/root-project/root/pull/13567:99,interoperability,discover,discovered,99,"[test] Fix number of iterations in `InterpreterStress::stressSTLDict()`; It's not important, but I discovered by chance that `InterpreterStress::stressSTLDict()` was doing one iteration less than expected. Fix that. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13567
https://github.com/root-project/root/pull/13567:1,safety,test,test,1,"[test] Fix number of iterations in `InterpreterStress::stressSTLDict()`; It's not important, but I discovered by chance that `InterpreterStress::stressSTLDict()` was doing one iteration less than expected. Fix that. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13567
https://github.com/root-project/root/pull/13567:237,safety,test,tested,237,"[test] Fix number of iterations in `InterpreterStress::stressSTLDict()`; It's not important, but I discovered by chance that `InterpreterStress::stressSTLDict()` was doing one iteration less than expected. Fix that. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13567
https://github.com/root-project/root/pull/13567:1,testability,test,test,1,"[test] Fix number of iterations in `InterpreterStress::stressSTLDict()`; It's not important, but I discovered by chance that `InterpreterStress::stressSTLDict()` was doing one iteration less than expected. Fix that. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13567
https://github.com/root-project/root/pull/13567:237,testability,test,tested,237,"[test] Fix number of iterations in `InterpreterStress::stressSTLDict()`; It's not important, but I discovered by chance that `InterpreterStress::stressSTLDict()` was doing one iteration less than expected. Fix that. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13567
https://github.com/root-project/root/pull/13567:99,usability,discov,discovered,99,"[test] Fix number of iterations in `InterpreterStress::stressSTLDict()`; It's not important, but I discovered by chance that `InterpreterStress::stressSTLDict()` was doing one iteration less than expected. Fix that. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13567
https://github.com/root-project/root/issues/13568:58,availability,failur,failure,58,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:242,availability,failur,failure,242,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:993,availability,Operat,Operating,993,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:58,deployability,fail,failure,58,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:242,deployability,fail,failure,242,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:488,deployability,contain,container,488,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:918,deployability,version,version,918,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:949,deployability,Instal,Installation,949,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:918,integrability,version,version,918,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:444,interoperability,standard,standard,444,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:918,modifiability,version,version,918,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:58,performance,failur,failure,58,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:242,performance,failur,failure,242,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:58,reliability,fail,failure,58,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:242,reliability,fail,failure,242,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:858,safety,test,test,858,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:647,security,access,access,647,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:48,testability,assert,assertion,48,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:70,testability,Simpl,SimpleCollectionProxy,70,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:232,testability,assert,assertion,232,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:254,testability,Simpl,SimpleCollectionProxy,254,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:858,testability,test,test,858,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:1035,testability,context,context,1035,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:70,usability,Simpl,SimpleCollectionProxy,70,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:254,usability,Simpl,SimpleCollectionProxy,254,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13568:678,usability,behavi,behavior,678,"`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. There is a `can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx` (at line 23) when running `ntuple_show.exe` on Windows. This code is the issue: `*end_arena = &(*vec.end());` one cannot dereference `end()`, [as explained in the standard](https://en.cppreference.com/w/cpp/container/vector/end):. > end() returns an iterator to the element following the last element of the vector. This element acts as a placeholder; attempting to access it results in undefined behavior. Note there is the same kind of potential issue at line 27 with `static_cast<IteratorData *>(*end_arena)->ptr = &(*vec.end());`. ### Reproducer. Run the `ntuple_show.exe` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13568
https://github.com/root-project/root/issues/13569:246,availability,error,error,246,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:285,availability,Failur,Failure,285,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:763,availability,Operat,Operating,763,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:285,deployability,Fail,Failure,285,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:688,deployability,version,version,688,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:719,deployability,Instal,Installation,719,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:688,integrability,version,version,688,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:8,modifiability,variab,variable,8,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:302,modifiability,variab,variable,302,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:688,modifiability,version,version,688,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:246,performance,error,error,246,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:274,performance,Time,Time,274,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:285,performance,Failur,Failure,285,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:285,reliability,Fail,Failure,285,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:192,safety,test,test-,192,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:217,safety,test,test,217,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:246,safety,error,error,246,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:603,safety,test,test-,603,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:628,safety,test,test,628,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:192,testability,test,test-,192,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:217,testability,test,test,217,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:603,testability,test,test-,603,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:628,testability,test,test,628,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:805,testability,context,context,805,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/issues/13569:246,usability,error,error,246,"[RHist] variable `bins_per_hyperplane` is being used without being initialized.; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. When running the `gtest-hist-histv7-test-histhistv7testUnit` test, there is the following error on Windows:. ```. Run-Time Check Failure #3 - The variable 'bins_per_hyperplane' is being used without being initialized. ```. in `RHistImpl.hxx` at line 936:. ```. Internal::RComputeLocalBinsInitialisation<NDIMS - 1, NDIMS, decltype(fAxes)>()(bins_per_hyperplane, regular_bins_per_hyperplane, fAxes);. ```. ### Reproducer. Run the `gtest-hist-histv7-test-histhistv7testUnit` test in debug mode with the /RTC1 flag on Windows. ### ROOT version. master (6.29/01). ### Installation method. built from source. ### Operating system. Windows. ### Additional context. This is visible on Windows with RTC1, but is relevant to all OSes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13569
https://github.com/root-project/root/pull/13570:12,modifiability,variab,variable,12,[RHist] Fix variable being used without being initialized; Fix issue #13569 `[RHist] variable bins_per_hyperplane is being used without being initialized`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13570
https://github.com/root-project/root/pull/13570:85,modifiability,variab,variable,85,[RHist] Fix variable being used without being initialized; Fix issue #13569 `[RHist] variable bins_per_hyperplane is being used without being initialized`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13570
https://github.com/root-project/root/pull/13571:223,deployability,updat,updated,223,"[CMake] Make PROOF optional and enabled by default; # This Pull request:. ## Changes or fixes:. Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:497,deployability,build,build,497,"[CMake] Make PROOF optional and enabled by default; # This Pull request:. ## Changes or fixes:. Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:193,safety,test,tested,193,"[CMake] Make PROOF optional and enabled by default; # This Pull request:. ## Changes or fixes:. Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:223,safety,updat,updated,223,"[CMake] Make PROOF optional and enabled by default; # This Pull request:. ## Changes or fixes:. Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:223,security,updat,updated,223,"[CMake] Make PROOF optional and enabled by default; # This Pull request:. ## Changes or fixes:. Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:150,testability,simpl,simple,150,"[CMake] Make PROOF optional and enabled by default; # This Pull request:. ## Changes or fixes:. Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:193,testability,test,tested,193,"[CMake] Make PROOF optional and enabled by default; # This Pull request:. ## Changes or fixes:. Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:150,usability,simpl,simple,150,"[CMake] Make PROOF optional and enabled by default; # This Pull request:. ## Changes or fixes:. Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13571:381,usability,effectiv,effectively,381,"[CMake] Make PROOF optional and enabled by default; # This Pull request:. ## Changes or fixes:. Makes PROOF optional and enabled by default with some simple CMake changes. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . There is no issue (yet) to be fixed, this is a PR opened for discussion. It is important to underline that effectively, this PR changes nothing: PROOF is still always built by default and the opt-out option is given not to build it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13571
https://github.com/root-project/root/pull/13572:83,modifiability,Refact,Refactor,83,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:146,modifiability,reu,reused,146,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:83,performance,Refactor,Refactor,83,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:432,reliability,Poisson,Poisson,432,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:305,safety,test,testHistFactory,305,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:327,safety,test,test,327,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:336,safety,valid,validates,336,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:336,security,validat,validates,336,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:305,testability,test,testHistFactory,305,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:322,testability,unit,unit,322,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:327,testability,test,test,327,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/pull/13572:34,usability,support,support,34,"[RF] Fix problems with `ShapeSys` support in the HS3 HistFactory implementation; * Refactor the original HistFactory code such that pieces can be reused in the HS3 JSON IO implementation. * Fix problems with ""reverse engineering"" the name of the `ShapeSys` systematics from the ParamHistFunc name. * The `testHistFactory` unit test now validates full JSON roundtripping closure of workspaces with `ShapeSys`, both with Gaussian and Poisson constraints. More details in the commit descriptions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13572
https://github.com/root-project/root/issues/13574:18,availability,error,error,18,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1431,availability,error,error,1431,"test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1650,availability,error,error,1650,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1842,availability,Error,Error,1842,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:2507,availability,Operat,Operating,2507,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:140,deployability,fail,fails,140,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1979,deployability,version,version,1979,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:2463,deployability,Instal,Installation,2463,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:24,energy efficiency,load,loading,24,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:149,energy efficiency,load,load,149,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:808,energy efficiency,load,load,808,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1852,energy efficiency,Load,Load,1852,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:535,integrability,pub,public,535,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1979,integrability,version,version,1979,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1362,interoperability,share,shared,1362,"the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1979,modifiability,version,version,1979,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:18,performance,error,error,18,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:24,performance,load,loading,24,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:149,performance,load,load,149,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:808,performance,load,load,808,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1431,performance,error,error,1431,"test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1650,performance,error,error,1650,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1842,performance,Error,Error,1842,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1852,performance,Load,Load,1852,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:140,reliability,fail,fails,140,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:18,safety,error,error,18,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:391,safety,test,test,391,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:526,safety,test,test,526,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:544,safety,test,test,544,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:554,safety,test,test,554,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:606,safety,test,test,606,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:635,safety,test,test,635,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:645,safety,test,test,645,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:651,safety,test,test,651,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:676,safety,test,test,676,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:731,safety,test,test,731,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:738,safety,test,test,738,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:763,safety,test,test,763,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1312,safety,test,test,1312," here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1431,safety,error,error,1431,"test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1650,safety,error,error,1650,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1842,safety,Error,Error,1842,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:980,security,Team,Team,980,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:2134,security,Team,Team,2134,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:391,testability,test,test,391,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:526,testability,test,test,526,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:544,testability,test,test,544,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:554,testability,test,test,554,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:606,testability,test,test,606,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:635,testability,test,test,635,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:645,testability,test,test,645,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:651,testability,test,test,651,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:676,testability,test,test,676,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:731,testability,test,test,731,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:738,testability,test,test,738,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:763,testability,test,test,763,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1312,testability,test,test,1312," here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:2554,testability,context,context,2554,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:18,usability,error,error,18,"rootcling/root-io error loading std::filesystem::path; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Rootcling fails to load correctly std::filesystem::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1171,usability,help,help,1171,"system::path. This is discussed in [this post](https://root-forum.cern.ch/t/rootcling-with-std-filesystem/55388), from which I am reproducing here the provided example. ### Reproducer. Create the following two files:. test.hh:. ```C++. #ifndef test_hh. #define test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademaker",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1431,usability,error,error,1431,"test_hh. #include <iostream>. #include <filesystem>. namespace fs = std::filesystem;. class test. {. public:. test();. ~test();. private:. fs::path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1650,usability,error,error,1650,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:1842,usability,Error,Error,1842,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/issues/13574:2325,usability,help,help,2325,":path path;. };. #endif. ```. test.cpp:. ```C++. #include ""test.hh"". test::test(). {. std::cout << ""test constructor"" << std::endl;. this->path = ""."";. }. test::~test(). {. std::cout << ""test destructor"" << std::endl;. }. ```. Then load with ACLiC:. ```. $ root. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] .L test.cpp+. Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so. input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl_deleter _1;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'. filesystem::path::_List::_Impl* _0;. ^. /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here. struct _List. ^. Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>. ```. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |. | From tags/v6-28-06@v6-28-06 |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. Built from source. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13574
https://github.com/root-project/root/pull/13575:143,deployability,automat,automatically,143,Apply `modernize-use-nullptr` from clang-tidy to `math` and `hist`; This is part of the clang-tidy code improvement campaign. The changes were automatically made by `clang-tidy`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13575
https://github.com/root-project/root/pull/13575:143,testability,automat,automatically,143,Apply `modernize-use-nullptr` from clang-tidy to `math` and `hist`; This is part of the clang-tidy code improvement campaign. The changes were automatically made by `clang-tidy`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13575
https://github.com/root-project/root/pull/13576:229,availability,error,error,229,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:309,deployability,build,build,309,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:145,interoperability,conflict,conflicts,145,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:177,performance,concurren,concurrently,177,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:229,performance,error,error,229,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:127,safety,prevent,prevent,127,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:172,safety,test,test,172,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:229,safety,error,error,229,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:350,safety,Permiss,Permission,350,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:127,security,preven,prevent,127,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:172,testability,test,test,172,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13576:229,usability,error,error,229,"[TMVA] Don't use the same file name (`TMVA.root`) everywhere; Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:. ```. SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13576
https://github.com/root-project/root/pull/13577:62,deployability,version,version,62,"[core] Do not provide our own strlcpy if glibc >= 2.38; Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`. Backport of https://github.com/root-project/root/pull/13393.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577
https://github.com/root-project/root/pull/13577:1,energy efficiency,core,core,1,"[core] Do not provide our own strlcpy if glibc >= 2.38; Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`. Backport of https://github.com/root-project/root/pull/13393.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577
https://github.com/root-project/root/pull/13577:62,integrability,version,version,62,"[core] Do not provide our own strlcpy if glibc >= 2.38; Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`. Backport of https://github.com/root-project/root/pull/13393.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577
https://github.com/root-project/root/pull/13577:62,modifiability,version,version,62,"[core] Do not provide our own strlcpy if glibc >= 2.38; Since version 2.38, glibc provides strlcpy and strlcat. No need to provide our own. In fact ROOT's definitions clash with glibc's: the latter are marked `noexcept`. Backport of https://github.com/root-project/root/pull/13393.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13577
https://github.com/root-project/root/pull/13578:177,deployability,updat,updated,177,Variation names; # This Pull request:. ## Changes or fixes:. Sets a unique name for each varied result. This PR fixes #13582. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13578
https://github.com/root-project/root/pull/13578:147,safety,test,tested,147,Variation names; # This Pull request:. ## Changes or fixes:. Sets a unique name for each varied result. This PR fixes #13582. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13578
https://github.com/root-project/root/pull/13578:177,safety,updat,updated,177,Variation names; # This Pull request:. ## Changes or fixes:. Sets a unique name for each varied result. This PR fixes #13582. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13578
https://github.com/root-project/root/pull/13578:177,security,updat,updated,177,Variation names; # This Pull request:. ## Changes or fixes:. Sets a unique name for each varied result. This PR fixes #13582. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13578
https://github.com/root-project/root/pull/13578:147,testability,test,tested,147,Variation names; # This Pull request:. ## Changes or fixes:. Sets a unique name for each varied result. This PR fixes #13582. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13578
https://github.com/root-project/root/pull/13579:74,deployability,patch,patches,74,REve backport of PR #13358; # This Pull request:. Backport #13358 to 6.28 patches.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13579
https://github.com/root-project/root/pull/13579:74,safety,patch,patches,74,REve backport of PR #13358; # This Pull request:. Backport #13358 to 6.28 patches.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13579
https://github.com/root-project/root/pull/13579:74,security,patch,patches,74,REve backport of PR #13358; # This Pull request:. Backport #13358 to 6.28 patches.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13579
https://github.com/root-project/root/pull/13580:246,energy efficiency,GPU,GPU,246,"[RF] Implement batched evaluation for pdfs created by RooClassFactory; With this commit, fast evaluation with BatchMode is now supported for pdf classes generated by the RooClassFactory. In a next step, we will also support the evaluation on the GPU. For example, the code generated in the RooFit tutorial on the RooClassFactory now looks like this:. ```C++. namespace {. inline double evaluateImpl(double x, double A, double B). {. // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. return A*fabs(x)+pow(x-B,2);. }. } // namespace. double MyPdfV3::evaluate() const. {. return evaluateImpl(x, A, B);. }. void MyPdfV3::computeBatch(double *output,. size_t size,. RooFit::Detail::DataMap const &dataMap) const. {. std::span<const double> xSpan = dataMap.at(x);. std::span<const double> ASpan = dataMap.at(A);. std::span<const double> BSpan = dataMap.at(B);. for (std::size_t i = 0; i < size; ++i) {. output[i] = evaluateImpl(xSpan.size() > 1 ? xSpan[i] : xSpan[0],. ASpan.size() > 1 ? ASpan[i] : ASpan[0],. BSpan.size() > 1 ? BSpan[i] : BSpan[0]);. }. }. ```. Also do some general code modernization of the RooClassFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13580
https://github.com/root-project/root/pull/13580:15,integrability,batch,batched,15,"[RF] Implement batched evaluation for pdfs created by RooClassFactory; With this commit, fast evaluation with BatchMode is now supported for pdf classes generated by the RooClassFactory. In a next step, we will also support the evaluation on the GPU. For example, the code generated in the RooFit tutorial on the RooClassFactory now looks like this:. ```C++. namespace {. inline double evaluateImpl(double x, double A, double B). {. // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. return A*fabs(x)+pow(x-B,2);. }. } // namespace. double MyPdfV3::evaluate() const. {. return evaluateImpl(x, A, B);. }. void MyPdfV3::computeBatch(double *output,. size_t size,. RooFit::Detail::DataMap const &dataMap) const. {. std::span<const double> xSpan = dataMap.at(x);. std::span<const double> ASpan = dataMap.at(A);. std::span<const double> BSpan = dataMap.at(B);. for (std::size_t i = 0; i < size; ++i) {. output[i] = evaluateImpl(xSpan.size() > 1 ? xSpan[i] : xSpan[0],. ASpan.size() > 1 ? ASpan[i] : ASpan[0],. BSpan.size() > 1 ? BSpan[i] : BSpan[0]);. }. }. ```. Also do some general code modernization of the RooClassFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13580
https://github.com/root-project/root/pull/13580:110,integrability,Batch,BatchMode,110,"[RF] Implement batched evaluation for pdfs created by RooClassFactory; With this commit, fast evaluation with BatchMode is now supported for pdf classes generated by the RooClassFactory. In a next step, we will also support the evaluation on the GPU. For example, the code generated in the RooFit tutorial on the RooClassFactory now looks like this:. ```C++. namespace {. inline double evaluateImpl(double x, double A, double B). {. // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. return A*fabs(x)+pow(x-B,2);. }. } // namespace. double MyPdfV3::evaluate() const. {. return evaluateImpl(x, A, B);. }. void MyPdfV3::computeBatch(double *output,. size_t size,. RooFit::Detail::DataMap const &dataMap) const. {. std::span<const double> xSpan = dataMap.at(x);. std::span<const double> ASpan = dataMap.at(A);. std::span<const double> BSpan = dataMap.at(B);. for (std::size_t i = 0; i < size; ++i) {. output[i] = evaluateImpl(xSpan.size() > 1 ? xSpan[i] : xSpan[0],. ASpan.size() > 1 ? ASpan[i] : ASpan[0],. BSpan.size() > 1 ? BSpan[i] : BSpan[0]);. }. }. ```. Also do some general code modernization of the RooClassFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13580
https://github.com/root-project/root/pull/13580:465,modifiability,VARIAB,VARIABLE,465,"[RF] Implement batched evaluation for pdfs created by RooClassFactory; With this commit, fast evaluation with BatchMode is now supported for pdf classes generated by the RooClassFactory. In a next step, we will also support the evaluation on the GPU. For example, the code generated in the RooFit tutorial on the RooClassFactory now looks like this:. ```C++. namespace {. inline double evaluateImpl(double x, double A, double B). {. // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. return A*fabs(x)+pow(x-B,2);. }. } // namespace. double MyPdfV3::evaluate() const. {. return evaluateImpl(x, A, B);. }. void MyPdfV3::computeBatch(double *output,. size_t size,. RooFit::Detail::DataMap const &dataMap) const. {. std::span<const double> xSpan = dataMap.at(x);. std::span<const double> ASpan = dataMap.at(A);. std::span<const double> BSpan = dataMap.at(B);. for (std::size_t i = 0; i < size; ++i) {. output[i] = evaluateImpl(xSpan.size() > 1 ? xSpan[i] : xSpan[0],. ASpan.size() > 1 ? ASpan[i] : ASpan[0],. BSpan.size() > 1 ? BSpan[i] : BSpan[0]);. }. }. ```. Also do some general code modernization of the RooClassFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13580
https://github.com/root-project/root/pull/13580:15,performance,batch,batched,15,"[RF] Implement batched evaluation for pdfs created by RooClassFactory; With this commit, fast evaluation with BatchMode is now supported for pdf classes generated by the RooClassFactory. In a next step, we will also support the evaluation on the GPU. For example, the code generated in the RooFit tutorial on the RooClassFactory now looks like this:. ```C++. namespace {. inline double evaluateImpl(double x, double A, double B). {. // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. return A*fabs(x)+pow(x-B,2);. }. } // namespace. double MyPdfV3::evaluate() const. {. return evaluateImpl(x, A, B);. }. void MyPdfV3::computeBatch(double *output,. size_t size,. RooFit::Detail::DataMap const &dataMap) const. {. std::span<const double> xSpan = dataMap.at(x);. std::span<const double> ASpan = dataMap.at(A);. std::span<const double> BSpan = dataMap.at(B);. for (std::size_t i = 0; i < size; ++i) {. output[i] = evaluateImpl(xSpan.size() > 1 ? xSpan[i] : xSpan[0],. ASpan.size() > 1 ? ASpan[i] : ASpan[0],. BSpan.size() > 1 ? BSpan[i] : BSpan[0]);. }. }. ```. Also do some general code modernization of the RooClassFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13580
https://github.com/root-project/root/pull/13580:110,performance,Batch,BatchMode,110,"[RF] Implement batched evaluation for pdfs created by RooClassFactory; With this commit, fast evaluation with BatchMode is now supported for pdf classes generated by the RooClassFactory. In a next step, we will also support the evaluation on the GPU. For example, the code generated in the RooFit tutorial on the RooClassFactory now looks like this:. ```C++. namespace {. inline double evaluateImpl(double x, double A, double B). {. // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. return A*fabs(x)+pow(x-B,2);. }. } // namespace. double MyPdfV3::evaluate() const. {. return evaluateImpl(x, A, B);. }. void MyPdfV3::computeBatch(double *output,. size_t size,. RooFit::Detail::DataMap const &dataMap) const. {. std::span<const double> xSpan = dataMap.at(x);. std::span<const double> ASpan = dataMap.at(A);. std::span<const double> BSpan = dataMap.at(B);. for (std::size_t i = 0; i < size; ++i) {. output[i] = evaluateImpl(xSpan.size() > 1 ? xSpan[i] : xSpan[0],. ASpan.size() > 1 ? ASpan[i] : ASpan[0],. BSpan.size() > 1 ? BSpan[i] : BSpan[0]);. }. }. ```. Also do some general code modernization of the RooClassFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13580
https://github.com/root-project/root/pull/13580:246,performance,GPU,GPU,246,"[RF] Implement batched evaluation for pdfs created by RooClassFactory; With this commit, fast evaluation with BatchMode is now supported for pdf classes generated by the RooClassFactory. In a next step, we will also support the evaluation on the GPU. For example, the code generated in the RooFit tutorial on the RooClassFactory now looks like this:. ```C++. namespace {. inline double evaluateImpl(double x, double A, double B). {. // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. return A*fabs(x)+pow(x-B,2);. }. } // namespace. double MyPdfV3::evaluate() const. {. return evaluateImpl(x, A, B);. }. void MyPdfV3::computeBatch(double *output,. size_t size,. RooFit::Detail::DataMap const &dataMap) const. {. std::span<const double> xSpan = dataMap.at(x);. std::span<const double> ASpan = dataMap.at(A);. std::span<const double> BSpan = dataMap.at(B);. for (std::size_t i = 0; i < size; ++i) {. output[i] = evaluateImpl(xSpan.size() > 1 ? xSpan[i] : xSpan[0],. ASpan.size() > 1 ? ASpan[i] : ASpan[0],. BSpan.size() > 1 ? BSpan[i] : BSpan[0]);. }. }. ```. Also do some general code modernization of the RooClassFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13580
https://github.com/root-project/root/pull/13580:127,usability,support,supported,127,"[RF] Implement batched evaluation for pdfs created by RooClassFactory; With this commit, fast evaluation with BatchMode is now supported for pdf classes generated by the RooClassFactory. In a next step, we will also support the evaluation on the GPU. For example, the code generated in the RooFit tutorial on the RooClassFactory now looks like this:. ```C++. namespace {. inline double evaluateImpl(double x, double A, double B). {. // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. return A*fabs(x)+pow(x-B,2);. }. } // namespace. double MyPdfV3::evaluate() const. {. return evaluateImpl(x, A, B);. }. void MyPdfV3::computeBatch(double *output,. size_t size,. RooFit::Detail::DataMap const &dataMap) const. {. std::span<const double> xSpan = dataMap.at(x);. std::span<const double> ASpan = dataMap.at(A);. std::span<const double> BSpan = dataMap.at(B);. for (std::size_t i = 0; i < size; ++i) {. output[i] = evaluateImpl(xSpan.size() > 1 ? xSpan[i] : xSpan[0],. ASpan.size() > 1 ? ASpan[i] : ASpan[0],. BSpan.size() > 1 ? BSpan[i] : BSpan[0]);. }. }. ```. Also do some general code modernization of the RooClassFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13580
https://github.com/root-project/root/pull/13580:216,usability,support,support,216,"[RF] Implement batched evaluation for pdfs created by RooClassFactory; With this commit, fast evaluation with BatchMode is now supported for pdf classes generated by the RooClassFactory. In a next step, we will also support the evaluation on the GPU. For example, the code generated in the RooFit tutorial on the RooClassFactory now looks like this:. ```C++. namespace {. inline double evaluateImpl(double x, double A, double B). {. // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. return A*fabs(x)+pow(x-B,2);. }. } // namespace. double MyPdfV3::evaluate() const. {. return evaluateImpl(x, A, B);. }. void MyPdfV3::computeBatch(double *output,. size_t size,. RooFit::Detail::DataMap const &dataMap) const. {. std::span<const double> xSpan = dataMap.at(x);. std::span<const double> ASpan = dataMap.at(A);. std::span<const double> BSpan = dataMap.at(B);. for (std::size_t i = 0; i < size; ++i) {. output[i] = evaluateImpl(xSpan.size() > 1 ? xSpan[i] : xSpan[0],. ASpan.size() > 1 ? ASpan[i] : ASpan[0],. BSpan.size() > 1 ? BSpan[i] : BSpan[0]);. }. }. ```. Also do some general code modernization of the RooClassFactory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13580
https://github.com/root-project/root/pull/13581:54,availability,error,errors,54,[jsroot] dev 1/09/2023 with eslint fixes; Fix several errors found with `eslint` static code analyzer . Plus many other syntax changes. Plus important fix for member-wise streamer in std::map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13581
https://github.com/root-project/root/pull/13581:54,performance,error,errors,54,[jsroot] dev 1/09/2023 with eslint fixes; Fix several errors found with `eslint` static code analyzer . Plus many other syntax changes. Plus important fix for member-wise streamer in std::map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13581
https://github.com/root-project/root/pull/13581:54,safety,error,errors,54,[jsroot] dev 1/09/2023 with eslint fixes; Fix several errors found with `eslint` static code analyzer . Plus many other syntax changes. Plus important fix for member-wise streamer in std::map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13581
https://github.com/root-project/root/pull/13581:54,usability,error,errors,54,[jsroot] dev 1/09/2023 with eslint fixes; Fix several errors found with `eslint` static code analyzer . Plus many other syntax changes. Plus important fix for member-wise streamer in std::map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13581
https://github.com/root-project/root/issues/13582:512,availability,Operat,Operating,512,"Setting unique names for varied results; ### Explain what you would like to see improved and how. The suggestion is related to the naming of varied results in ROOT. Currently, when generating varied results from a single source, they all share the same name. An improvement would be to give each varied result a unique name. . This suggestion has previously been discussed during this meeting: https://indico.cern.ch/event/1167944/. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13582
https://github.com/root-project/root/issues/13582:442,deployability,version,version,442,"Setting unique names for varied results; ### Explain what you would like to see improved and how. The suggestion is related to the naming of varied results in ROOT. Currently, when generating varied results from a single source, they all share the same name. An improvement would be to give each varied result a unique name. . This suggestion has previously been discussed during this meeting: https://indico.cern.ch/event/1167944/. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13582
https://github.com/root-project/root/issues/13582:465,deployability,Instal,Installation,465,"Setting unique names for varied results; ### Explain what you would like to see improved and how. The suggestion is related to the naming of varied results in ROOT. Currently, when generating varied results from a single source, they all share the same name. An improvement would be to give each varied result a unique name. . This suggestion has previously been discussed during this meeting: https://indico.cern.ch/event/1167944/. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13582
https://github.com/root-project/root/issues/13582:165,energy efficiency,Current,Currently,165,"Setting unique names for varied results; ### Explain what you would like to see improved and how. The suggestion is related to the naming of varied results in ROOT. Currently, when generating varied results from a single source, they all share the same name. An improvement would be to give each varied result a unique name. . This suggestion has previously been discussed during this meeting: https://indico.cern.ch/event/1167944/. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13582
https://github.com/root-project/root/issues/13582:417,integrability,event,event,417,"Setting unique names for varied results; ### Explain what you would like to see improved and how. The suggestion is related to the naming of varied results in ROOT. Currently, when generating varied results from a single source, they all share the same name. An improvement would be to give each varied result a unique name. . This suggestion has previously been discussed during this meeting: https://indico.cern.ch/event/1167944/. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13582
https://github.com/root-project/root/issues/13582:442,integrability,version,version,442,"Setting unique names for varied results; ### Explain what you would like to see improved and how. The suggestion is related to the naming of varied results in ROOT. Currently, when generating varied results from a single source, they all share the same name. An improvement would be to give each varied result a unique name. . This suggestion has previously been discussed during this meeting: https://indico.cern.ch/event/1167944/. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13582
https://github.com/root-project/root/issues/13582:238,interoperability,share,share,238,"Setting unique names for varied results; ### Explain what you would like to see improved and how. The suggestion is related to the naming of varied results in ROOT. Currently, when generating varied results from a single source, they all share the same name. An improvement would be to give each varied result a unique name. . This suggestion has previously been discussed during this meeting: https://indico.cern.ch/event/1167944/. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13582
https://github.com/root-project/root/issues/13582:442,modifiability,version,version,442,"Setting unique names for varied results; ### Explain what you would like to see improved and how. The suggestion is related to the naming of varied results in ROOT. Currently, when generating varied results from a single source, they all share the same name. An improvement would be to give each varied result a unique name. . This suggestion has previously been discussed during this meeting: https://indico.cern.ch/event/1167944/. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13582
https://github.com/root-project/root/issues/13582:556,testability,context,context,556,"Setting unique names for varied results; ### Explain what you would like to see improved and how. The suggestion is related to the naming of varied results in ROOT. Currently, when generating varied results from a single source, they all share the same name. An improvement would be to give each varied result a unique name. . This suggestion has previously been discussed during this meeting: https://indico.cern.ch/event/1167944/. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13582
https://github.com/root-project/root/pull/13584:22,availability,failur,failure,22,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:229,availability,error,error,229,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:22,deployability,fail,failure,22,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:316,deployability,Fail,Failed,316,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:346,deployability,build,build,346,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:534,energy efficiency,core,core,534,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:139,interoperability,standard,standard,139,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:22,performance,failur,failure,22,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:229,performance,error,error,229,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:22,reliability,fail,failure,22,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:316,reliability,Fail,Failed,316,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:229,safety,error,error,229,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:367,safety,test,test,367,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:12,testability,assert,assertion,12,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:306,testability,Assert,Assertion,306,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:367,testability,test,test,367,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13584:229,usability,error,error,229,"Fix a debug assertion failure on Windows when running stressgraphics; Apply changes suggested in the `Notes` section of the `isspace` [C++ standard](https://en.cppreference.com/w/cpp/string/byte/isspace) This fixes the following error when reading the character `'ò' (-14 )` in stressgraphics:. ```. Debug Assertion Failed! Program:. C:\root-dev\build\x86\debug_test\test\Debug\stressGraphics.exe. File: minkernel\crts\ucrt\src\appcrt\convert\isctype.cpp. Line 36. Expression c > = -1 && c < = 255. ```. From `isspace((Int_t)c)`, in `core\base\src\Stringio.cxx`, in `std::istream& TString::ReadToken(std::istream& strm)`:. ```. while ((wid == 0 || Length() < (Int_t)wid) &&. strm.get(c).good() && (hitSpace = isspace((Int_t)c)) == 0) {. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13584
https://github.com/root-project/root/pull/13585:37,deployability,artifact,artifacts,37,"The TRI1/2 TGraph2D options produced artifacts.; This Pull request fixes this issue:. https://github.com/root-project/root/issues/13424. Along the Z axis, there was no check to drop, at drawing time, the triangles having at least one vertex smaller than the minimum of the underlying histogram or greater than the maximum of the underlying histogram. This produced the artifacts reported in the issue. Also, The minimum and maximum of the underlying histogram might be respectively bigger or smaller than the real minimum and maximum of the points. A fix is done also for that too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13585
https://github.com/root-project/root/pull/13585:369,deployability,artifact,artifacts,369,"The TRI1/2 TGraph2D options produced artifacts.; This Pull request fixes this issue:. https://github.com/root-project/root/issues/13424. Along the Z axis, there was no check to drop, at drawing time, the triangles having at least one vertex smaller than the minimum of the underlying histogram or greater than the maximum of the underlying histogram. This produced the artifacts reported in the issue. Also, The minimum and maximum of the underlying histogram might be respectively bigger or smaller than the real minimum and maximum of the points. A fix is done also for that too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13585
https://github.com/root-project/root/pull/13585:186,energy efficiency,draw,drawing,186,"The TRI1/2 TGraph2D options produced artifacts.; This Pull request fixes this issue:. https://github.com/root-project/root/issues/13424. Along the Z axis, there was no check to drop, at drawing time, the triangles having at least one vertex smaller than the minimum of the underlying histogram or greater than the maximum of the underlying histogram. This produced the artifacts reported in the issue. Also, The minimum and maximum of the underlying histogram might be respectively bigger or smaller than the real minimum and maximum of the points. A fix is done also for that too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13585
https://github.com/root-project/root/pull/13585:194,performance,time,time,194,"The TRI1/2 TGraph2D options produced artifacts.; This Pull request fixes this issue:. https://github.com/root-project/root/issues/13424. Along the Z axis, there was no check to drop, at drawing time, the triangles having at least one vertex smaller than the minimum of the underlying histogram or greater than the maximum of the underlying histogram. This produced the artifacts reported in the issue. Also, The minimum and maximum of the underlying histogram might be respectively bigger or smaller than the real minimum and maximum of the points. A fix is done also for that too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13585
https://github.com/root-project/root/pull/13585:258,usability,minim,minimum,258,"The TRI1/2 TGraph2D options produced artifacts.; This Pull request fixes this issue:. https://github.com/root-project/root/issues/13424. Along the Z axis, there was no check to drop, at drawing time, the triangles having at least one vertex smaller than the minimum of the underlying histogram or greater than the maximum of the underlying histogram. This produced the artifacts reported in the issue. Also, The minimum and maximum of the underlying histogram might be respectively bigger or smaller than the real minimum and maximum of the points. A fix is done also for that too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13585
https://github.com/root-project/root/pull/13585:412,usability,minim,minimum,412,"The TRI1/2 TGraph2D options produced artifacts.; This Pull request fixes this issue:. https://github.com/root-project/root/issues/13424. Along the Z axis, there was no check to drop, at drawing time, the triangles having at least one vertex smaller than the minimum of the underlying histogram or greater than the maximum of the underlying histogram. This produced the artifacts reported in the issue. Also, The minimum and maximum of the underlying histogram might be respectively bigger or smaller than the real minimum and maximum of the points. A fix is done also for that too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13585
https://github.com/root-project/root/pull/13585:514,usability,minim,minimum,514,"The TRI1/2 TGraph2D options produced artifacts.; This Pull request fixes this issue:. https://github.com/root-project/root/issues/13424. Along the Z axis, there was no check to drop, at drawing time, the triangles having at least one vertex smaller than the minimum of the underlying histogram or greater than the maximum of the underlying histogram. This produced the artifacts reported in the issue. Also, The minimum and maximum of the underlying histogram might be respectively bigger or smaller than the real minimum and maximum of the points. A fix is done also for that too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13585
https://github.com/root-project/root/pull/13586:236,deployability,updat,updated,236,Implementing Range overload with recommended changes; # This Pull request:. ## Changes or fixes:. This is the new PR I mentioned here: https://github.com/root-project/root/pull/13408 . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13586
https://github.com/root-project/root/pull/13586:206,safety,test,tested,206,Implementing Range overload with recommended changes; # This Pull request:. ## Changes or fixes:. This is the new PR I mentioned here: https://github.com/root-project/root/pull/13408 . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13586
https://github.com/root-project/root/pull/13586:236,safety,updat,updated,236,Implementing Range overload with recommended changes; # This Pull request:. ## Changes or fixes:. This is the new PR I mentioned here: https://github.com/root-project/root/pull/13408 . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13586
https://github.com/root-project/root/pull/13586:236,security,updat,updated,236,Implementing Range overload with recommended changes; # This Pull request:. ## Changes or fixes:. This is the new PR I mentioned here: https://github.com/root-project/root/pull/13408 . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13586
https://github.com/root-project/root/pull/13586:206,testability,test,tested,206,Implementing Range overload with recommended changes; # This Pull request:. ## Changes or fixes:. This is the new PR I mentioned here: https://github.com/root-project/root/pull/13408 . ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13586
https://github.com/root-project/root/issues/13588:147,availability,operat,operations,147,GraphAsymmErrors not supported in DistRDF; ### Explain what you would like to see improved and how. GraphAsymmErrors is not in the list of allowed operations in DistRDF. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13588
https://github.com/root-project/root/issues/13588:249,availability,Operat,Operating,249,GraphAsymmErrors not supported in DistRDF; ### Explain what you would like to see improved and how. GraphAsymmErrors is not in the list of allowed operations in DistRDF. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13588
https://github.com/root-project/root/issues/13588:179,deployability,version,version,179,GraphAsymmErrors not supported in DistRDF; ### Explain what you would like to see improved and how. GraphAsymmErrors is not in the list of allowed operations in DistRDF. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13588
https://github.com/root-project/root/issues/13588:202,deployability,Instal,Installation,202,GraphAsymmErrors not supported in DistRDF; ### Explain what you would like to see improved and how. GraphAsymmErrors is not in the list of allowed operations in DistRDF. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13588
https://github.com/root-project/root/issues/13588:179,integrability,version,version,179,GraphAsymmErrors not supported in DistRDF; ### Explain what you would like to see improved and how. GraphAsymmErrors is not in the list of allowed operations in DistRDF. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13588
https://github.com/root-project/root/issues/13588:179,modifiability,version,version,179,GraphAsymmErrors not supported in DistRDF; ### Explain what you would like to see improved and how. GraphAsymmErrors is not in the list of allowed operations in DistRDF. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13588
https://github.com/root-project/root/issues/13588:293,testability,context,context,293,GraphAsymmErrors not supported in DistRDF; ### Explain what you would like to see improved and how. GraphAsymmErrors is not in the list of allowed operations in DistRDF. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13588
https://github.com/root-project/root/issues/13588:21,usability,support,supported,21,GraphAsymmErrors not supported in DistRDF; ### Explain what you would like to see improved and how. GraphAsymmErrors is not in the list of allowed operations in DistRDF. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13588
https://github.com/root-project/root/pull/13590:37,testability,simpl,simple,37,"[ntuple] Speed up reading/writing of simple vectors; For RVecs of simple types, do a vector read of the item's principal columns instead of reading items one by one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13590
https://github.com/root-project/root/pull/13590:66,testability,simpl,simple,66,"[ntuple] Speed up reading/writing of simple vectors; For RVecs of simple types, do a vector read of the item's principal columns instead of reading items one by one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13590
https://github.com/root-project/root/pull/13590:37,usability,simpl,simple,37,"[ntuple] Speed up reading/writing of simple vectors; For RVecs of simple types, do a vector read of the item's principal columns instead of reading items one by one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13590
https://github.com/root-project/root/pull/13590:66,usability,simpl,simple,66,"[ntuple] Speed up reading/writing of simple vectors; For RVecs of simple types, do a vector read of the item's principal columns instead of reading items one by one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13590
https://github.com/root-project/root/pull/13591:26,deployability,build,build,26,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:87,deployability,depend,dependency,87,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:112,deployability,build,build,112,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:326,deployability,updat,updated,326,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:87,integrability,depend,dependency,87,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:87,modifiability,depend,dependency,87,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:87,safety,depend,dependency,87,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:296,safety,test,tested,296,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:326,safety,updat,updated,326,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:326,security,updat,updated,326,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:87,testability,depend,dependency,87,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13591:296,testability,test,tested,296,"Revert ""[ci] Use Ninja as build system everywhere but Windows."" [skip-ci]; Ninja shows dependency issues in our build system; fix those first before switching to Ninja. This reverts commit fcfca4ccdaf97099a180e154c60bc3c621abfafe. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13591
https://github.com/root-project/root/pull/13592:115,energy efficiency,load,loading,115,[tmva][pymva] Use .h5 file instead of .keras; Go back to use .h5 files instead of .keras due to a problem in Keras loading .keras files on MacOS ARM . (see https://github.com/keras-team/tf-keras/issues/46 ).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13592
https://github.com/root-project/root/pull/13592:115,performance,load,loading,115,[tmva][pymva] Use .h5 file instead of .keras; Go back to use .h5 files instead of .keras due to a problem in Keras loading .keras files on MacOS ARM . (see https://github.com/keras-team/tf-keras/issues/46 ).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13592
https://github.com/root-project/root/pull/13592:181,security,team,team,181,[tmva][pymva] Use .h5 file instead of .keras; Go back to use .h5 files instead of .keras due to a problem in Keras loading .keras files on MacOS ARM . (see https://github.com/keras-team/tf-keras/issues/46 ).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13592
https://github.com/root-project/root/pull/13593:443,deployability,contain,container,443,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1314,deployability,manag,managed,1314,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1430,deployability,manag,manage,1430,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1240,energy efficiency,draw,drawback,1240,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1314,energy efficiency,manag,managed,1314,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1430,energy efficiency,manag,manage,1430,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:146,integrability,batch,batch,146,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1437,interoperability,share,shared,1437,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:837,modifiability,paramet,parameters,837,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1503,modifiability,paramet,parameter,1503,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:13,performance,memor,memory,13,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:56,performance,memor,memory,56,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:146,performance,batch,batch,146,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:172,performance,memor,memory,172,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:222,performance,memor,memory,222,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:696,performance,memor,memory,696,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:801,performance,memor,memory-leak-in-fits,801,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:953,performance,memor,memory,953,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1012,performance,memor,memory,1012,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1112,performance,memor,memory,1112,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1171,performance,memor,memory,1171,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1291,performance,memor,memory,1291,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1079,reliability,doe,doesn,1079,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1314,safety,manag,managed,1314,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1430,safety,manag,manage,1430,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:20,security,polic,policy,20,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:229,security,polic,policy,229,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:960,security,polic,policy,960,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1119,security,polic,policy,1119,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1178,security,polic,policy,1178,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:13,usability,memor,memory,13,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:56,usability,memor,memory,56,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:172,usability,memor,memory,172,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:222,usability,memor,memory,222,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:696,usability,memor,memory,696,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:801,usability,memor,memory-leak-in-fits,801,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:953,usability,memor,memory,953,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1012,usability,memor,memory,1012,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1112,usability,memor,memory,1112,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1171,usability,memor,memory,1171,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1185,usability,close,closes,1185,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1279,usability,user,usercode,1279,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1291,usability,memor,memory,1291,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13593:1376,usability,user,user,1376,"[PyROOT] Set memory policy to ""strict""; PyROOT has many memory leaks, which is a major pain point for people using it for long-running scripts in batch jobs. One source of memory leaks was indentified to be the ""heuristic memory policy"" of PyROOT. This means that PyROOT assumes that every non-const pointer member function argument was interpreted as the object taking ownership if the argument. For examle, take the non-owning RooLinkedList container. It has a `RooLinkedList::Add(RooAbsArg *arg)` method. PyROOT wrongly assumes that this means the RooLinkedList takes ownership of arg, and it drops the PyROOT overship. Nobody feels responsible for deleting the object anymore, and there is a memory leak or `arg`. That particular leak was reported in this forum post: https://root-forum.cern.ch/t/memory-leak-in-fits/56249. Function parameters of type `T *` are very common in ROOT, and only rarely do they imply ownership transfer. So changing the memory policy to ""strict"" would surely fix also many other memory leaks that are not reported so far. In fact, upstream cppyy doesn't even have this heuristic memory policy anymore! So moving PyROOT also to the strict memory policy closes the gap between PyROOT and cppyy. The potential drawback of this change are crashes in usercode if memory is not properly managed. But these problems should either be fixed by:. * the user. * dedicated pythonizations for these methods to manage shared ownership via Python reference counters (i.e., setting the parameter as an attribute of the object that the member function was called on). This follows up on PR #4294, in particular it reverts 3a12063116.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13593
https://github.com/root-project/root/pull/13594:825,deployability,manag,management,825,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:738,energy efficiency,sustainab,sustainable,738,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:825,energy efficiency,manag,management,825,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:17,performance,memor,memory,17,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:231,performance,memor,memory,231,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:331,performance,memor,memory,331,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:510,performance,memor,memory,510,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:660,performance,memor,memory-leak-in-fits,660,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:818,performance,memor,memory,818,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:705,safety,hot,hot-fix,705,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:825,safety,manag,management,825,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:106,security,sign,signature,106,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:338,security,polic,policy,338,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:517,security,polic,policy,517,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:17,usability,memor,memory,17,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:42,usability,command,command,42,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:231,usability,memor,memory,231,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:331,usability,memor,memory,331,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:510,usability,memor,memory,510,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:660,usability,memor,memory-leak-in-fits,660,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13594:818,usability,memor,memory,818,"[RF][PyROOT] Fix memory leaks with RooFit command arguments in PyROOT; PyROOT is wrongly interpreting the signature of. `RooLinkedList::Add(RooAbsArg *arg)` as the RooLinkedList taking ownership of the RooAbsArg. This results in a memory leak because nobody feels responsible for deleting the arg. This can be fixed by setting the memory policy of the method to ""strict"" and not to ""heuristic"" in the pythonizations. This pythonization might become unnecessary in the future if it is decided to set the global memory policy to ""strict"" in _facade.py. Reproducer of the original problem: the first code snippet in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249. This PR is only a hot-fix to the problem. The more sustainable solution will be provided by another PR that disables the heuristic memory management:. https://github.com/root-project/root/pull/13593.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13594
https://github.com/root-project/root/pull/13596:130,deployability,updat,updated,130,Exclude directories from coverage; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13596
https://github.com/root-project/root/pull/13596:100,safety,test,tested,100,Exclude directories from coverage; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13596
https://github.com/root-project/root/pull/13596:130,safety,updat,updated,130,Exclude directories from coverage; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13596
https://github.com/root-project/root/pull/13596:130,security,updat,updated,130,Exclude directories from coverage; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13596
https://github.com/root-project/root/pull/13596:25,testability,coverag,coverage,25,Exclude directories from coverage; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13596
https://github.com/root-project/root/pull/13596:100,testability,test,tested,100,Exclude directories from coverage; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13596
https://github.com/root-project/root/issues/13597:53,availability,Error,Error,53,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:6,deployability,fail,fails,6,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:282,deployability,patch,patches,282,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:350,deployability,fail,failed-w-dllvm-enable-sphinx-on,350,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:182,integrability,configur,configuring,182,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:182,modifiability,configur,configuring,182,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:53,performance,Error,Error,53,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:6,reliability,fail,fails,6,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:350,reliability,fail,failed-w-dllvm-enable-sphinx-on,350,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:53,safety,Error,Error,53,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:282,safety,patch,patches,282,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:182,security,configur,configuring,182,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:282,security,patch,patches,282,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/issues/13597:53,usability,Error,Error,53,CMake fails with `LLVM_ENABLE_SPHINX=ON`; ```. CMake Error at interpreter/cling/docs/CMakeLists.txt:60 (include):. include could not find requested file:. AddSphinxTarget. ```. when configuring with. `cmake -DLLVM_ENABLE_SPHINX=ON`. Affects `master` and latest v6.28/06 / `v6-28-00-patches`. Reported on the forum: https://root-forum.cern.ch/t/cmake-failed-w-dllvm-enable-sphinx-on/56260,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13597
https://github.com/root-project/root/pull/13598:67,availability,avail,available,67,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:39,deployability,modul,modules,39,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:114,deployability,configurat,configuration,114,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:114,integrability,configur,configuration,114,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:39,modifiability,modul,modules,39,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:114,modifiability,configur,configuration,114,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:67,reliability,availab,available,67,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:39,safety,modul,modules,39,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:67,safety,avail,available,67,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:67,security,availab,available,67,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13598:114,security,configur,configuration,114,[interpreter] Add builtin_llvm's CMake modules; This was naturally available before commit 92807f3591 from LLVM's configuration file. Fixes #13597,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13598
https://github.com/root-project/root/pull/13599:75,availability,avail,available,75,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:39,deployability,modul,modules,39,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:156,deployability,configurat,configuration,156,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:259,deployability,patch,patches,259,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:156,integrability,configur,configuration,156,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:39,modifiability,modul,modules,39,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:156,modifiability,configur,configuration,156,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:75,reliability,availab,available,75,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:39,safety,modul,modules,39,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:75,safety,avail,available,75,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:259,safety,patch,patches,259,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:75,security,availab,available,75,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:156,security,configur,configuration,156,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/pull/13599:259,security,patch,patches,259,"[interpreter] Add builtin_llvm's CMake modules [v6.28]; This was naturally available before commit 92807f3591 (backported in commit 281a162ace) from LLVM's configuration file. Fixes #13597, applies https://github.com/root-project/root/pull/13598 to `v6-28-00-patches` with the old, pre-monorepo path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13599
https://github.com/root-project/root/issues/13600:18,availability,Error,Errors,18,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:229,availability,Error,Errors,229,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:465,availability,operat,operator,465,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:2130,availability,Operat,Operating,2130,"ters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, eyh). print(list(gr.GetEXlow())). ```. ### ROOT version. master, but any will do. ### Installation method. built from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:2048,deployability,version,version,2048,"ters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, eyh). print(list(gr.GetEXlow())). ```. ### ROOT version. master, but any will do. ### Installation method. built from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:2086,deployability,Instal,Installation,2086,"ters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, eyh). print(list(gr.GetEXlow())). ```. ### ROOT version. master, but any will do. ### Installation method. built from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:1216,energy efficiency,optim,optimized,1216,"ters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, eyh). print(list(gr.GetEXlow())). ```. ### ROOT version. master, but any will do. ### Installation method. built from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:2048,integrability,version,version,2048,"ters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, eyh). print(list(gr.GetEXlow())). ```. ### ROOT version. master, but any will do. ### Installation method. built from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:565,interoperability,bind,bindings,565,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:736,interoperability,bind,bindings,736,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:565,modifiability,bind,bindings,565,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:736,modifiability,bind,bindings,736,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:2048,modifiability,version,version,2048,"ters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, eyh). print(list(gr.GetEXlow())). ```. ### ROOT version. master, but any will do. ### Installation method. built from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:18,performance,Error,Errors,18,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:229,performance,Error,Errors,229,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:1216,performance,optimiz,optimized,1216,"ters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, eyh). print(list(gr.GetEXlow())). ```. ### ROOT version. master, but any will do. ### Installation method. built from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:18,safety,Error,Errors,18,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:229,safety,Error,Errors,229,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:2174,testability,context,context,2174,"ters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, eyh). print(list(gr.GetEXlow())). ```. ### ROOT version. master, but any will do. ### Installation method. built from source. ### Operating system. Fedora 38. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:18,usability,Error,Errors,18,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/issues/13600:229,usability,Error,Errors,229,"TGraph(Asymm,Bent)Errors getters segfault in PyROOT; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. We get a segfault when trying to read C-style arrays returned by getters from the `TGraph(Asymm,Bent)Errors` classes as Python `list`:. ```. #10 0x00007f7361d62896 in CPyCppyy::(anonymous namespace)::DoubleConverter::FromMemory (this=0x7f7361e399f8 <(anonymous namespace)::InitConvFactories_t::InitConvFactories_t()::{lambda(long*)#51}::operator()(long*) const::c>, address=0x55e74bab5000) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:952. #11 0x00007f7361dbf232 in ll_item (self=0x7f7354768960, index=88746) at /home/vpadulan/Programs/rootproject/rootsrc/bindings/pyroot/cppyy/CPyCppyy/src/LowLevelViews.cxx:376. #12 0x00007f736fc1e9e5 in iter_iternext (iterator=<iterator at remote 0x7f73620b46a0>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/iterobject.c:65. #13 0x00007f736fbf33fd in list_extend (self=self. entry=0x7f732b67c200, iterable=<cppyy.LowLevelView at remote 0x7f7354768960>) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:966. #14 0x00007f736fc11261 in list___init___impl (iterable=<optimized out>, self=0x7f732b67c200) at /usr/src/debug/python3.11-3.11.4-1.fc37.x86_64/Objects/listobject.c:2790. ```. ### Reproducer. ```python. import ROOT. import numpy. if __name__ == ""__main__"":. n = 10. x = numpy.array([0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95], dtype=numpy.double). y = numpy.array([1, 2.9, 5.6, 7.4, 9, 9.6, 8.7, 6.3, 4.5, 1], dtype=numpy.double). exl = numpy.array([.05, .1, .07, .07, .04, .05, .06, .07, .08, .05], dtype=numpy.double). eyl = numpy.array([.8, .7, .6, .5, .4, .4, .5, .6, .7, .8], dtype=numpy.double). exh = numpy.array([.02, .08, .05, .05, .03, .03, .04, .05, .06, .03], dtype=numpy.double). eyh = numpy.array([.6, .5, .4, .3, .2, .2, .3, .4, .5, .6], dtype=numpy.double). gr = ROOT.TGraphAsymmErrors(n, x, y, exl, exh, eyl, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13600
https://github.com/root-project/root/pull/13601:0,modifiability,Exten,Extend,0,"Extend Pythonization of TGraph* getters; Extend the regex passed to 'compose_method' to include 'E*(low,high)[d]' getters. Fixes #13600",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13601
https://github.com/root-project/root/pull/13601:41,modifiability,Exten,Extend,41,"Extend Pythonization of TGraph* getters; Extend the regex passed to 'compose_method' to include 'E*(low,high)[d]' getters. Fixes #13600",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13601
https://github.com/root-project/root/pull/13602:59,deployability,updat,update,59,"[webgui] create stats when using ""sames"" draw option; Also update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13602
https://github.com/root-project/root/pull/13602:41,energy efficiency,draw,draw,41,"[webgui] create stats when using ""sames"" draw option; Also update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13602
https://github.com/root-project/root/pull/13602:59,safety,updat,update,59,"[webgui] create stats when using ""sames"" draw option; Also update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13602
https://github.com/root-project/root/pull/13602:59,security,updat,update,59,"[webgui] create stats when using ""sames"" draw option; Also update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13602
https://github.com/root-project/root/issues/13603:4056,availability,Operat,Operating,4056,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:1616,deployability,observ,observable,1616,"nd up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:1874,deployability,observ,observable,1874,". ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:1915,deployability,observ,observable,1915,"ct/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2219,deployability,observ,observable,2219," = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2513,deployability,build,build,2513," +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2726,deployability,observ,observable,2726,"(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx86",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2793,deployability,observ,observable,2793,"ay(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2833,deployability,observ,observable,2833,"DataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2888,deployability,observ,observable,2888,"n data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2933,deployability,observ,observable,2933,"am""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ---",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3100,deployability,observ,observable,3100,"a_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3255,deployability,observ,observable,3255,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3507,deployability,version,version,3507,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:4012,deployability,Instal,Installation,4012,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:4033,deployability,build,build,4033,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:292,energy efficiency,cpu,cpu,292,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:1018,energy efficiency,cpu,cpu,1018,"kend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2484,energy efficiency,model,model,2484,"00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `pytho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2535,energy efficiency,model,model,2535,"## Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2982,energy efficiency,cpu,cpu,2982,"st = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. -------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3206,energy efficiency,cpu,cpu,3206,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3229,energy efficiency,Draw,Draw,3229,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3385,energy efficiency,Draw,Draw,3385,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:792,integrability,event,events,792,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2557,integrability,Batch,BatchMode,2557,". # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3507,integrability,version,version,3507,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:205,interoperability,distribut,distribution,205,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:323,modifiability,paramet,parameter,323,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:550,modifiability,paramet,parameters,550,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:609,modifiability,paramet,parameters,609,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:998,modifiability,paramet,parameters,998,"] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3507,modifiability,version,version,3507,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:160,performance,perform,performing,160,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:292,performance,cpu,cpu,292,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:1018,performance,cpu,cpu,1018,"kend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in ra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:1566,performance,Content,Content,1566,"d somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=bat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2557,performance,Batch,BatchMode,2557,". # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2982,performance,cpu,cpu,2982,"st = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. -------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3186,performance,perform,performed,3186,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3206,performance,cpu,cpu,3206,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3341,performance,perform,performed,3341,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:431,reliability,doe,doesn,431,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2484,security,model,model,2484,"00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `pytho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2523,security,loss,loss,2523,"71947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2535,security,model,model,2535,"## Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3667,security,Team,Team,3667,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:1616,testability,observ,observable,1616,"nd up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:1874,testability,observ,observable,1874,". ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:1915,testability,observ,observable,1915,"ct/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2219,testability,observ,observable,2219," = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2726,testability,observ,observable,2726,"(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx86",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2793,testability,observ,observable,2793,"ay(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2833,testability,observ,observable,2833,"DataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2888,testability,observ,observable,2888,"n data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo'",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2933,testability,observ,observable,2933,"am""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ---",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3100,testability,observ,observable,3100,"a_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3255,testability,observ,observable,3255,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:4109,testability,context,context,4109,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:160,usability,perform,performing,160,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:263,usability,behavi,behaviour,263,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:846,usability,visual,visualized,846,"[RF] RooFit cuda backend produces incorrect best-fit values; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The problem occurs when performing a fit of multiple added pdfs to a distribution sampled from the pdfs itself. . The expected behaviour can be seen in the cpu backend, where the correct parameter values are obtained (2.5, 7.5, 12.5 for the mus and 1 for each sigma). The cuda backend, however, doesn't find the correct terms for the last mu and sigma. With more added pdfs this is seen as well that the first few parameters get fitted somewhat to the data while the other parameters end up with seemingly random values (sometimes just their start values as if it is never attempted to fit them). The problem only occurs with sufficiently large numbers of events (e.g. 1e6). The results from both backends are visualized in the following plot:. ![myPlot](https://github.com/root-project/root/assets/138122408/c3022fea-d074-443f-a623-d06132aeeaaf). The resulting parameters from the cpu backend are:. ```bash. mu_0	 = 2.50139	 +/- 0.00314009. mu_1	 = 7.50163	 +/- 0.00325436. mu_2	 = 12.4977	 +/- 0.00315695. sigma_0	 = 0.996218	 +/- 0.00238642. sigma_1	 = 1.0002	 +/- 0.00273205. sigma_2	 = 1.00092	 +/- 0.00240107. ```. The cuda backend arrives at the following values instead:. ```bash. mu_0	 = 2.44677	 +/- 0.00330185. mu_1	 = 7.38606	 +/- 0.00417768. mu_2	 = 9.94213	 +/- 0.0220406. sigma_0	 = 0.951877	 +/- 0.00256995. sigma_1	 = 0.805267	 +/- 0.00292966. sigma_2	 = 3.04442	 +/- 0.0171947. ```. ### Reproducer. ```python. # Content of file fit.py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2582,usability,minim,minimize,2582,"py. import ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2592,usability,minim,minimizer,2592,"ROOT. def get_data(observable, n_events):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | W",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2628,usability,minim,minimizer,2628,"nts):. import numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2638,usability,minim,minimize,2638,"port numpy as np. np.random.seed(0). data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:2672,usability,minim,minimizer,2672,". data_list = []. for i in range(3):. data_list.append(np.random.normal(loc=2.5+5*i, size=n_events//9)). data_np = np.array(data_list).flatten(). data = ROOT.RooDataSet.from_numpy({""x"": data_np}, [observable]). return data. def get_model(observable, suffix=""param""):. mu_list = []. sigma_list = []. gauss_list = []. frac_list = []. for i in range(3):. mu_list.append(ROOT.RooRealVar(f""mu_{i}"", """", 1.9+5*i, -1+5*i, 6+5*i)). sigma_list.append(ROOT.RooRealVar(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3186,usability,perform,performed,3186,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3341,usability,perform,performed,3341,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/issues/13603:3874,usability,help,help,3874,"Var(f""sigma_{i}"", """", 1.3, 0, 5)). gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])). frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]). gauss.keepAlive = (gauss_list, frac_list[:-1]). return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):. # build the loss. nll = model.createNLL(data, BatchMode=batch_mode). # minimize. minimizer = ROOT.RooMinimizer(nll). minimizer.minimize(""Minuit2"", """"). result = minimizer.save(). return result. def main(n_events):. observable = ROOT.RooRealVar(""x"", """", 0, -5, 20). data1 = get_data(observable, n_events). data2 = get_data(observable, n_events). parameters1, model1 = get_model(observable). parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""). result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400). c.Divide(2). c.cd(1). frame1 = observable.frame(). data1.plotOn(frame1). model1.plotOn(frame1). frame1.SetTitle(""Fit performed with the 'cpu' backend""). frame1.Draw(). c.cd(2). frame2 = observable.frame(). data2.plotOn(frame2). model2.plotOn(frame2). frame2.SetTitle(""Fit performed with the 'cuda' backend""). frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":. main(int(1e6)). ```. Run the code as `python fit.py`. ### ROOT version. ``` bash. ------------------------------------------------------------------. | Welcome to ROOT 6.29/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |. | From heads/master@v6-29-01-2512-gf6aeead07d |. | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13603
https://github.com/root-project/root/pull/13604:1103,availability,ping,ping,1103,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:9,deployability,API,API,9,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:263,deployability,API,API,263,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:962,deployability,API,APIs,962,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:1079,deployability,updat,updated,1079,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:387,energy efficiency,model,model,387,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:9,integrability,API,API,9,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:140,integrability,sub,subset,140,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:263,integrability,API,API,263,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:962,integrability,API,APIs,962,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:9,interoperability,API,API,9,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:45,interoperability,stub,stub,45,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:263,interoperability,API,API,263,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:697,interoperability,share,shared,697,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:962,interoperability,API,APIs,962,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:871,reliability,doe,does,871,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:177,safety,input,input,177,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:443,safety,safe,safety,443,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:787,safety,compl,complete,787,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:898,safety,review,review,898,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:1049,safety,test,tested,1049,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:1079,safety,updat,updated,1079,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:387,security,model,model,387,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:787,security,compl,complete,787,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:1079,security,updat,updated,1079,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:45,testability,stub,stub,45,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:898,testability,review,review,898,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:1049,testability,test,tested,1049,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:177,usability,input,input,177,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:755,usability,support,support,755,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/pull/13604:1114,usability,user,users,1114,"[ntuple] API improvements, skimming tutorial stub; # This Pull request:. Adds a tutorial that shows how to create a derived data set with a subset of the columns and row of the input data set. Working on the tutorial triggered several improvements to the RNTuple API:. - RNTupleModel takes ownership of entries and returns weak pointers to them (entries need to be destructed before the model and with it its fields are destructed). - Several safety improvements: make members `const` or private. - Add `RFieldBase::Compare()`. - Several minor improvements. This PR triggers several follow-up PRs, e.g. - `RBulk` should be returned as weak pointers like entries. - `RFieldBase::RValue` should use shared pointers, not raw pointers. - There should be read support for projected fields to complete the skimming tutorial. Nevertheless, the PR is already rather large and it does seem to make sense to review it as is. ## Changes or fixes:. Changes to the following APIs: `RNTupleReader`, `RNTupleWriter`, `RNTupleModel`, `REntry`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs. - [ ] ping known users about the changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13604
https://github.com/root-project/root/issues/13605:2427,availability,Operat,Operating,2427,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1040,deployability,depend,dependent,1040," when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': arr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1649,deployability,UPDAT,UPDATEIFCOPY,1649,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:2366,deployability,version,version,2366,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:2394,deployability,Instal,Installation,2394,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1040,integrability,depend,dependent,1040," when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': arr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:2366,integrability,version,version,2366,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:2265,interoperability,bind,bindings,2265,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1040,modifiability,depend,dependent,1040," when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': arr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:2265,modifiability,bind,bindings,2265,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:2366,modifiability,version,version,2366,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1033,performance,memor,memory,1033,"ng result when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'ob",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:55,safety,input,input,55,"[RF] RooDataSet.from_numpy gives wrong result when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:172,safety,input,input,172,"[RF] RooDataSet.from_numpy gives wrong result when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1040,safety,depend,dependent,1040," when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': arr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1649,safety,UPDAT,UPDATEIFCOPY,1649,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1649,security,UPDAT,UPDATEIFCOPY,1649,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1040,testability,depend,dependent,1040," when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': arr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:2467,testability,context,context,2467,"', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This issue arises because the copying of numpy data to std::vector assumes the numpy array to be c-contiguous:. https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_roofit/_roodataset.py#L129-L132. ### ROOT version. ROOT 6.26/08+. ### Installation method. lxplus. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:55,usability,input,input,55,"[RF] RooDataSet.from_numpy gives wrong result when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:172,usability,input,input,172,"[RF] RooDataSet.from_numpy gives wrong result when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/issues/13605:1033,usability,memor,memory,1033,"ng result when the input arrays are not c-contiguous; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. If the input numpy arrays to `RooDataSet.from_numpy` are not c-contiguous, then the resulting dataset will have messed up values. ### Reproducer. ```python. import itertools. import numpy as np. import ROOT. obs_1 = ROOT.RooRealVar('obs_1' , 'obs_1', 70, 70, 190). obs_1.setBins(30). obs_2 = ROOT.RooRealVar('obs_2' , 'obs_2', 100, 100, 180). obs_2.setBins(80). val_obs_1 = []. val_obs_2 = []. for i in range(obs_1.numBins()):. obs_1.setBin(i). val_obs_1.append(obs_1.getVal()). for i in range(obs_2.numBins()):. obs_2.setBin(i). val_obs_2.append(obs_2.getVal()) . # so that all combination of values are in the dataset. val_cart_product = np.array(list(itertools.product(val_obs_1, val_obs_2))). data = {. 'obs_1': val_cart_product[:, 0],. 'obs_2': val_cart_product[:, 1]. }. dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. This gives (memory dependent):. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72. , 100.5, 72. , ..., 178.5, 128. , 179.5]),. 'obs_2': array([100.5, 72. , 101.5, ..., 128. , 179.5, 132. ])}. ```. The expected output should be. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'obs_2': array([100.5, 101.5, 102.5, ..., 177.5, 178.5, 179.5])}. ```. This happens because the arrays `data['obs_1']` and `data['obs_2']` are not c-contiguous:. ```. >>> data['obs_1'].flags. C_CONTIGUOUS : False. F_CONTIGUOUS : False. OWNDATA : False. WRITEABLE : True. ALIGNED : True. WRITEBACKIFCOPY : False. UPDATEIFCOPY : False. ```. If we make the arrays c-contiguous, the resulting dataset is correct:. ```. for key, arr in data.items():. if not arr.flags.c_contiguous:. data[key] = np.ascontiguousarray(arr). dataset = ROOT.RooDataSet.from_numpy(data, ROOT.RooArgSet(obs_1, obs_2)). ```. this gives. ```. >>> dataset.to_numpy(). {'obs_1': array([ 72., 72., 72., ..., 188., 188., 188.]),. 'ob",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13605
https://github.com/root-project/root/pull/13606:14,deployability,build,building,14,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:135,deployability,build,build,135,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:278,deployability,releas,release,278,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:368,deployability,modul,modules,368,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:417,deployability,Build,Building,417,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:518,deployability,version,version,518,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:537,deployability,Stack,Stack,537,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:829,deployability,version,version,829,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:849,deployability,version,version,849,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:406,integrability,messag,message,406,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:518,integrability,version,version,518,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:829,integrability,version,version,829,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:849,integrability,version,version,849,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:406,interoperability,messag,message,406,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:368,modifiability,modul,modules,368,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:518,modifiability,version,version,518,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:829,modifiability,version,version,829,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:849,modifiability,version,version,849,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:368,safety,modul,modules,368,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:694,safety,test,test-conda-,694,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:694,testability,test,test-conda-,694,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:95,usability,support,support,95,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:166,usability,User,Users,166,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:197,usability,support,support,197,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:445,usability,support,support,445,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:472,usability,support,support,472,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/pull/13606:758,usability,support,support,758,"[PyROOT] Make building with Python 2 optional; In preparation for a future removal of Python 2 support, add the `pyroot-python2` cmake build option (OFF by default). Users who really need Python 2 support can still get it, but warn them that it will be removed in a future ROOT release. This leads to . ```. $: cmake -Dpyroot-python2=ON. [...]. CMake Warning at cmake/modules/SearchRootCoreDeps.cmake:153 (message):. Building ROOT with Python 2 support is deprecated. The support for Python 2. will be removed in ROOT version 6.32. Call Stack (most recent call first):. CMakeLists.txt:169 (include). ```. ```. $: python -c ""import ROOT"". /home/vpadulan/Programs/rootproject/rootbuild/py2-cmake-test-conda-py2/lib/ROOT/__init__.py:36: DeprecationWarning: The support for Python 2 in ROOT is deprecated. It will be removed in ROOT version 6.32. ""ROOT version 6.32."", category=DeprecationWarning). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13606
https://github.com/root-project/root/issues/13607:333,availability,monitor,monitoring,333,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:333,deployability,monitor,monitoring,333,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:333,energy efficiency,monitor,monitoring,333,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:32,interoperability,Distribut,Distributed,32,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:191,interoperability,distribut,distributed,191,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:369,interoperability,distribut,distributed,369,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:167,modifiability,interm,intermediate,167,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:294,modifiability,interm,intermediate,294,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:5,performance,time,time,5,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:144,performance,time,time,144,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:333,reliability,monitor,monitoring,333,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:333,safety,monitor,monitoring,333,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:361,safety,compl,complex,361,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:361,security,compl,complex,361,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:333,testability,monitor,monitoring,333,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:460,testability,context,context,460,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:15,usability,visual,visualization,15,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:106,usability,visual,visualization,106,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:249,usability,user,users,249,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:282,usability,visual,visualizing,282,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/issues/13607:390,usability,workflow,workflows,390,"Real-time data visualization in Distributed ROOT computations; ### Feature description. Introduce a ""live visualization"" feature to enable real-time representation of intermediate results in distributed ROOT computations. The idea is to provide the users with a feature that allows visualizing intermediate results, facilitating the monitoring and debugging of complex distributed analysis workflows. ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13607
https://github.com/root-project/root/pull/13608:27,availability,toler,tolerance,27,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13608:80,availability,toler,tolerance,80,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13608:229,availability,toler,tolerance,229,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13608:27,reliability,toleran,tolerance,27,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13608:80,reliability,toleran,tolerance,80,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13608:229,reliability,toleran,tolerance,229,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13608:51,safety,test,tests,51,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13608:104,safety,test,testing,104,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13608:51,testability,test,tests,51,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13608:104,testability,test,testing,104,"[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests; This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13608
https://github.com/root-project/root/pull/13609:58,safety,input,input,58,[RF][PyROOT] Fix `RooDataSet.from_numpy()` for contiguous input arrays; Closes #13605.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13609
https://github.com/root-project/root/pull/13609:58,usability,input,input,58,[RF][PyROOT] Fix `RooDataSet.from_numpy()` for contiguous input arrays; Closes #13605.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13609
https://github.com/root-project/root/pull/13609:72,usability,Close,Closes,72,[RF][PyROOT] Fix `RooDataSet.from_numpy()` for contiguous input arrays; Closes #13605.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13609
https://github.com/root-project/root/pull/13610:129,performance,memor,memory-leak-in-fits,129,[RF] Add function to clear Minuit status history in RooMinimizer; As requested in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13610
https://github.com/root-project/root/pull/13610:21,usability,clear,clear,21,[RF] Add function to clear Minuit status history in RooMinimizer; As requested in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13610
https://github.com/root-project/root/pull/13610:34,usability,statu,status,34,[RF] Add function to clear Minuit status history in RooMinimizer; As requested in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13610
https://github.com/root-project/root/pull/13610:129,usability,memor,memory-leak-in-fits,129,[RF] Add function to clear Minuit status history in RooMinimizer; As requested in this forum post:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13610
https://github.com/root-project/root/issues/13611:1098,availability,avail,available,1098,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1233,availability,Operat,Operating,1233,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:169,deployability,contain,containing,169,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1037,deployability,version,version,1037,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1163,deployability,version,version,1163,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1186,deployability,Instal,Installation,1186,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1207,deployability,Build,Building,1207,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:231,integrability,sub,subsequent,231,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1037,integrability,version,version,1037,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1163,integrability,version,version,1163,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:187,interoperability,prox,proxies,187,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1037,modifiability,version,version,1037,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1163,modifiability,version,version,1163,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:57,performance,memor,memory,57,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:445,performance,memor,memory-leak-in-fits,445,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1316,performance,memor,memory-leak-in-fits,1316,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1098,reliability,availab,available,1098,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1098,safety,avail,available,1098,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1098,security,availab,available,1098,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1278,testability,context,context,1278,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:57,usability,memor,memory,57,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:445,usability,memor,memory-leak-in-fits,445,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:671,usability,command,commands,671,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:844,usability,command,commands,844,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:909,usability,command,commands,909,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:922,usability,command,commands,922,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:955,usability,command,commands,955,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/issues/13611:1316,usability,memor,memory-leak-in-fits,1316,"[PyROOT] Iterating over list with ROOT objects messes up memory; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Iterating over a Python list containing PyROOT proxies seems to mess up something, causing subsequent crashes when using the elements. ### Reproducer. The problem can be reproduced with some Python code inspired by this forum post, where the problem was originally reported:. https://root-forum.cern.ch/t/memory-leak-in-fits/56249/4. ```python. import ROOT as r. x = r.RooRealVar(""x"", ""x"", 0, 10). gm = r.RooRealVar(""gm"", ""gm"", 5, 0, 10). pdf = r.RooGaussian(""g"", ""g"", x, gm, r.RooFit.RooConst(1)). data = pdf.generate({x}, 1000). commands = [. r.RooFit.PrintLevel(-1),. r.RooFit.Save(),. ]. # Iterating over the python list will break the code. Uncomment it and things. # will work. Say whaat? for x in commands:. pass. cmdList = r.RooLinkedList(). for i in range(len(commands)):. commands[i].Print(). cmdList.Add(commands[i]). # To get a more direct reproducer, we're not calling the pythonized version of. # fitTo(), but the original cppyy method that is available as _fitTo():. pdf._fitTo(data, cmdList). ```. ### ROOT version. `master`. ### Installation method. Building from source. ### Operating system. Arch Linux. ### Additional context. https://root-forum.cern.ch/t/memory-leak-in-fits/56249",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13611
https://github.com/root-project/root/pull/13612:27,availability,operat,operators,27,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:332,availability,operat,operators,332,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:233,interoperability,platform,platforms,233,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:423,interoperability,platform,platform,423,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:195,reliability,doe,doesn,195,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:13,safety,Avoid,Avoid,13,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:61,safety,test,test,61,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:112,safety,test,test,112,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:136,safety,Test,TestRooDataSetNumpy,136,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:308,safety,avoid,avoiding,308,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:56,testability,unit,unit,56,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:61,testability,test,test,61,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:107,testability,unit,unit,107,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:112,testability,test,test,112,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:136,testability,Test,TestRooDataSetNumpy,136,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13612:445,usability,Close,Closes,445,"[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test; The `n_in_range` reference value in the unit test. `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13612
https://github.com/root-project/root/pull/13614:366,interoperability,platform,platforms,366,"[cling] Emit const variables only once; Otherwise they are emitted as internal and we get double-construction and -destruction on the same memory address due to the way we promote internal declarations in KeepLocalGVPass. According to upstream tests, the de-duplication doesn't work on Windows (yet), but I think this problem is severe enough to fix it on the other platforms sooner rather than later. Fixes #13429",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:19,modifiability,variab,variables,19,"[cling] Emit const variables only once; Otherwise they are emitted as internal and we get double-construction and -destruction on the same memory address due to the way we promote internal declarations in KeepLocalGVPass. According to upstream tests, the de-duplication doesn't work on Windows (yet), but I think this problem is severe enough to fix it on the other platforms sooner rather than later. Fixes #13429",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:139,performance,memor,memory,139,"[cling] Emit const variables only once; Otherwise they are emitted as internal and we get double-construction and -destruction on the same memory address due to the way we promote internal declarations in KeepLocalGVPass. According to upstream tests, the de-duplication doesn't work on Windows (yet), but I think this problem is severe enough to fix it on the other platforms sooner rather than later. Fixes #13429",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:270,reliability,doe,doesn,270,"[cling] Emit const variables only once; Otherwise they are emitted as internal and we get double-construction and -destruction on the same memory address due to the way we promote internal declarations in KeepLocalGVPass. According to upstream tests, the de-duplication doesn't work on Windows (yet), but I think this problem is severe enough to fix it on the other platforms sooner rather than later. Fixes #13429",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:244,safety,test,tests,244,"[cling] Emit const variables only once; Otherwise they are emitted as internal and we get double-construction and -destruction on the same memory address due to the way we promote internal declarations in KeepLocalGVPass. According to upstream tests, the de-duplication doesn't work on Windows (yet), but I think this problem is severe enough to fix it on the other platforms sooner rather than later. Fixes #13429",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:244,testability,test,tests,244,"[cling] Emit const variables only once; Otherwise they are emitted as internal and we get double-construction and -destruction on the same memory address due to the way we promote internal declarations in KeepLocalGVPass. According to upstream tests, the de-duplication doesn't work on Windows (yet), but I think this problem is severe enough to fix it on the other platforms sooner rather than later. Fixes #13429",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13614:139,usability,memor,memory,139,"[cling] Emit const variables only once; Otherwise they are emitted as internal and we get double-construction and -destruction on the same memory address due to the way we promote internal declarations in KeepLocalGVPass. According to upstream tests, the de-duplication doesn't work on Windows (yet), but I think this problem is severe enough to fix it on the other platforms sooner rather than later. Fixes #13429",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13614
https://github.com/root-project/root/pull/13617:15,availability,error,error,15,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:117,availability,error,errors,117,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:156,availability,servic,services,156,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:1,deployability,build,build,1,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:156,deployability,servic,services,156,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:208,deployability,build,build,208,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:156,integrability,servic,services,156,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:8,interoperability,Format,Format,8,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:244,interoperability,bind,bindings,244,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:156,modifiability,servic,services,156,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:244,modifiability,bind,bindings,244,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:15,performance,error,error,15,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:117,performance,error,errors,117,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:15,safety,error,error,15,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:57,safety,test,test,57,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:117,safety,error,errors,117,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:221,safety,test,testReport,221,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:275,safety,test,test,275,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:57,testability,test,test,57,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:221,testability,test,testReport,221,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:275,testability,test,test,275,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:15,usability,error,error,15,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13617:117,usability,error,errors,117,"[build] Format error as string in dependency_versions.py test; The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13617
https://github.com/root-project/root/pull/13618:32,deployability,unload,unloading,32,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:197,deployability,unload,unloading,197,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:513,deployability,updat,updated,513,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:280,safety,review,reviewed,280,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:483,safety,test,tested,483,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:513,safety,updat,updated,513,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:565,safety,test,test,565,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:513,security,updat,updated,513,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:280,testability,review,reviewed,280,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:483,testability,test,tested,483,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13618:565,testability,test,test,565,"[v628][cling] DeclUnloader: fix unloading of member functions of templated classes; This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes). The aforementioned PRs have been reviewed separately. ## Changes or fixes:. For the actual list of changes, see. - https://github.com/root-project/root/pull/13534. - https://github.com/root-project/root/pull/13565. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13618
https://github.com/root-project/root/pull/13619:68,availability,avail,available,68,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:372,availability,mainten,maintenance,372,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:289,deployability,updat,updated,289,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:352,energy efficiency,reduc,reduces,352,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:68,reliability,availab,available,68,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:372,reliability,mainten,maintenance,372,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:68,safety,avail,available,68,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:259,safety,test,tested,259,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:289,safety,updat,updated,289,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:68,security,availab,available,68,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:289,security,updat,updated,289,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:8,testability,Simpl,Simplify,8,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:135,testability,simpl,simplified,135,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:259,testability,test,tested,259,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:413,testability,simpl,simplifying,413,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:8,usability,Simpl,Simplify,8,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:135,usability,simpl,simplified,135,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13619:413,usability,simpl,simplifying,413,"[Cling] Simplify std::tuple value printer; By using std::apply, now available after moving to C++17, the implementation can be greatly simplified. # This Pull request:. ## Changes or fixes:. The way the value of a std::ntuple is printed. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . Nothing, it reduces the overall maintenance cost of the root codebase by simplifying it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13619
https://github.com/root-project/root/pull/13620:70,availability,reliab,reliable,70,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:9,deployability,version,version,9,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:40,deployability,releas,releasing,40,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:9,integrability,version,version,9,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:9,modifiability,version,version,9,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:70,reliability,reliab,reliable,70,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:0,testability,Simpl,Simplify,0,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:56,testability,simpl,simpler,56,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:0,usability,Simpl,Simplify,0,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13620:56,usability,simpl,simpler,56,"Simplify version definition; This makes releasing waaay simpler, more reliable, and possibly at some point convertible to a Github action?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13620
https://github.com/root-project/root/pull/13621:358,deployability,updat,updated,358,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:29,energy efficiency,Reduc,Reduce,29,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:126,energy efficiency,optim,optimizing,126,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:242,energy efficiency,batter,battery,242,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:145,modifiability,paramet,parameters,145,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:126,performance,optimiz,optimizing,126,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:22,safety,test,tests,22,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:56,safety,test,tests,56,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:258,safety,test,tests,258,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:328,safety,test,tested,328,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:358,safety,updat,updated,358,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:358,security,updat,updated,358,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:17,testability,unit,unit,17,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:22,testability,test,tests,22,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:51,testability,unit,unit,51,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:56,testability,test,tests,56,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:181,testability,coverag,coverage,181,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:253,testability,unit,unit,253,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:258,testability,test,tests,258,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13621:328,testability,test,tested,328,"[DF] Shorten RDF unit tests; Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:. The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13621
https://github.com/root-project/root/pull/13622:100,deployability,build,builds,100,"Revert #13592; #13592 broke a few tests in TMVA, visible in that same PR and in all other recent CI builds, e.g. https://github.com/root-project/root/pull/13571. This PR reverts those commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13622
https://github.com/root-project/root/pull/13622:34,safety,test,tests,34,"Revert #13592; #13592 broke a few tests in TMVA, visible in that same PR and in all other recent CI builds, e.g. https://github.com/root-project/root/pull/13571. This PR reverts those commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13622
https://github.com/root-project/root/pull/13622:34,testability,test,tests,34,"Revert #13592; #13592 broke a few tests in TMVA, visible in that same PR and in all other recent CI builds, e.g. https://github.com/root-project/root/pull/13571. This PR reverts those commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13622
https://github.com/root-project/root/issues/13623:119,interoperability,specif,specifying,119,"Add directory wildcarding in TChain; ### Feature description. It would be very nice if one could add multiple files by specifying a directory-globbed filepath, i.e. ```. auto* chain = new TChain(""path/to/tree/files/*/*/*.root"");. ```. for now the behavior only allows for multiple files to be added in this way:. ```. auto* chain = new TChain(""path/to/tree/files/*.root"");. ```. (possible solution: make `ROOT::Internal::TreeUtils::ExpandGlob(const std::string & glob)` recursive ). ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13623
https://github.com/root-project/root/issues/13623:542,testability,context,context,542,"Add directory wildcarding in TChain; ### Feature description. It would be very nice if one could add multiple files by specifying a directory-globbed filepath, i.e. ```. auto* chain = new TChain(""path/to/tree/files/*/*/*.root"");. ```. for now the behavior only allows for multiple files to be added in this way:. ```. auto* chain = new TChain(""path/to/tree/files/*.root"");. ```. (possible solution: make `ROOT::Internal::TreeUtils::ExpandGlob(const std::string & glob)` recursive ). ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13623
https://github.com/root-project/root/issues/13623:247,usability,behavi,behavior,247,"Add directory wildcarding in TChain; ### Feature description. It would be very nice if one could add multiple files by specifying a directory-globbed filepath, i.e. ```. auto* chain = new TChain(""path/to/tree/files/*/*/*.root"");. ```. for now the behavior only allows for multiple files to be added in this way:. ```. auto* chain = new TChain(""path/to/tree/files/*.root"");. ```. (possible solution: make `ROOT::Internal::TreeUtils::ExpandGlob(const std::string & glob)` recursive ). ### Alternatives considered. _No response_. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13623
https://github.com/root-project/root/pull/13624:49,energy efficiency,Reduc,Reduce,49,"[RF] Several improvements to RooClassFactory; 1. Reduce code duplication. 2. Support expressions with complex numbers, as generated by `sympy` for example. 3. Use `std::string` instead of C-style strings. 4. Don't recompile when requesting the same class instance twice (to better support jupyter notebook workflows).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13624
https://github.com/root-project/root/pull/13624:102,safety,compl,complex,102,"[RF] Several improvements to RooClassFactory; 1. Reduce code duplication. 2. Support expressions with complex numbers, as generated by `sympy` for example. 3. Use `std::string` instead of C-style strings. 4. Don't recompile when requesting the same class instance twice (to better support jupyter notebook workflows).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13624
https://github.com/root-project/root/pull/13624:102,security,compl,complex,102,"[RF] Several improvements to RooClassFactory; 1. Reduce code duplication. 2. Support expressions with complex numbers, as generated by `sympy` for example. 3. Use `std::string` instead of C-style strings. 4. Don't recompile when requesting the same class instance twice (to better support jupyter notebook workflows).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13624
https://github.com/root-project/root/pull/13624:77,usability,Support,Support,77,"[RF] Several improvements to RooClassFactory; 1. Reduce code duplication. 2. Support expressions with complex numbers, as generated by `sympy` for example. 3. Use `std::string` instead of C-style strings. 4. Don't recompile when requesting the same class instance twice (to better support jupyter notebook workflows).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13624
https://github.com/root-project/root/pull/13624:281,usability,support,support,281,"[RF] Several improvements to RooClassFactory; 1. Reduce code duplication. 2. Support expressions with complex numbers, as generated by `sympy` for example. 3. Use `std::string` instead of C-style strings. 4. Don't recompile when requesting the same class instance twice (to better support jupyter notebook workflows).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13624
https://github.com/root-project/root/pull/13624:306,usability,workflow,workflows,306,"[RF] Several improvements to RooClassFactory; 1. Reduce code duplication. 2. Support expressions with complex numbers, as generated by `sympy` for example. 3. Use `std::string` instead of C-style strings. 4. Don't recompile when requesting the same class instance twice (to better support jupyter notebook workflows).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13624
https://github.com/root-project/root/pull/13625:24,safety,test,tests,24,[tmva][pymva] Fix Pymva tests; This PR is redding the commits of #13592 plus the correct fix in MethodBase,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13625
https://github.com/root-project/root/pull/13625:24,testability,test,tests,24,[tmva][pymva] Fix Pymva tests; This PR is redding the commits of #13592 plus the correct fix in MethodBase,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13625
https://github.com/root-project/root/pull/13626:30,deployability,updat,update,30,"[webgui] fix store file name, update jsroot; When producing single image for the canvas - do not add ""%d"" qualifier,. which is required for multiple files. Update JSROOT with minor fixes in interactive functions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13626
https://github.com/root-project/root/pull/13626:156,deployability,Updat,Update,156,"[webgui] fix store file name, update jsroot; When producing single image for the canvas - do not add ""%d"" qualifier,. which is required for multiple files. Update JSROOT with minor fixes in interactive functions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13626
https://github.com/root-project/root/pull/13626:30,safety,updat,update,30,"[webgui] fix store file name, update jsroot; When producing single image for the canvas - do not add ""%d"" qualifier,. which is required for multiple files. Update JSROOT with minor fixes in interactive functions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13626
https://github.com/root-project/root/pull/13626:156,safety,Updat,Update,156,"[webgui] fix store file name, update jsroot; When producing single image for the canvas - do not add ""%d"" qualifier,. which is required for multiple files. Update JSROOT with minor fixes in interactive functions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13626
https://github.com/root-project/root/pull/13626:30,security,updat,update,30,"[webgui] fix store file name, update jsroot; When producing single image for the canvas - do not add ""%d"" qualifier,. which is required for multiple files. Update JSROOT with minor fixes in interactive functions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13626
https://github.com/root-project/root/pull/13626:156,security,Updat,Update,156,"[webgui] fix store file name, update jsroot; When producing single image for the canvas - do not add ""%d"" qualifier,. which is required for multiple files. Update JSROOT with minor fixes in interactive functions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13626
https://github.com/root-project/root/pull/13626:190,usability,interact,interactive,190,"[webgui] fix store file name, update jsroot; When producing single image for the canvas - do not add ""%d"" qualifier,. which is required for multiple files. Update JSROOT with minor fixes in interactive functions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13626
https://github.com/root-project/root/pull/13627:222,deployability,automat,automatic,222,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:492,deployability,log,lognormal,492,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:759,deployability,updat,updated,759,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:561,integrability,transform,transforming,561,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:538,interoperability,standard,standard,538,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:561,interoperability,transform,transforming,561,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:129,modifiability,paramet,parametrization,129,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:578,modifiability,variab,variables,578,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:492,safety,log,lognormal,492,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:729,safety,test,tested,729,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:759,safety,updat,updated,759,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:492,security,log,lognormal,492,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:759,security,updat,updated,759,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:222,testability,automat,automatic,222,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:492,testability,log,lognormal,492,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13627:729,testability,test,tested,729,"[RF][HS3] Improvements to the HS3 impelementation to bring it in line with the recent changes; # This Pull request:. Changes the parametrization of some of the PDFs and a few of their keys. In the process, a mechanism for automatic reparametrization is introduced. ## Changes or fixes:. - the HS3 implementation of RooExponential should invert the meaning of ""c"", such that the JSON represenation reads ""-c"" rather than ""c"". - RooPoisson should write out & read ""noRounding"" as ""integer"" . - lognormal should be adjusted to adhere to the standard definition by transforming the variables . - rename multinormal_dist to multivariate_normal_dist. - ""bounds"" now called ""edges"" for irregular binned histograms. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13627
https://github.com/root-project/root/pull/13628:277,energy efficiency,reduc,reduction,277,"[RF] Limit maximum number of thread blocks in RooFit CUDA code; The number of thread blocks in kernel calls should not be excessively large, it's sufficient if it's in the order of the number of streaming multiprocessors. In particular, this circumvents a problem with the NLL reduction kernels with grid sizes larger than 512. With this change, there are potentially less threads than events when summing likelihoods, so in the NLL reduction kernels, each thread also has to reduce a few elements in a loop. Closes #13603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13628
https://github.com/root-project/root/pull/13628:433,energy efficiency,reduc,reduction,433,"[RF] Limit maximum number of thread blocks in RooFit CUDA code; The number of thread blocks in kernel calls should not be excessively large, it's sufficient if it's in the order of the number of streaming multiprocessors. In particular, this circumvents a problem with the NLL reduction kernels with grid sizes larger than 512. With this change, there are potentially less threads than events when summing likelihoods, so in the NLL reduction kernels, each thread also has to reduce a few elements in a loop. Closes #13603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13628
https://github.com/root-project/root/pull/13628:476,energy efficiency,reduc,reduce,476,"[RF] Limit maximum number of thread blocks in RooFit CUDA code; The number of thread blocks in kernel calls should not be excessively large, it's sufficient if it's in the order of the number of streaming multiprocessors. In particular, this circumvents a problem with the NLL reduction kernels with grid sizes larger than 512. With this change, there are potentially less threads than events when summing likelihoods, so in the NLL reduction kernels, each thread also has to reduce a few elements in a loop. Closes #13603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13628
https://github.com/root-project/root/pull/13628:386,integrability,event,events,386,"[RF] Limit maximum number of thread blocks in RooFit CUDA code; The number of thread blocks in kernel calls should not be excessively large, it's sufficient if it's in the order of the number of streaming multiprocessors. In particular, this circumvents a problem with the NLL reduction kernels with grid sizes larger than 512. With this change, there are potentially less threads than events when summing likelihoods, so in the NLL reduction kernels, each thread also has to reduce a few elements in a loop. Closes #13603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13628
https://github.com/root-project/root/pull/13628:205,performance,multiprocessor,multiprocessors,205,"[RF] Limit maximum number of thread blocks in RooFit CUDA code; The number of thread blocks in kernel calls should not be excessively large, it's sufficient if it's in the order of the number of streaming multiprocessors. In particular, this circumvents a problem with the NLL reduction kernels with grid sizes larger than 512. With this change, there are potentially less threads than events when summing likelihoods, so in the NLL reduction kernels, each thread also has to reduce a few elements in a loop. Closes #13603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13628
https://github.com/root-project/root/pull/13628:509,usability,Close,Closes,509,"[RF] Limit maximum number of thread blocks in RooFit CUDA code; The number of thread blocks in kernel calls should not be excessively large, it's sufficient if it's in the order of the number of streaming multiprocessors. In particular, this circumvents a problem with the NLL reduction kernels with grid sizes larger than 512. With this change, there are potentially less threads than events when summing likelihoods, so in the NLL reduction kernels, each thread also has to reduce a few elements in a loop. Closes #13603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13628
https://github.com/root-project/root/pull/13629:5,availability,Consist,Consistent,5,"[RF] Consistent RooCmdArg names for all `RooFit::Import()` overloads; There are different overloads of `RooFit::Import()` for importing different object types to RooFit dataset classes. However, they return a `RooCmdArg` that is named after the type of the imported object. That causes some inconsistencies. For example, if you import a map of `std::unique_ptr<RooDataHist>`, the name will be different than for `RooDataHist*` because there is a special overload for the latter. It is better to fixup this inconsistency, and then disentangle the different types in the functions that consume these `RooFit::Import()` command arguments. This caused some trouble when importing RooDataHists into a combined dataset, which is why this fix is coming now. These changes are covered by the tutorial tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13629
https://github.com/root-project/root/pull/13629:793,safety,test,tests,793,"[RF] Consistent RooCmdArg names for all `RooFit::Import()` overloads; There are different overloads of `RooFit::Import()` for importing different object types to RooFit dataset classes. However, they return a `RooCmdArg` that is named after the type of the imported object. That causes some inconsistencies. For example, if you import a map of `std::unique_ptr<RooDataHist>`, the name will be different than for `RooDataHist*` because there is a special overload for the latter. It is better to fixup this inconsistency, and then disentangle the different types in the functions that consume these `RooFit::Import()` command arguments. This caused some trouble when importing RooDataHists into a combined dataset, which is why this fix is coming now. These changes are covered by the tutorial tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13629
https://github.com/root-project/root/pull/13629:793,testability,test,tests,793,"[RF] Consistent RooCmdArg names for all `RooFit::Import()` overloads; There are different overloads of `RooFit::Import()` for importing different object types to RooFit dataset classes. However, they return a `RooCmdArg` that is named after the type of the imported object. That causes some inconsistencies. For example, if you import a map of `std::unique_ptr<RooDataHist>`, the name will be different than for `RooDataHist*` because there is a special overload for the latter. It is better to fixup this inconsistency, and then disentangle the different types in the functions that consume these `RooFit::Import()` command arguments. This caused some trouble when importing RooDataHists into a combined dataset, which is why this fix is coming now. These changes are covered by the tutorial tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13629
https://github.com/root-project/root/pull/13629:5,usability,Consist,Consistent,5,"[RF] Consistent RooCmdArg names for all `RooFit::Import()` overloads; There are different overloads of `RooFit::Import()` for importing different object types to RooFit dataset classes. However, they return a `RooCmdArg` that is named after the type of the imported object. That causes some inconsistencies. For example, if you import a map of `std::unique_ptr<RooDataHist>`, the name will be different than for `RooDataHist*` because there is a special overload for the latter. It is better to fixup this inconsistency, and then disentangle the different types in the functions that consume these `RooFit::Import()` command arguments. This caused some trouble when importing RooDataHists into a combined dataset, which is why this fix is coming now. These changes are covered by the tutorial tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13629
https://github.com/root-project/root/pull/13629:617,usability,command,command,617,"[RF] Consistent RooCmdArg names for all `RooFit::Import()` overloads; There are different overloads of `RooFit::Import()` for importing different object types to RooFit dataset classes. However, they return a `RooCmdArg` that is named after the type of the imported object. That causes some inconsistencies. For example, if you import a map of `std::unique_ptr<RooDataHist>`, the name will be different than for `RooDataHist*` because there is a special overload for the latter. It is better to fixup this inconsistency, and then disentangle the different types in the functions that consume these `RooFit::Import()` command arguments. This caused some trouble when importing RooDataHists into a combined dataset, which is why this fix is coming now. These changes are covered by the tutorial tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13629
https://github.com/root-project/root/pull/13630:699,deployability,fail,fails,699,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:95,integrability,event,events,95,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:631,integrability,event,events,631,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:510,performance,concurren,concurrently,510,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:537,performance,time,timeout,537,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:607,performance,time,timers,607,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:688,performance,time,timers,688,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:717,performance,time,timeout,717,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:758,performance,time,timeout,758,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:795,performance,time,timer,795,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:699,reliability,fail,fails,699,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:537,safety,timeout,timeout,537,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:717,safety,timeout,timeout,717,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:758,safety,timeout,timeout,758,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:465,security,trust,trust,465,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:350,testability,simpl,simply,350,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:457,testability,simpl,simply,457,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:55,usability,widget,widgets,55,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:178,usability,interact,interactive,178,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:350,usability,simpl,simply,350,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/pull/13630:457,usability,simpl,simply,457,"[webgui] correctly use python processing thread in web widgets; pyROOT uses special thread for events processing, where `gSystem->ProcessEvents()` are called. Both in script and interactive mode. Problem that thread id is not known from beginning and changing once when running python in script mode. Therefore special mode is now implemented, which simply uses `gSystem->ProcessEvents()` calls to allow processing. of web-windows communication. RWebWindow simply ""trust"" that ProcessEvents will not be called concurrently. Also improve timeout handling in THttpServer and in TWebCanvas. Both using special timers to process their events. While it is not always possible `TurnOn/TurnOff` timers (it fails from inside timeout handler), just increase/decrease timeout interval, but always let run timer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13630
https://github.com/root-project/root/issues/13631:372,availability,Operat,Operating,372,"LiveVisualize does not update canvas on Jupyter notebook; ### Explain what you would like to see improved and how. The LiveVisualize feature in ROOT does not update the canvas when used in Jupyter Notebooks, resulting in the canvas not being continuously refreshed with new plots as expected. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. **Repro:**. ```. if __name__ == ""__main__"":. connection = create_connection(). num_entries = 1000000. d = RDataFrame(num_entries, daskclient=connection, npartitions=5). dd = d.Define(""x"", ""rdfentry_"").Define(""y"", ""x*x""). . h = dd.Histo1D((""hist"", ""hist"", 100, 0, 20), ""x"") . LiveVisualize([h]). . c = ROOT.TCanvas(). c.Draw(). h.Draw(). c.Update(). ```. **Expected Result:**. The canvas should continuously update with new histogram values, reflecting partial results being merged in real-time. **Actual Result:**. The canvas does not update during the execution, and the final result is only displayed after the computation graph completes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:23,deployability,updat,update,23,"LiveVisualize does not update canvas on Jupyter notebook; ### Explain what you would like to see improved and how. The LiveVisualize feature in ROOT does not update the canvas when used in Jupyter Notebooks, resulting in the canvas not being continuously refreshed with new plots as expected. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. **Repro:**. ```. if __name__ == ""__main__"":. connection = create_connection(). num_entries = 1000000. d = RDataFrame(num_entries, daskclient=connection, npartitions=5). dd = d.Define(""x"", ""rdfentry_"").Define(""y"", ""x*x""). . h = dd.Histo1D((""hist"", ""hist"", 100, 0, 20), ""x"") . LiveVisualize([h]). . c = ROOT.TCanvas(). c.Draw(). h.Draw(). c.Update(). ```. **Expected Result:**. The canvas should continuously update with new histogram values, reflecting partial results being merged in real-time. **Actual Result:**. The canvas does not update during the execution, and the final result is only displayed after the computation graph completes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:158,deployability,updat,update,158,"LiveVisualize does not update canvas on Jupyter notebook; ### Explain what you would like to see improved and how. The LiveVisualize feature in ROOT does not update the canvas when used in Jupyter Notebooks, resulting in the canvas not being continuously refreshed with new plots as expected. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. **Repro:**. ```. if __name__ == ""__main__"":. connection = create_connection(). num_entries = 1000000. d = RDataFrame(num_entries, daskclient=connection, npartitions=5). dd = d.Define(""x"", ""rdfentry_"").Define(""y"", ""x*x""). . h = dd.Histo1D((""hist"", ""hist"", 100, 0, 20), ""x"") . LiveVisualize([h]). . c = ROOT.TCanvas(). c.Draw(). h.Draw(). c.Update(). ```. **Expected Result:**. The canvas should continuously update with new histogram values, reflecting partial results being merged in real-time. **Actual Result:**. The canvas does not update during the execution, and the final result is only displayed after the computation graph completes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:242,deployability,continu,continuously,242,"LiveVisualize does not update canvas on Jupyter notebook; ### Explain what you would like to see improved and how. The LiveVisualize feature in ROOT does not update the canvas when used in Jupyter Notebooks, resulting in the canvas not being continuously refreshed with new plots as expected. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. **Repro:**. ```. if __name__ == ""__main__"":. connection = create_connection(). num_entries = 1000000. d = RDataFrame(num_entries, daskclient=connection, npartitions=5). dd = d.Define(""x"", ""rdfentry_"").Define(""y"", ""x*x""). . h = dd.Histo1D((""hist"", ""hist"", 100, 0, 20), ""x"") . LiveVisualize([h]). . c = ROOT.TCanvas(). c.Draw(). h.Draw(). c.Update(). ```. **Expected Result:**. The canvas should continuously update with new histogram values, reflecting partial results being merged in real-time. **Actual Result:**. The canvas does not update during the execution, and the final result is only displayed after the computation graph completes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:302,deployability,version,version,302,"LiveVisualize does not update canvas on Jupyter notebook; ### Explain what you would like to see improved and how. The LiveVisualize feature in ROOT does not update the canvas when used in Jupyter Notebooks, resulting in the canvas not being continuously refreshed with new plots as expected. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. **Repro:**. ```. if __name__ == ""__main__"":. connection = create_connection(). num_entries = 1000000. d = RDataFrame(num_entries, daskclient=connection, npartitions=5). dd = d.Define(""x"", ""rdfentry_"").Define(""y"", ""x*x""). . h = dd.Histo1D((""hist"", ""hist"", 100, 0, 20), ""x"") . LiveVisualize([h]). . c = ROOT.TCanvas(). c.Draw(). h.Draw(). c.Update(). ```. **Expected Result:**. The canvas should continuously update with new histogram values, reflecting partial results being merged in real-time. **Actual Result:**. The canvas does not update during the execution, and the final result is only displayed after the computation graph completes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:325,deployability,Instal,Installation,325,"LiveVisualize does not update canvas on Jupyter notebook; ### Explain what you would like to see improved and how. The LiveVisualize feature in ROOT does not update the canvas when used in Jupyter Notebooks, resulting in the canvas not being continuously refreshed with new plots as expected. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. **Repro:**. ```. if __name__ == ""__main__"":. connection = create_connection(). num_entries = 1000000. d = RDataFrame(num_entries, daskclient=connection, npartitions=5). dd = d.Define(""x"", ""rdfentry_"").Define(""y"", ""x*x""). . h = dd.Histo1D((""hist"", ""hist"", 100, 0, 20), ""x"") . LiveVisualize([h]). . c = ROOT.TCanvas(). c.Draw(). h.Draw(). c.Update(). ```. **Expected Result:**. The canvas should continuously update with new histogram values, reflecting partial results being merged in real-time. **Actual Result:**. The canvas does not update during the execution, and the final result is only displayed after the computation graph completes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
https://github.com/root-project/root/issues/13631:764,deployability,Updat,Update,764,"LiveVisualize does not update canvas on Jupyter notebook; ### Explain what you would like to see improved and how. The LiveVisualize feature in ROOT does not update the canvas when used in Jupyter Notebooks, resulting in the canvas not being continuously refreshed with new plots as expected. ### ROOT version. v6.29/01. ### Installation method. Compiled from source. ### Operating system. Fedora 38. ### Additional context. **Repro:**. ```. if __name__ == ""__main__"":. connection = create_connection(). num_entries = 1000000. d = RDataFrame(num_entries, daskclient=connection, npartitions=5). dd = d.Define(""x"", ""rdfentry_"").Define(""y"", ""x*x""). . h = dd.Histo1D((""hist"", ""hist"", 100, 0, 20), ""x"") . LiveVisualize([h]). . c = ROOT.TCanvas(). c.Draw(). h.Draw(). c.Update(). ```. **Expected Result:**. The canvas should continuously update with new histogram values, reflecting partial results being merged in real-time. **Actual Result:**. The canvas does not update during the execution, and the final result is only displayed after the computation graph completes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13631
