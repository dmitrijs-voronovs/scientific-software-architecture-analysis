id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/6637:1761,reliability,doe,does,1761,"This is a C++ reproducer of what's going on:. ```cpp. class MyCppClass {. public:. virtual void MyMethod() { cout << ""In MyCppClass"" << endl; }. virtual ~MyCppClass() {}. };. namespace __cppyy_internal {. class Dispatcher1 : public ::MyCppClass {. public:. virtual ~Dispatcher1() {}. void MyMethod() {. cout << ""In Dispatcher1"" << endl;. }. using MyCppClass::MyCppClass;. Dispatcher1() {}. Dispatcher1(const Dispatcher1& other) : MyCppClass(other) {}. };. }. TInterpreter::CallFuncIFacePtr_t GetCallFunc(TFunction *f). {. CallFunc_t* callf = gInterpreter->CallFunc_Factory();. MethodInfo_t* meth = gInterpreter->MethodInfo_Factory(f->GetDeclId());. gInterpreter->CallFunc_SetFunc(callf, meth);. gInterpreter->MethodInfo_Delete(meth);. auto oldErrLvl = gErrorIgnoreLevel;. gErrorIgnoreLevel = kFatal;. auto faceptr = gInterpreter->CallFunc_IFacePtr(callf);. gErrorIgnoreLevel = oldErrLvl;. gInterpreter->CallFunc_Delete(callf);. return faceptr;. }. void root_6637(). {. TClassRef c0(""MyCppClass"");. TFunction *f0 = (TFunction*)c0->GetListOfMethods()->At(0);. cout << ""METHOD: "" << f0->GetPrototype() << endl;. const TInterpreter::CallFuncIFacePtr_t& faceptr0 = GetCallFunc(f0);. __cppyy_internal::Dispatcher1 *d = new __cppyy_internal::Dispatcher1();. void* smallbuf0[8];. void* objresult0 = nullptr;. faceptr0.fGeneric((void*)d, 0, smallbuf0, &objresult0);. }. ```. The macro above prints:. ```. METHOD: void MyCppClass::MyMethod(). In Dispatcher1. ```. So I'm trying to invoke `MyCppClass::MyMethod()` on a `Dispatcher1` object, but what is invoked is `Dispatcher1::MyMethod()`. To be checked with @Axel-Naumann if the TCling code above should (and is intended to) do the equivalent of `d->MyCppClass::MyMethod()` or it should behave as `d->MyMethod()` (as it does right now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:103,performance,I/O,I/O,103,I'd say that's indeed the expected behavior; I'm fairly certain that hell will break loose e.g. in the I/O if we were to change this. @pcanal do you have anything to add here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:35,usability,behavi,behavior,35,I'd say that's indeed the expected behavior; I'm fairly certain that hell will break loose e.g. in the I/O if we were to change this. @pcanal do you have anything to add here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:106,integrability,wrap,wrapper,106,"Yes, this worked in the old PyROOT. As far as I understand, this worked because there was no `Dispatcher` wrapper class in between the Python class and the C++ base class. Therefore, the proxied C++ object was a base class object, not a `Dispatcher` object, and the invocation of the base class `MyMethod` on that object worked with a code equivalent to the one in my C++ reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:106,interoperability,wrapper,wrapper,106,"Yes, this worked in the old PyROOT. As far as I understand, this worked because there was no `Dispatcher` wrapper class in between the Python class and the C++ base class. Therefore, the proxied C++ object was a base class object, not a `Dispatcher` object, and the invocation of the base class `MyMethod` on that object worked with a code equivalent to the one in my C++ reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:187,interoperability,prox,proxied,187,"Yes, this worked in the old PyROOT. As far as I understand, this worked because there was no `Dispatcher` wrapper class in between the Python class and the C++ base class. Therefore, the proxied C++ object was a base class object, not a `Dispatcher` object, and the invocation of the base class `MyMethod` on that object worked with a code equivalent to the one in my C++ reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:48,testability,understand,understand,48,"Yes, this worked in the old PyROOT. As far as I understand, this worked because there was no `Dispatcher` wrapper class in between the Python class and the C++ base class. Therefore, the proxied C++ object was a base class object, not a `Dispatcher` object, and the invocation of the base class `MyMethod` on that object worked with a code equivalent to the one in my C++ reproducer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:250,deployability,version,versions,250,"Sorry, my question was specifically about the old callfunc / member iteration implementation. I.e. is [your C++ example](https://github.com/root-project/root/issues/6637#issuecomment-709291247) also calling the derived class's function in older ROOT versions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:250,integrability,version,versions,250,"Sorry, my question was specifically about the old callfunc / member iteration implementation. I.e. is [your C++ example](https://github.com/root-project/root/issues/6637#issuecomment-709291247) also calling the derived class's function in older ROOT versions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:23,interoperability,specif,specifically,23,"Sorry, my question was specifically about the old callfunc / member iteration implementation. I.e. is [your C++ example](https://github.com/root-project/root/issues/6637#issuecomment-709291247) also calling the derived class's function in older ROOT versions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:250,modifiability,version,versions,250,"Sorry, my question was specifically about the old callfunc / member iteration implementation. I.e. is [your C++ example](https://github.com/root-project/root/issues/6637#issuecomment-709291247) also calling the derived class's function in older ROOT versions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:177,deployability,version,versions,177,"> Sorry, my question was specifically about the old callfunc / member iteration implementation. I.e. is your C++ example also calling the derived class's function in older ROOT versions? Yes, I just tried my example with 6.20/06, 6.18/04 and 6.16/00, all of them call the derived class's function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:177,integrability,version,versions,177,"> Sorry, my question was specifically about the old callfunc / member iteration implementation. I.e. is your C++ example also calling the derived class's function in older ROOT versions? Yes, I just tried my example with 6.20/06, 6.18/04 and 6.16/00, all of them call the derived class's function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:25,interoperability,specif,specifically,25,"> Sorry, my question was specifically about the old callfunc / member iteration implementation. I.e. is your C++ example also calling the derived class's function in older ROOT versions? Yes, I just tried my example with 6.20/06, 6.18/04 and 6.16/00, all of them call the derived class's function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:177,modifiability,version,versions,177,"> Sorry, my question was specifically about the old callfunc / member iteration implementation. I.e. is your C++ example also calling the derived class's function in older ROOT versions? Yes, I just tried my example with 6.20/06, 6.18/04 and 6.16/00, all of them call the derived class's function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:684,energy efficiency,current,current,684,"This seems to be a long standing ""feature"". When the I/O used to rely on the interpreter for streaming, we even had to introduce Class::StreamerNVirtual to work around the missing feature. > I'm fairly certain that hell will break loose e.g. in the I/O if we were to change this. . I think it would be okay as the I/O does not rely on CallFunc (but on generated accelerator functions) to work. > I'd say that's indeed the expected behavior; . Yes, this is the most commonly expected behavior but for the same reasons that C++ has the notation `d->MyCppClass::MyMethod()` there are cases where you would want to be able to call an instance of the virtual function explicitly. With the current implementation of TClingCallFunc (it generates text), it would be trivial to add the option (i.e. add the ```::MyCppClass``` in the right place(s) when requested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:53,performance,I/O,I/O,53,"This seems to be a long standing ""feature"". When the I/O used to rely on the interpreter for streaming, we even had to introduce Class::StreamerNVirtual to work around the missing feature. > I'm fairly certain that hell will break loose e.g. in the I/O if we were to change this. . I think it would be okay as the I/O does not rely on CallFunc (but on generated accelerator functions) to work. > I'd say that's indeed the expected behavior; . Yes, this is the most commonly expected behavior but for the same reasons that C++ has the notation `d->MyCppClass::MyMethod()` there are cases where you would want to be able to call an instance of the virtual function explicitly. With the current implementation of TClingCallFunc (it generates text), it would be trivial to add the option (i.e. add the ```::MyCppClass``` in the right place(s) when requested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:249,performance,I/O,I/O,249,"This seems to be a long standing ""feature"". When the I/O used to rely on the interpreter for streaming, we even had to introduce Class::StreamerNVirtual to work around the missing feature. > I'm fairly certain that hell will break loose e.g. in the I/O if we were to change this. . I think it would be okay as the I/O does not rely on CallFunc (but on generated accelerator functions) to work. > I'd say that's indeed the expected behavior; . Yes, this is the most commonly expected behavior but for the same reasons that C++ has the notation `d->MyCppClass::MyMethod()` there are cases where you would want to be able to call an instance of the virtual function explicitly. With the current implementation of TClingCallFunc (it generates text), it would be trivial to add the option (i.e. add the ```::MyCppClass``` in the right place(s) when requested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:314,performance,I/O,I/O,314,"This seems to be a long standing ""feature"". When the I/O used to rely on the interpreter for streaming, we even had to introduce Class::StreamerNVirtual to work around the missing feature. > I'm fairly certain that hell will break loose e.g. in the I/O if we were to change this. . I think it would be okay as the I/O does not rely on CallFunc (but on generated accelerator functions) to work. > I'd say that's indeed the expected behavior; . Yes, this is the most commonly expected behavior but for the same reasons that C++ has the notation `d->MyCppClass::MyMethod()` there are cases where you would want to be able to call an instance of the virtual function explicitly. With the current implementation of TClingCallFunc (it generates text), it would be trivial to add the option (i.e. add the ```::MyCppClass``` in the right place(s) when requested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:318,reliability,doe,does,318,"This seems to be a long standing ""feature"". When the I/O used to rely on the interpreter for streaming, we even had to introduce Class::StreamerNVirtual to work around the missing feature. > I'm fairly certain that hell will break loose e.g. in the I/O if we were to change this. . I think it would be okay as the I/O does not rely on CallFunc (but on generated accelerator functions) to work. > I'd say that's indeed the expected behavior; . Yes, this is the most commonly expected behavior but for the same reasons that C++ has the notation `d->MyCppClass::MyMethod()` there are cases where you would want to be able to call an instance of the virtual function explicitly. With the current implementation of TClingCallFunc (it generates text), it would be trivial to add the option (i.e. add the ```::MyCppClass``` in the right place(s) when requested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:431,usability,behavi,behavior,431,"This seems to be a long standing ""feature"". When the I/O used to rely on the interpreter for streaming, we even had to introduce Class::StreamerNVirtual to work around the missing feature. > I'm fairly certain that hell will break loose e.g. in the I/O if we were to change this. . I think it would be okay as the I/O does not rely on CallFunc (but on generated accelerator functions) to work. > I'd say that's indeed the expected behavior; . Yes, this is the most commonly expected behavior but for the same reasons that C++ has the notation `d->MyCppClass::MyMethod()` there are cases where you would want to be able to call an instance of the virtual function explicitly. With the current implementation of TClingCallFunc (it generates text), it would be trivial to add the option (i.e. add the ```::MyCppClass``` in the right place(s) when requested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:483,usability,behavi,behavior,483,"This seems to be a long standing ""feature"". When the I/O used to rely on the interpreter for streaming, we even had to introduce Class::StreamerNVirtual to work around the missing feature. > I'm fairly certain that hell will break loose e.g. in the I/O if we were to change this. . I think it would be okay as the I/O does not rely on CallFunc (but on generated accelerator functions) to work. > I'd say that's indeed the expected behavior; . Yes, this is the most commonly expected behavior but for the same reasons that C++ has the notation `d->MyCppClass::MyMethod()` there are cases where you would want to be able to call an instance of the virtual function explicitly. With the current implementation of TClingCallFunc (it generates text), it would be trivial to add the option (i.e. add the ```::MyCppClass``` in the right place(s) when requested.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:899,availability,restor,restoring,899,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:785,deployability,updat,updated-pyroot-in-current-master-,785,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:803,energy efficiency,current,current-master-,803,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:178,integrability,pub,public,178,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:307,integrability,pub,public,307,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:328,integrability,pub,public,328,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:731,integrability,discover,discovered,731,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:731,interoperability,discover,discovered,731,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:90,modifiability,interm,intermediate,90,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:899,reliability,restor,restoring,899,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:785,safety,updat,updated-pyroot-in-current-master-,785,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:785,security,updat,updated-pyroot-in-current-master-,785,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:569,usability,support,support,569,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:697,usability,user,user,697,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:731,usability,discov,discovered,731,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:925,usability,behavi,behavior,925,"I would consider this a low priority item. One can easily work around the problem with an intermediate C++ class:. ```python. import cppyy. cppyy.cppdef("""""". class MyCppClass {. public:. virtual void MyMethod() { std::cout << ""In C++"" << std::endl; }. virtual ~MyCppClass() {}. };. class MyCppClassBridge : public MyCppClass {. public:. void _MyMethodBase() { MyCppClass::MyMethod(); }. };. """"""). class MyPyClass(cppyy.gbl.MyCppClassBridge):. def MyMethod(self):. self._MyMethodBase(). print(""In Python""). a = MyPyClass(). a.MyMethod(). ```. So we don't really need to support `super(MyPyClass, self).MyMethod()` to make the pattern of calling the base class method in PyROOT work. Given that the user in the forum who [originally discovered this problem](https://root-forum.cern.ch/t/updated-pyroot-in-current-master-6-23-01/41846?u=jonas) could also work around it, I would assign low priority to restoring this old PyROOT behavior from now more than 5 years ago.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:300,availability,sli,slightly,300,"In master, the trivial workaround is to use C++ base method call syntax instead of Python syntax:. ```python. class MyPyClass(cppyy.gbl.MyCppClass):. def MyMethod(self):. cppyy.gbl.MyCppClass.MyMethod(self). print(""In Python""). ```. (This requires additional support in `CallFunc` as the dispatch is slightly different.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:300,reliability,sli,slightly,300,"In master, the trivial workaround is to use C++ base method call syntax instead of Python syntax:. ```python. class MyPyClass(cppyy.gbl.MyCppClass):. def MyMethod(self):. cppyy.gbl.MyCppClass.MyMethod(self). print(""In Python""). ```. (This requires additional support in `CallFunc` as the dispatch is slightly different.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:259,usability,support,support,259,"In master, the trivial workaround is to use C++ base method call syntax instead of Python syntax:. ```python. class MyPyClass(cppyy.gbl.MyCppClass):. def MyMethod(self):. cppyy.gbl.MyCppClass.MyMethod(self). print(""In Python""). ```. (This requires additional support in `CallFunc` as the dispatch is slightly different.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/issues/6637:54,safety,avoid,avoiding,54,"Closing as this looks like this issue has workarounds avoiding calls like `super(MyPyClass, self).MyMethod()`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6637
https://github.com/root-project/root/pull/6639:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6639
https://github.com/root-project/root/issues/6640:261,availability,avail,available,261,Two possible solutions that came after a discussion with @eguiraud:. * Calling `TTree::SetMaxTreeSize()` in `TFileMerger::PartialMerge` with a very large number and then setting it back to the old value right after. This seems unfeasible since `TTree.h` is not available in the IO library objects. * Adding a new bit in TFile e.g. `kCanBeChanged` and test it in TTree::ChangeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6640
https://github.com/root-project/root/issues/6640:261,reliability,availab,available,261,Two possible solutions that came after a discussion with @eguiraud:. * Calling `TTree::SetMaxTreeSize()` in `TFileMerger::PartialMerge` with a very large number and then setting it back to the old value right after. This seems unfeasible since `TTree.h` is not available in the IO library objects. * Adding a new bit in TFile e.g. `kCanBeChanged` and test it in TTree::ChangeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6640
https://github.com/root-project/root/issues/6640:261,safety,avail,available,261,Two possible solutions that came after a discussion with @eguiraud:. * Calling `TTree::SetMaxTreeSize()` in `TFileMerger::PartialMerge` with a very large number and then setting it back to the old value right after. This seems unfeasible since `TTree.h` is not available in the IO library objects. * Adding a new bit in TFile e.g. `kCanBeChanged` and test it in TTree::ChangeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6640
https://github.com/root-project/root/issues/6640:351,safety,test,test,351,Two possible solutions that came after a discussion with @eguiraud:. * Calling `TTree::SetMaxTreeSize()` in `TFileMerger::PartialMerge` with a very large number and then setting it back to the old value right after. This seems unfeasible since `TTree.h` is not available in the IO library objects. * Adding a new bit in TFile e.g. `kCanBeChanged` and test it in TTree::ChangeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6640
https://github.com/root-project/root/issues/6640:261,security,availab,available,261,Two possible solutions that came after a discussion with @eguiraud:. * Calling `TTree::SetMaxTreeSize()` in `TFileMerger::PartialMerge` with a very large number and then setting it back to the old value right after. This seems unfeasible since `TTree.h` is not available in the IO library objects. * Adding a new bit in TFile e.g. `kCanBeChanged` and test it in TTree::ChangeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6640
https://github.com/root-project/root/issues/6640:351,testability,test,test,351,Two possible solutions that came after a discussion with @eguiraud:. * Calling `TTree::SetMaxTreeSize()` in `TFileMerger::PartialMerge` with a very large number and then setting it back to the old value right after. This seems unfeasible since `TTree.h` is not available in the IO library objects. * Adding a new bit in TFile e.g. `kCanBeChanged` and test it in TTree::ChangeFile,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6640
https://github.com/root-project/root/issues/6641:96,availability,state,state,96,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:157,availability,state,state,157,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:698,availability,operat,operation,698,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:746,availability,ping,ping,746,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:96,integrability,state,state,96,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:157,integrability,state,state,157,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:321,safety,test,test,321,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:82,security,modif,modifying,82,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:321,testability,test,test,321,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:584,usability,interact,interactions,584,"Hi @andrey-popov ,. TTreeReader has a built-in assumption that it is the only one modifying the state of its internal tree. The `GetBranch` call changes the state of the tree in a way that confuses TTreeReader when it looks at it at the next line. You can/should do this instead:. ```. TChain chain(""tree""); . chain.Add(""test*.root""); . std::cout << chain.GetBranch(""n"")->GetTitle() << std::endl; . TTreeReader reader; . reader.SetTree(&chain); . . TTreeReaderValue<int> n{reader, ""n""}; . std::cout << reader.GetEntries(true) << std::endl; // no warning. ```. and only have read-only interactions with the TTree/TChain as long as TTreeReader is working with it (`GetBranch` sounds like a read-only operation, but it's not). @pcanal @Axel-Naumann ping in case you have further comments or corrections.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:83,availability,operat,operations,83,"(another alternative is calling `reader.Restart()` after you perform non-read-only operations on the object returned by `reader.GetTree()`, before `TTreeReader` itself accesses the object).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:61,performance,perform,perform,61,"(another alternative is calling `reader.Restart()` after you perform non-read-only operations on the object returned by `reader.GetTree()`, before `TTreeReader` itself accesses the object).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:168,security,access,accesses,168,"(another alternative is calling `reader.Restart()` after you perform non-read-only operations on the object returned by `reader.GetTree()`, before `TTreeReader` itself accesses the object).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:61,usability,perform,perform,61,"(another alternative is calling `reader.Restart()` after you perform non-read-only operations on the object returned by `reader.GetTree()`, before `TTreeReader` itself accesses the object).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6641:131,usability,support,supported,131,"Hi,. as per my comments above, and discussion with @Axel-Naumann , this sequence of calls without a `Restart` in the middle is not supported. Closing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6641
https://github.com/root-project/root/issues/6642:42,reliability,doe,does,42,To explain a bit further:. ->SetMaximum() does not work as expected with THStack objects because of this issue. The maximum of the axis is always larger than the value set,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:87,deployability,stack,stacked,87,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:508,deployability,stack,stacked,508,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:545,energy efficiency,Draw,Draw,545,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:82,safety,test,test,82,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:136,safety,test,test,136,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:257,safety,test,test,257,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:379,safety,test,test,379,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:82,testability,test,test,82,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:136,testability,test,test,136,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:257,testability,test,test,257,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:379,testability,test,test,379,"Thanks for this report. A reproducer is:. ```. {. THStack *hs = new THStack(""hs"",""test stacked histograms"");. TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);. h1->FillRandom(""gaus"",20000);. h1->SetFillColor(kRed);. hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);. h2->FillRandom(""gaus"",15000);. h2->SetFillColor(kBlue);. hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);. h3->FillRandom(""gaus"",10000);. h3->SetFillColor(kGreen);. hs->Add(h3);. TCanvas *c1 = new TCanvas(""c1"",""stacked hists"",10,10,1000,800);. hs->Draw();. hs->SetMinimum(200.);. hs->SetMaximum(600.);. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:104,energy efficiency,Draw,Draw,104,"By the way, here is a possibly related issue:. - Make histogram. - SetMinimum(0). - SetMaximum(1000). - Draw a histogram. - Use interactive zoom function (left click hold mouse button along side y axis) to zoom axis. - this might be the same as SetRangeUser, I do not know. - Then right click ""unzoom"". - Plot does not return to origional y axis range (1000 is now above top of plot pad/drawing area)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:387,energy efficiency,draw,drawing,387,"By the way, here is a possibly related issue:. - Make histogram. - SetMinimum(0). - SetMaximum(1000). - Draw a histogram. - Use interactive zoom function (left click hold mouse button along side y axis) to zoom axis. - this might be the same as SetRangeUser, I do not know. - Then right click ""unzoom"". - Plot does not return to origional y axis range (1000 is now above top of plot pad/drawing area)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:310,reliability,doe,does,310,"By the way, here is a possibly related issue:. - Make histogram. - SetMinimum(0). - SetMaximum(1000). - Draw a histogram. - Use interactive zoom function (left click hold mouse button along side y axis) to zoom axis. - this might be the same as SetRangeUser, I do not know. - Then right click ""unzoom"". - Plot does not return to origional y axis range (1000 is now above top of plot pad/drawing area)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:128,usability,interact,interactive,128,"By the way, here is a possibly related issue:. - Make histogram. - SetMinimum(0). - SetMaximum(1000). - Draw a histogram. - Use interactive zoom function (left click hold mouse button along side y axis) to zoom axis. - this might be the same as SetRangeUser, I do not know. - Then right click ""unzoom"". - Plot does not return to origional y axis range (1000 is now above top of plot pad/drawing area)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:171,usability,mous,mouse,171,"By the way, here is a possibly related issue:. - Make histogram. - SetMinimum(0). - SetMaximum(1000). - Draw a histogram. - Use interactive zoom function (left click hold mouse button along side y axis) to zoom axis. - this might be the same as SetRangeUser, I do not know. - Then right click ""unzoom"". - Plot does not return to origional y axis range (1000 is now above top of plot pad/drawing area)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:0,safety,Compl,Completely,0,Completely different thing and normal behaviour as the zoom on the Y axis for TH1 is done using SetMinimum() and SetMaximum().,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:0,security,Compl,Completely,0,Completely different thing and normal behaviour as the zoom on the Y axis for TH1 is done using SetMinimum() and SetMaximum().,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:38,usability,behavi,behaviour,38,Completely different thing and normal behaviour as the zoom on the Y axis for TH1 is done using SetMinimum() and SetMaximum().,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6642:71,usability,behavi,behavior,71,@etejedor it is not a bug strictly speaking as @edbird is asking for a behavior change which sound reasonable. I am looking into it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6642
https://github.com/root-project/root/issues/6644:338,availability,consist,consistent,338,"I'd claim that this is not a bug, just maybe surprising behavior that can be addressed by thinking ;-) `if` is control flow, it doesn't have an expression type, so there's nothing to be printed. If we were to ""fix"" this, why would we not also ""fix"". ```. while (true) 1. ```. which currently (I claim correctly) prints nothing, but to be consistent with the `if` ""bug"" above should print lots and lots of `1`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:282,energy efficiency,current,currently,282,"I'd claim that this is not a bug, just maybe surprising behavior that can be addressed by thinking ;-) `if` is control flow, it doesn't have an expression type, so there's nothing to be printed. If we were to ""fix"" this, why would we not also ""fix"". ```. while (true) 1. ```. which currently (I claim correctly) prints nothing, but to be consistent with the `if` ""bug"" above should print lots and lots of `1`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:128,reliability,doe,doesn,128,"I'd claim that this is not a bug, just maybe surprising behavior that can be addressed by thinking ;-) `if` is control flow, it doesn't have an expression type, so there's nothing to be printed. If we were to ""fix"" this, why would we not also ""fix"". ```. while (true) 1. ```. which currently (I claim correctly) prints nothing, but to be consistent with the `if` ""bug"" above should print lots and lots of `1`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:111,security,control,control,111,"I'd claim that this is not a bug, just maybe surprising behavior that can be addressed by thinking ;-) `if` is control flow, it doesn't have an expression type, so there's nothing to be printed. If we were to ""fix"" this, why would we not also ""fix"". ```. while (true) 1. ```. which currently (I claim correctly) prints nothing, but to be consistent with the `if` ""bug"" above should print lots and lots of `1`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:111,testability,control,control,111,"I'd claim that this is not a bug, just maybe surprising behavior that can be addressed by thinking ;-) `if` is control flow, it doesn't have an expression type, so there's nothing to be printed. If we were to ""fix"" this, why would we not also ""fix"". ```. while (true) 1. ```. which currently (I claim correctly) prints nothing, but to be consistent with the `if` ""bug"" above should print lots and lots of `1`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:56,usability,behavi,behavior,56,"I'd claim that this is not a bug, just maybe surprising behavior that can be addressed by thinking ;-) `if` is control flow, it doesn't have an expression type, so there's nothing to be printed. If we were to ""fix"" this, why would we not also ""fix"". ```. while (true) 1. ```. which currently (I claim correctly) prints nothing, but to be consistent with the `if` ""bug"" above should print lots and lots of `1`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:338,usability,consist,consistent,338,"I'd claim that this is not a bug, just maybe surprising behavior that can be addressed by thinking ;-) `if` is control flow, it doesn't have an expression type, so there's nothing to be printed. If we were to ""fix"" this, why would we not also ""fix"". ```. while (true) 1. ```. which currently (I claim correctly) prints nothing, but to be consistent with the `if` ""bug"" above should print lots and lots of `1`s?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:342,availability,repair,repairing,342,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:794,availability,heal,heals,794,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:557,energy efficiency,current,current,557,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:572,energy efficiency,model,model,572,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:612,interoperability,compatib,compatible,612,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:132,reliability,doe,doesn,132,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:342,reliability,repair,repairing,342,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:662,safety,valid,valid,662,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:858,safety,compl,complexity,858,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:572,security,model,model,572,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:858,security,compl,complexity,858,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:65,usability,stop,stop,65,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:140,usability,help,help,140,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:380,usability,behavi,behavior,380,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:697,usability,user,users,697,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:829,usability,user,user,829,"OK, what about. ```. do 1 while (true)`. ```. ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. ```. if (true) { 1 }. ```. considered to print? What is. ```. switch (a) case 1: 42. ```. supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:457,availability,repair,repairing,457,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1288,availability,heal,heals,1288,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:622,energy efficiency,current,current,622,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1051,energy efficiency,current,current,1051,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1066,energy efficiency,model,model,1066,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1524,energy efficiency,current,current,1524,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1106,interoperability,compatib,compatible,1106,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:150,reliability,doe,doesn,150,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:457,reliability,repair,repairing,457,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1156,safety,valid,valid,1156,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1352,safety,compl,complexity,1352,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1066,security,model,model,1066,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1352,security,compl,complexity,1352,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:83,usability,stop,stop,83,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:158,usability,help,help,158,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:495,usability,behavi,behavior,495,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:662,usability,support,support,662,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:870,usability,user,user,870,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1191,usability,user,users,1191,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1323,usability,user,user,1323,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1653,usability,support,supporting,1653,"> OK, what about. > . > ```. > do 1 while (true)`. > ```. > . > ? I.e. where do we stop? (Note that this isn't parsable, and appending a trailing ';' doesn't help.). I think you just said what's the rule -- appending trailing ; and making the code compile. > . > For me, an inner block (even if the '{}' are omitted) is not considered by the value printer; changing that is likely not work it and will create many more inconsistencies than is warranted by ""repairing"" the seemingly inconsistent behavior of this ticket. To be more precise, why isn't. > . > ```. > if (true) { 1 }. > ```. This should not print because the current implementation makes it hard to support as it is implicit. Eg, we omit certain syntax and rely on fixing it. If the implementation was explicit and we had a smarter marker what should or should not print we could leave that decision to the user. Eg -- `if (true) {1;;}` print then all would be solved :). > . > considered to print? What is. > . > ```. > switch (a) case 1: 42. > ```. > . > supposed to print? I think the current mental model of the ""outer-most expression"" is compatible with the syntax (""add a ';' to make it valid C++"") and comprehensible for users; changing this is a design change that I am not convinced of as it might hurt more than it heals, and causes confusion on the user side plus lots of added complexity. I cannot agree with this. Fixing the particular bug is not a design change. Moving towards a generic explicit implementation based on a markers is. I think the current rule whether or not to print is ""the last expression without a trailing semicolon should print"". And I see no problem in supporting the switch case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:282,availability,consist,consistency,282,"> Moving towards a generic explicit implementation based on a markers is. I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:298,testability,simpl,simplicity,298,"> Moving towards a generic explicit implementation based on a markers is. I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:175,usability,statu,status,175,"> Moving towards a generic explicit implementation based on a markers is. I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:282,usability,consist,consistency,282,"> Moving towards a generic explicit implementation based on a markers is. I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:298,usability,simpl,simplicity,298,"> Moving towards a generic explicit implementation based on a markers is. I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:290,availability,consist,consistency,290,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:500,energy efficiency,current,current,500,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:306,testability,simpl,simplicity,306,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:183,usability,statu,status,183,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:290,usability,consist,consistency,290,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:306,usability,simpl,simplicity,306,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:452,usability,clear,clear,452,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:508,usability,behavi,behavior,508,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:602,usability,indicat,indicate,602,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? After reading the discussion, I have no clear opinion, but... What about preserving the current behavior plus the one that @vgvassilev suggests, i.e. a marker (e.g. NullStmt) can be used to indicate that the previous expression should be printed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:480,availability,mainten,maintenance,480,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:159,deployability,upgrad,upgrade,159,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:515,integrability,interfac,interfaces,515,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:515,interoperability,interfac,interfaces,515,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:159,modifiability,upgrad,upgrade,159,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:515,modifiability,interfac,interfaces,515,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:266,performance,time,time,266,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:456,performance,time,time,456,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:480,reliability,mainten,maintenance,480,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:80,testability,simpl,simple,80,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:50,usability,prefer,prefer,50,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:80,usability,simpl,simple,80,"IIUC a NullStmt would mean `if (true) {1;;}`. I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:488,availability,mainten,maintenance,488,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:167,deployability,upgrad,upgrade,167,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:523,integrability,interfac,interfaces,523,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:523,interoperability,interfac,interfaces,523,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:167,modifiability,upgrad,upgrade,167,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:523,modifiability,interfac,interfaces,523,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:274,performance,time,time,274,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:464,performance,time,time,464,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:488,reliability,mainten,maintenance,488,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:88,testability,simpl,simple,88,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:58,usability,prefer,prefer,58,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:88,usability,simpl,simple,88,"> IIUC a NullStmt would mean `if (true) {1;;}`. > . > I'd prefer to keep value printing simple and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. I agree with Axel. A smarter value printer is nice to have but we have enough more important issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:290,availability,consist,consistency,290,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:701,availability,operat,operators,701,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:918,availability,state,statement,918,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1063,availability,error,error,1063,"rkers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term mai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1098,availability,error,error,1098,"ho's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2063,availability,mainten,maintenance,2063,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1628,deployability,upgrad,upgrade,1628,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:918,integrability,state,statement,918,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2098,integrability,interfac,interfaces,2098,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2157,integrability,interfac,interfaces,2157,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2178,integrability,coupl,couple,2178,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2098,interoperability,interfac,interfaces,2098,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2157,interoperability,interfac,interfaces,2157,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:754,modifiability,exten,extend,754,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1628,modifiability,upgrad,upgrade,1628,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2098,modifiability,interfac,interfaces,2098,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2157,modifiability,interfac,interfaces,2157,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2178,modifiability,coupl,couple,2178,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1063,performance,error,error,1063,"rkers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term mai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1098,performance,error,error,1098,"ho's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1443,performance,time,time,1443,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1735,performance,time,time,1735,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2039,performance,time,time,2039,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:674,reliability,doe,does,674,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:745,reliability,doe,does,745,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:868,reliability,doe,does,868,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2063,reliability,mainten,maintenance,2063,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2134,reliability,doe,does,2134,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1063,safety,error,error,1063,"rkers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term mai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1098,safety,error,error,1098,"ho's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:306,testability,simpl,simplicity,306,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1180,testability,simpl,simple,1180,"status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is coupl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:2178,testability,coupl,couple,2178,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:183,usability,statu,status,183,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:290,usability,consist,consistency,290,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:306,usability,simpl,simplicity,306,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:666,usability,clear,clearly,666,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:825,usability,user,user-defined,825,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:942,usability,clear,clear,942,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:957,usability,stop,stop,957,"> > Moving towards a generic explicit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1027,usability,interact,interactive,1027,"icit implementation based on a markers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talkin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1063,usability,error,error,1063,"rkers is. > . > I cannot follow - who's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term mai",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1098,usability,error,error,1098,"ho's proposing to move to something, which explicit markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1150,usability,prefer,prefer,1150,"markers? I'm arguing that the status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1180,usability,simpl,simple,1180,"status quo (last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is coupl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:1855,usability,user,user,1855,"(last top-level expression's value is printed if missing trailing semicolon) should be kept for consistency and simplicity reasons. > . > Let's hear some other opinions here, e.g. @SimeonEhrig @jalopezg-uc3m @pcanal ? I do realize my post was terse. Here is more text as the discussion went in another direction. Since early days, as you already mentioned, the rule seems to be ""the last expression without a trailing semicolon should print"". If that is the rule, then it clearly does not handle short-hand operators. Namely, `if (x) expr`. That rule does not extend to your examples `do 1 while(true)` as `while` is not really an user-defined expression. `if (x) { expr }` does not fall there either as it is in a compound statement. It is pretty clear where we stop. The construct `if(x) expr`, as shown in the example, enables an interactive programming pattern wrt error handling where in case of an error we can just ask cling to print details. > I'd prefer to keep value printing simple. The implementation of what I propose requires 2-3 lines [here](https://github.com/vgvassilev/cling/blob/856f8e92f82f9037b3dbb27ae7f94add2ed6121f/lib/Utils/AST.cpp#L141-L152). And actually makes the value printing rule more comprehensible. It took me some time to realize what's wrong and I implemented it, so I'd say it would be less comprehensible to other people. > and instead invest where it's relevant: devtoolset, debug symbols, llvm upgrade (to llvm 11!), etc. This is a trade-off we should consciously do, and given that this is the first time I hear a request for value printing within nested blocks . We have had that in the past. I do not think having not user requests should be an argument against this bug. > I'm not yet convinced that it's worth the effort (and yes, that's an additional counter argument). And I'm not just talking dev time but also long-term maintenance: more code, more clang interfaces used. The implementation does not require clang interfaces and it is couple of lines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:97,availability,consist,consistency,97,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:420,availability,consist,consistency,420,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:8,integrability,coupl,couple,8,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:174,integrability,coupl,couple,174,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:8,modifiability,coupl,couple,8,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:174,modifiability,coupl,couple,174,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:281,reliability,doe,does,281,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:8,testability,coupl,couple,8,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:174,testability,coupl,couple,174,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:97,usability,consist,consistency,97,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:420,usability,consist,consistency,420,"> it is couple of lines. Well then. I'm still not convinced that it's an improvement in terms of consistency, but you seem to be convinced otherwise. Please make sure these ""couple of lines"" handle `if`, `while`, `switch` etc - to not increase inconsistency. Please make sure this does not introduce a lifetime issue with `if (int a = 42) a`. Please make sure `if (true) while (true) if (true) 42` is handled, again for consistency reasons.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:99,interoperability,convers,conversation,99,There is no consensus about this item and a few voices advocate to leave value printing as is. The conversation is also stale since 4 years. I am closing it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:334,availability,state,statement,334,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:399,availability,operat,operator,399,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:467,availability,error,error,467,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:24,energy efficiency,current,current,24,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:256,energy efficiency,current,current,256,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:334,integrability,state,statement,334,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:467,performance,error,error,467,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:467,safety,error,error,467,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:32,usability,behavi,behavior,32,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6644:467,usability,error,error,467,"Note, in my opinion the current behavior is to replace:. ```. expression_not_ending_with_semi_colon. ```. with the moral equivalent of . ```. auto tobeprinted = expression_not_ending_with_semi_colon;. std::cout << tobeprinted << std::endl;. ```. which the current implementation handles as expected: (for example by rejected the `if` statement (as in the original report) but accepting the tertiary operator). ```. root [0] auto x = if (true) 1;. ROOT_prompt_0:1:10: error: expected expression. auto x = if (true) 1;. ^. root [1] true ? 1 : 0. (int) 1. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6644
https://github.com/root-project/root/issues/6645:40,deployability,instal,installed,40,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:103,deployability,instal,install,103,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:149,deployability,depend,dependencies,149,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:149,integrability,depend,dependencies,149,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:149,modifiability,depend,dependencies,149,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:149,safety,depend,dependencies,149,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:939,security,auth,auth,939,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:149,testability,depend,dependencies,149,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:234,usability,command,command,234,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:334,usability,command,command,334,"Thanks for quick reaction! First, how I installed root - I followed. instructions on https://root.cern/install/,. originally fulfilling all required dependencies. for suse and up to the end. All went smoothly. At the end I issued the command source ../root_install/bin/thisroot.sh. and strted root. After invoking root. I entered the command new TBroser( it is shown in bug report). and it crashed! Waiting for you response, V.Kurbatov. On 2020-10-15 10:46, Enric Tejedor wrote:. > Thank you for the report @kurbatov-lang [1] ! Could you please provide. > a reproducer of how you get that crash? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-708966537. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOW4N6DHNM6LMQUBYDSK2SDTANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:19,deployability,build,build,19,"I think you should build root using some kind of ""built-in-png"" ... I guess @oshadura might know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:202,deployability,build,build,202,"How to use built-in-png? Should I ask @oshadura ? If yes,. send me,please, his e-mail, or I may. use https://github.com/oshadura? Thanks. On 2020-10-15 15:29, Olivier Couet wrote:. > I think you should build root using some kind of ""built-in-png"" ... I. > guess @oshadura [1] might know. > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/oshadura. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709282813. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOQD44X2EZTOFE23GLSK3TK7ANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:626,security,auth,auth,626,"How to use built-in-png? Should I ask @oshadura ? If yes,. send me,please, his e-mail, or I may. use https://github.com/oshadura? Thanks. On 2020-10-15 15:29, Olivier Couet wrote:. > I think you should build root using some kind of ""built-in-png"" ... I. > guess @oshadura [1] might know. > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/oshadura. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709282813. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXOQD44X2EZTOFE23GLSK3TK7ANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:51,deployability,build,building,51,@kurbatov-lang What are a CMake flags you used for building ROOT?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:121,deployability,build,build,121,@kurbatov-lang I see `libpng warning: Application built with libpng-1.2.55 but running with 1.6.34` which means that you build ROOT with one libpng and trying to use it with different. Can you please recheck it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:209,deployability,build,build,209,"Recheck - what does it mean? Thanks. On 2020-10-15 16:42, Oksana Shadura wrote:. > @kurbatov-lang [1] I see libpng warning: Application built with. > libpng-1.2.55 but running with 1.6.34 which means that you build ROOT. > with one libpng and trying to use it with different. Can you please. > recheck it? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709333031. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXJG3JULTAG472SIQSTSK3327ANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:15,reliability,doe,does,15,"Recheck - what does it mean? Thanks. On 2020-10-15 16:42, Oksana Shadura wrote:. > @kurbatov-lang [1] I see libpng warning: Application built with. > libpng-1.2.55 but running with 1.6.34 which means that you build ROOT. > with one libpng and trying to use it with different. Can you please. > recheck it? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709333031. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXJG3JULTAG472SIQSTSK3327ANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:649,security,auth,auth,649,"Recheck - what does it mean? Thanks. On 2020-10-15 16:42, Oksana Shadura wrote:. > @kurbatov-lang [1] I see libpng warning: Application built with. > libpng-1.2.55 but running with 1.6.34 which means that you build ROOT. > with one libpng and trying to use it with different. Can you please. > recheck it? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709333031. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXJG3JULTAG472SIQSTSK3327ANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:32,deployability,build,build,32,"Exactry as it is recommended in build. instructions in https://root.cern/install/(for build. from source)! Thanks. On 2020-10-15 16:37, Oksana Shadura wrote:. > @kurbatov-lang [1] What are a CMake flags you used for building ROOT? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709329905. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXNGHFL332PDVZRNIPTSK33IDANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:73,deployability,instal,install,73,"Exactry as it is recommended in build. instructions in https://root.cern/install/(for build. from source)! Thanks. On 2020-10-15 16:37, Oksana Shadura wrote:. > @kurbatov-lang [1] What are a CMake flags you used for building ROOT? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709329905. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXNGHFL332PDVZRNIPTSK33IDANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:86,deployability,build,build,86,"Exactry as it is recommended in build. instructions in https://root.cern/install/(for build. from source)! Thanks. On 2020-10-15 16:37, Oksana Shadura wrote:. > @kurbatov-lang [1] What are a CMake flags you used for building ROOT? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709329905. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXNGHFL332PDVZRNIPTSK33IDANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:216,deployability,build,building,216,"Exactry as it is recommended in build. instructions in https://root.cern/install/(for build. from source)! Thanks. On 2020-10-15 16:37, Oksana Shadura wrote:. > @kurbatov-lang [1] What are a CMake flags you used for building ROOT? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709329905. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXNGHFL332PDVZRNIPTSK33IDANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:574,security,auth,auth,574,"Exactry as it is recommended in build. instructions in https://root.cern/install/(for build. from source)! Thanks. On 2020-10-15 16:37, Oksana Shadura wrote:. > @kurbatov-lang [1] What are a CMake flags you used for building ROOT? > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [2], or unsubscribe. > [3]. > . > Links:. > ------. > [1] https://github.com/kurbatov-lang. > [2] . > https://github.com/root-project/root/issues/6645#issuecomment-709329905. > [3] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXNGHFL332PDVZRNIPTSK33IDANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:37,deployability,version,versions,37,It looks like you have two different versions of libpng installed in your system (probably it could be libpng and libpng16 packages installed in the same time). Can you please post here the full output of ``` cmake ``` comand you were using? I need to see which libpng ROOT picks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:56,deployability,instal,installed,56,It looks like you have two different versions of libpng installed in your system (probably it could be libpng and libpng16 packages installed in the same time). Can you please post here the full output of ``` cmake ``` comand you were using? I need to see which libpng ROOT picks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:132,deployability,instal,installed,132,It looks like you have two different versions of libpng installed in your system (probably it could be libpng and libpng16 packages installed in the same time). Can you please post here the full output of ``` cmake ``` comand you were using? I need to see which libpng ROOT picks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:37,integrability,version,versions,37,It looks like you have two different versions of libpng installed in your system (probably it could be libpng and libpng16 packages installed in the same time). Can you please post here the full output of ``` cmake ``` comand you were using? I need to see which libpng ROOT picks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:37,modifiability,version,versions,37,It looks like you have two different versions of libpng installed in your system (probably it could be libpng and libpng16 packages installed in the same time). Can you please post here the full output of ``` cmake ``` comand you were using? I need to see which libpng ROOT picks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:123,modifiability,pac,packages,123,It looks like you have two different versions of libpng installed in your system (probably it could be libpng and libpng16 packages installed in the same time). Can you please post here the full output of ``` cmake ``` comand you were using? I need to see which libpng ROOT picks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:154,performance,time,time,154,It looks like you have two different versions of libpng installed in your system (probably it could be libpng and libpng16 packages installed in the same time). Can you please post here the full output of ``` cmake ``` comand you were using? I need to see which libpng ROOT picks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:94,deployability,version,version,94,"I am looking for the next line in cmake output: ``` -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34"") ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:94,integrability,version,version,94,"I am looking for the next line in cmake output: ``` -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34"") ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:94,modifiability,version,version,94,"I am looking for the next line in cmake output: ``` -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34"") ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:287,deployability,version,version,287,"Dear Oksana! My colleague(D.Cyrkov) solved this problem. He is ready to give all the details. His e-mail -. cyrkov@jinr.ru. Best wishes,V.Kurbatov. On 2020-10-16 10:54, Oksana Shadura wrote:. > I am looking for the next line in cmake output: -- Found PNG:. > /usr/lib64/libpng.so (found version ""1.6.34""). > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [1], or unsubscribe. > [2]. > . > Links:. > ------. > [1] . > https://github.com/root-project/root/issues/6645#issuecomment-709888907. > [2] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXPDTBJ74ZVOUZDIRZDSK735DANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:287,integrability,version,version,287,"Dear Oksana! My colleague(D.Cyrkov) solved this problem. He is ready to give all the details. His e-mail -. cyrkov@jinr.ru. Best wishes,V.Kurbatov. On 2020-10-16 10:54, Oksana Shadura wrote:. > I am looking for the next line in cmake output: -- Found PNG:. > /usr/lib64/libpng.so (found version ""1.6.34""). > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [1], or unsubscribe. > [2]. > . > Links:. > ------. > [1] . > https://github.com/root-project/root/issues/6645#issuecomment-709888907. > [2] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXPDTBJ74ZVOUZDIRZDSK735DANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:287,modifiability,version,version,287,"Dear Oksana! My colleague(D.Cyrkov) solved this problem. He is ready to give all the details. His e-mail -. cyrkov@jinr.ru. Best wishes,V.Kurbatov. On 2020-10-16 10:54, Oksana Shadura wrote:. > I am looking for the next line in cmake output: -- Found PNG:. > /usr/lib64/libpng.so (found version ""1.6.34""). > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [1], or unsubscribe. > [2]. > . > Links:. > ------. > [1] . > https://github.com/root-project/root/issues/6645#issuecomment-709888907. > [2] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXPDTBJ74ZVOUZDIRZDSK735DANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/issues/6645:609,security,auth,auth,609,"Dear Oksana! My colleague(D.Cyrkov) solved this problem. He is ready to give all the details. His e-mail -. cyrkov@jinr.ru. Best wishes,V.Kurbatov. On 2020-10-16 10:54, Oksana Shadura wrote:. > I am looking for the next line in cmake output: -- Found PNG:. > /usr/lib64/libpng.so (found version ""1.6.34""). > . > --. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub [1], or unsubscribe. > [2]. > . > Links:. > ------. > [1] . > https://github.com/root-project/root/issues/6645#issuecomment-709888907. > [2] . > https://github.com/notifications/unsubscribe-auth/AQQ2QXPDTBJ74ZVOUZDIRZDSK735DANCNFSM4SRTOZQQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6645
https://github.com/root-project/root/pull/6646:11,deployability,build,build,11,@phsft-bot build on on mac1015/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6646
https://github.com/root-project/root/pull/6646:11,deployability,build,build,11,@phsft-bot build on mac1015/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6646
https://github.com/root-project/root/pull/6650:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_FLAGS=-DROOFIT_NEW_BATCH_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6650
https://github.com/root-project/root/pull/6650:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_FLAGS=-DROOFIT_NEW_BATCH_INTERFACE,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6650
https://github.com/root-project/root/issues/6651:145,integrability,batch,batch,145,"@linev could we perhaps test eve by producing svgs, verifying that they look as expected, make them the ref file, re-produce them in roottest in batch to then check identity?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:145,performance,batch,batch,145,"@linev could we perhaps test eve by producing svgs, verifying that they look as expected, make them the ref file, re-produce them in roottest in batch to then check identity?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:24,safety,test,test,24,"@linev could we perhaps test eve by producing svgs, verifying that they look as expected, make them the ref file, re-produce them in roottest in batch to then check identity?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:165,security,ident,identity,165,"@linev could we perhaps test eve by producing svgs, verifying that they look as expected, make them the ref file, re-produce them in roottest in batch to then check identity?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:24,testability,test,test,24,"@linev could we perhaps test eve by producing svgs, verifying that they look as expected, make them the ref file, re-produce them in roottest in batch to then check identity?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:52,testability,verif,verifying,52,"@linev could we perhaps test eve by producing svgs, verifying that they look as expected, make them the ref file, re-produce them in roottest in batch to then check identity?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:393,deployability,updat,update,393,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:215,safety,test,testing,215,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:275,safety,valid,valid,275,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:393,safety,updat,update,393,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:427,safety,test,testing,427,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:393,security,updat,update,393,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:215,testability,test,testing,215,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:236,testability,simpl,simply,236,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:427,testability,test,testing,427,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:104,usability,support,support,104,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:236,usability,simpl,simply,236,Neither svg no png/jpeg images can be produced by eve. With some efforts one could try to implement png support - but in my mind it is not necessary. This issue was created to let run different tutorials in special testing mode - . and simply checks that tutorials are still valid. Also there are several tutorials with loop like:. ```. while (gSystem->ProcessEvents()) {. // do something. // update canvas. }. ```. In special testing mode one could limit this loop by several seconds. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:71,usability,close,close,71,"@linev, @DuesselbergAdrian can we provide a PR for fixing this item or close it for good?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:269,performance,perform,perform,269,"As stayed in description, there is no easy way to enable http/webgui tutorials usage for testing. Every single macro need to be considered new and adjusted - if possible. As first step - one need to have global ""TESING_MODE"" flag which can be used in such tutorials to perform only minimal checks and exit - while normally these tutorials are interactive ones and runs forever.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:89,safety,test,testing,89,"As stayed in description, there is no easy way to enable http/webgui tutorials usage for testing. Every single macro need to be considered new and adjusted - if possible. As first step - one need to have global ""TESING_MODE"" flag which can be used in such tutorials to perform only minimal checks and exit - while normally these tutorials are interactive ones and runs forever.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:89,testability,test,testing,89,"As stayed in description, there is no easy way to enable http/webgui tutorials usage for testing. Every single macro need to be considered new and adjusted - if possible. As first step - one need to have global ""TESING_MODE"" flag which can be used in such tutorials to perform only minimal checks and exit - while normally these tutorials are interactive ones and runs forever.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:269,usability,perform,perform,269,"As stayed in description, there is no easy way to enable http/webgui tutorials usage for testing. Every single macro need to be considered new and adjusted - if possible. As first step - one need to have global ""TESING_MODE"" flag which can be used in such tutorials to perform only minimal checks and exit - while normally these tutorials are interactive ones and runs forever.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:282,usability,minim,minimal,282,"As stayed in description, there is no easy way to enable http/webgui tutorials usage for testing. Every single macro need to be considered new and adjusted - if possible. As first step - one need to have global ""TESING_MODE"" flag which can be used in such tutorials to perform only minimal checks and exit - while normally these tutorials are interactive ones and runs forever.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/issues/6651:343,usability,interact,interactive,343,"As stayed in description, there is no easy way to enable http/webgui tutorials usage for testing. Every single macro need to be considered new and adjusted - if possible. As first step - one need to have global ""TESING_MODE"" flag which can be used in such tutorials to perform only minimal checks and exit - while normally these tutorials are interactive ones and runs forever.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6651
https://github.com/root-project/root/pull/6656:14,safety,review,review,14,"@linev Please review. I have tested macro event_demo.C, boxset.C, lineset.C together with collection_proxies.C.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6656
https://github.com/root-project/root/pull/6656:29,safety,test,tested,29,"@linev Please review. I have tested macro event_demo.C, boxset.C, lineset.C together with collection_proxies.C.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6656
https://github.com/root-project/root/pull/6656:14,testability,review,review,14,"@linev Please review. I have tested macro event_demo.C, boxset.C, lineset.C together with collection_proxies.C.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6656
https://github.com/root-project/root/pull/6656:29,testability,test,tested,29,"@linev Please review. I have tested macro event_demo.C, boxset.C, lineset.C together with collection_proxies.C.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6656
https://github.com/root-project/root/pull/6656:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6656
https://github.com/root-project/root/pull/6656:0,availability,Failur,Failure,0,Failure on `mac1015/cxx17` has nothing to do with the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6656
https://github.com/root-project/root/pull/6656:0,deployability,Fail,Failure,0,Failure on `mac1015/cxx17` has nothing to do with the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6656
https://github.com/root-project/root/pull/6656:0,performance,Failur,Failure,0,Failure on `mac1015/cxx17` has nothing to do with the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6656
https://github.com/root-project/root/pull/6656:0,reliability,Fail,Failure,0,Failure on `mac1015/cxx17` has nothing to do with the code.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6656
https://github.com/root-project/root/issues/6657:48,usability,help,help,48,I encountered the same problem. Maybe @qati can help?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6657
https://github.com/root-project/root/issues/6657:89,usability,help,helpful,89,I believe I am encountering a similar issue. I can provide more details if they would be helpful.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6657
https://github.com/root-project/root/pull/6659:135,safety,test,tests,135,"Hi @couet , . > Have your run stressGraphics ? just in case... if that was a question to me -- no. So far I haven't looked at the ROOT tests ... . But that fixes #6375 . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6659
https://github.com/root-project/root/pull/6659:135,testability,test,tests,135,"Hi @couet , . > Have your run stressGraphics ? just in case... if that was a question to me -- no. So far I haven't looked at the ROOT tests ... . But that fixes #6375 . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6659
https://github.com/root-project/root/pull/6660:11,deployability,build,build,11,@phsft-bot build just on ROOT-fedora30/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6660
https://github.com/root-project/root/pull/6662:34,usability,Close,Close,34,"Seems to be, I need to change PR. Close for the momemnt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6662
https://github.com/root-project/root/pull/6664:12,availability,failur,failures,12,All Jenkins failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6664
https://github.com/root-project/root/pull/6664:12,deployability,fail,failures,12,All Jenkins failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6664
https://github.com/root-project/root/pull/6664:12,performance,failur,failures,12,All Jenkins failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6664
https://github.com/root-project/root/pull/6664:12,reliability,fail,failures,12,All Jenkins failures has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6664
https://github.com/root-project/root/pull/6665:18,usability,clear,clear,18,To be reopened to clear clutter.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6665
https://github.com/root-project/root/issues/6666:479,deployability,log,logic,479,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/issues/6666:287,energy efficiency,load,load,287,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/issues/6666:447,energy efficiency,load,loaded,447,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/issues/6666:607,energy efficiency,load,loaded,607,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/issues/6666:287,performance,load,load,287,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/issues/6666:447,performance,load,loaded,447,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/issues/6666:607,performance,load,loaded,607,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/issues/6666:479,safety,log,logic,479,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/issues/6666:479,security,log,logic,479,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/issues/6666:479,testability,log,logic,479,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:. ```. c = GetClass(someclassname). c->GetState() == TClass::kForwardDeclared. c->GetListOfDataMember() -> list is now created but empty. load and parse header file for `someclass`. c->GetState() == TClass::kInterpreted. c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). ```. The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6666
https://github.com/root-project/root/pull/6667:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6667
https://github.com/root-project/root/pull/6667:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6667
https://github.com/root-project/root/pull/6668:9,safety,test,test,9,Yep. The test is in https://github.com/root-project/roottest/pull/617,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6668:9,testability,test,test,9,Yep. The test is in https://github.com/root-project/roottest/pull/617,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6668:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6668:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6668:10,availability,failur,failure,10,The macos failure is unrelated (complains about an on-going git rebase).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6668:10,deployability,fail,failure,10,The macos failure is unrelated (complains about an on-going git rebase).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6668:10,performance,failur,failure,10,The macos failure is unrelated (complains about an on-going git rebase).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6668:10,reliability,fail,failure,10,The macos failure is unrelated (complains about an on-going git rebase).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6668:32,safety,compl,complains,32,The macos failure is unrelated (complains about an on-going git rebase).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6668:32,security,compl,complains,32,The macos failure is unrelated (complains about an on-going git rebase).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6668
https://github.com/root-project/root/pull/6669:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6669
https://github.com/root-project/root/pull/6669:8,availability,error,errors,8,All the errors are pre-existing and unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6669
https://github.com/root-project/root/pull/6669:8,performance,error,errors,8,All the errors are pre-existing and unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6669
https://github.com/root-project/root/pull/6669:8,safety,error,errors,8,All the errors are pre-existing and unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6669
https://github.com/root-project/root/pull/6669:8,usability,error,errors,8,All the errors are pre-existing and unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6669
https://github.com/root-project/root/issues/6670:200,deployability,patch,patch,200,Thanks for the complete report. Indeed there was a problem triggered by a change in order of initialization. The fix (PR #6680) will be merge shortly in the main branch as well as the v6.20 and v6.22 patch branches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:15,safety,compl,complete,15,Thanks for the complete report. Indeed there was a problem triggered by a change in order of initialization. The fix (PR #6680) will be merge shortly in the main branch as well as the v6.20 and v6.22 patch branches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:200,safety,patch,patch,200,Thanks for the complete report. Indeed there was a problem triggered by a change in order of initialization. The fix (PR #6680) will be merge shortly in the main branch as well as the v6.20 and v6.22 patch branches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:15,security,compl,complete,15,Thanks for the complete report. Indeed there was a problem triggered by a change in order of initialization. The fix (PR #6680) will be merge shortly in the main branch as well as the v6.20 and v6.22 patch branches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:200,security,patch,patch,200,Thanks for the complete report. Indeed there was a problem triggered by a change in order of initialization. The fix (PR #6680) will be merge shortly in the main branch as well as the v6.20 and v6.22 patch branches.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:22,deployability,patch,patch,22,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:37,deployability,observ,observed,37,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:214,deployability,patch,patch,214,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:289,modifiability,pac,packages,289,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:22,safety,patch,patch,22,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:214,safety,patch,patch,214,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:22,security,patch,patch,22,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:214,security,patch,patch,214,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:37,testability,observ,observed,37,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:143,testability,simpl,simple,143,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6670:143,usability,simpl,simple,143,"Thanks for this quick patch. We have observed similar issues also at other places of the code, when calling TClass::New(), but we always found simple workarounds there as well. Together with #6535 (where we have a patch as well) these were the *only* issues in the entire H1@HERA analysis packages when going from ROOT5.34 to ROOT6.20. albeit it was initially developed for ROOT2.25 and CINT. Congrats to the ROOT developers!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6670
https://github.com/root-project/root/issues/6671:102,usability,clear,clear,102,"Well, it's a DY sample, so physically spoken we would expect the upper one (?) Let's say, it's not so clear what's going on :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:173,deployability,releas,release,173,Can you enforce the same exact binning in both and also try with raw TTree and raw TTreeReader? If RDF or TTree is producing wrong histograms it's a critical issue if not a release blocker.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:235,energy efficiency,Draw,Draw,235,"@eguiraud Here you can find the plots produced with the same binning. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> c = ROOT.TCanvas(). >>> t.Draw('GenPart_pdgId>>h'). ```. ```python. >>> import ROOT. >>> c = ROOT.TCanvas(). >>> h = ROOT.RDataFrame('Events', 'DYJetsToLL.root').Histo1D(('h', 'h', 100, -20, 20), 'GenPart_pdgId'). >>> h.Draw(). ```. ![Screenshot from 2020-10-20 11-33-43](https://user-images.githubusercontent.com/6951222/96568572-63ad6800-12c8-11eb-8488-dcd108b019a8.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:429,energy efficiency,Draw,Draw,429,"@eguiraud Here you can find the plots produced with the same binning. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> c = ROOT.TCanvas(). >>> t.Draw('GenPart_pdgId>>h'). ```. ```python. >>> import ROOT. >>> c = ROOT.TCanvas(). >>> h = ROOT.RDataFrame('Events', 'DYJetsToLL.root').Histo1D(('h', 'h', 100, -20, 20), 'GenPart_pdgId'). >>> h.Draw(). ```. ![Screenshot from 2020-10-20 11-33-43](https://user-images.githubusercontent.com/6951222/96568572-63ad6800-12c8-11eb-8488-dcd108b019a8.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:152,integrability,Event,Events,152,"@eguiraud Here you can find the plots produced with the same binning. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> c = ROOT.TCanvas(). >>> t.Draw('GenPart_pdgId>>h'). ```. ```python. >>> import ROOT. >>> c = ROOT.TCanvas(). >>> h = ROOT.RDataFrame('Events', 'DYJetsToLL.root').Histo1D(('h', 'h', 100, -20, 20), 'GenPart_pdgId'). >>> h.Draw(). ```. ![Screenshot from 2020-10-20 11-33-43](https://user-images.githubusercontent.com/6951222/96568572-63ad6800-12c8-11eb-8488-dcd108b019a8.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:343,integrability,Event,Events,343,"@eguiraud Here you can find the plots produced with the same binning. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> c = ROOT.TCanvas(). >>> t.Draw('GenPart_pdgId>>h'). ```. ```python. >>> import ROOT. >>> c = ROOT.TCanvas(). >>> h = ROOT.RDataFrame('Events', 'DYJetsToLL.root').Histo1D(('h', 'h', 100, -20, 20), 'GenPart_pdgId'). >>> h.Draw(). ```. ![Screenshot from 2020-10-20 11-33-43](https://user-images.githubusercontent.com/6951222/96568572-63ad6800-12c8-11eb-8488-dcd108b019a8.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:489,usability,user,user-images,489,"@eguiraud Here you can find the plots produced with the same binning. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> c = ROOT.TCanvas(). >>> t.Draw('GenPart_pdgId>>h'). ```. ```python. >>> import ROOT. >>> c = ROOT.TCanvas(). >>> h = ROOT.RDataFrame('Events', 'DYJetsToLL.root').Histo1D(('h', 'h', 100, -20, 20), 'GenPart_pdgId'). >>> h.Draw(). ```. ![Screenshot from 2020-10-20 11-33-43](https://user-images.githubusercontent.com/6951222/96568572-63ad6800-12c8-11eb-8488-dcd108b019a8.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:114,integrability,Event,Events,114,"As a cross check: The manual count in RDF of the entries we see in the histogram. ```python. >>> ROOT.RDataFrame('Events', 'DYJetsToLL.root').Define('n', 'Sum(GenPart_pdgId == 11)').Sum('n').GetValue(). 36148151.0. >>> ROOT.RDataFrame('Events', 'DYJetsToLL.root').Define('n', 'Sum(GenPart_pdgId == 13)').Sum('n').GetValue(). 25642431.0. >>> ROOT.RDataFrame('Events', 'DYJetsToLL.root').Define('n', 'Sum(GenPart_pdgId == 15)').Sum('n').GetValue(). 18289536.0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:236,integrability,Event,Events,236,"As a cross check: The manual count in RDF of the entries we see in the histogram. ```python. >>> ROOT.RDataFrame('Events', 'DYJetsToLL.root').Define('n', 'Sum(GenPart_pdgId == 11)').Sum('n').GetValue(). 36148151.0. >>> ROOT.RDataFrame('Events', 'DYJetsToLL.root').Define('n', 'Sum(GenPart_pdgId == 13)').Sum('n').GetValue(). 25642431.0. >>> ROOT.RDataFrame('Events', 'DYJetsToLL.root').Define('n', 'Sum(GenPart_pdgId == 15)').Sum('n').GetValue(). 18289536.0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:358,integrability,Event,Events,358,"As a cross check: The manual count in RDF of the entries we see in the histogram. ```python. >>> ROOT.RDataFrame('Events', 'DYJetsToLL.root').Define('n', 'Sum(GenPart_pdgId == 11)').Sum('n').GetValue(). 36148151.0. >>> ROOT.RDataFrame('Events', 'DYJetsToLL.root').Define('n', 'Sum(GenPart_pdgId == 13)').Sum('n').GetValue(). 25642431.0. >>> ROOT.RDataFrame('Events', 'DYJetsToLL.root').Define('n', 'Sum(GenPart_pdgId == 15)').Sum('n').GetValue(). 18289536.0. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:360,integrability,interfac,interfaces,360,"> Do we agree that the code above should produce (in principle) the same output? I don't see why not. We really need an authoritative answer as to which of the plots is correct though. Maybe raw TTree and TTreeReader can act as tie-breaker. There are no missing entries (the number of entries in the two histograms is the same) so it seems that one of the two interfaces is reading wrong values -- but how can it be that histogram mean and variance are exactly the same in the two cases? The mean, I can understand, but the variance should be larger for the upper histo than for the lower histo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:360,interoperability,interfac,interfaces,360,"> Do we agree that the code above should produce (in principle) the same output? I don't see why not. We really need an authoritative answer as to which of the plots is correct though. Maybe raw TTree and TTreeReader can act as tie-breaker. There are no missing entries (the number of entries in the two histograms is the same) so it seems that one of the two interfaces is reading wrong values -- but how can it be that histogram mean and variance are exactly the same in the two cases? The mean, I can understand, but the variance should be larger for the upper histo than for the lower histo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:360,modifiability,interfac,interfaces,360,"> Do we agree that the code above should produce (in principle) the same output? I don't see why not. We really need an authoritative answer as to which of the plots is correct though. Maybe raw TTree and TTreeReader can act as tie-breaker. There are no missing entries (the number of entries in the two histograms is the same) so it seems that one of the two interfaces is reading wrong values -- but how can it be that histogram mean and variance are exactly the same in the two cases? The mean, I can understand, but the variance should be larger for the upper histo than for the lower histo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:120,security,auth,authoritative,120,"> Do we agree that the code above should produce (in principle) the same output? I don't see why not. We really need an authoritative answer as to which of the plots is correct though. Maybe raw TTree and TTreeReader can act as tie-breaker. There are no missing entries (the number of entries in the two histograms is the same) so it seems that one of the two interfaces is reading wrong values -- but how can it be that histogram mean and variance are exactly the same in the two cases? The mean, I can understand, but the variance should be larger for the upper histo than for the lower histo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:504,testability,understand,understand,504,"> Do we agree that the code above should produce (in principle) the same output? I don't see why not. We really need an authoritative answer as to which of the plots is correct though. Maybe raw TTree and TTreeReader can act as tie-breaker. There are no missing entries (the number of entries in the two histograms is the same) so it seems that one of the two interfaces is reading wrong values -- but how can it be that histogram mean and variance are exactly the same in the two cases? The mean, I can understand, but the variance should be larger for the upper histo than for the lower histo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:694,energy efficiency,Draw,Draw,694,"Here a reproducer with my best raw TTree skills:. ```cpp. void test() {. auto f = TFile::Open(""DYJetsToLL.root"");. auto t = f->Get<TTree>(""Events"");. UInt_t n;. Int_t x[100];. t->SetBranchAddress(""nGenPart"", &n);. t->SetBranchAddress(""GenPart_pdgId"", x);. auto n11 = 0u;. auto n13 = 0u;. auto n15 = 0u;. for(auto i = 0u; i < t->GetEntries(); i++) {. t->GetEntry(i);. for (auto j = 0u; j < n; j++) {. if (x[j] == 11) n11++;. if (x[j] == 13) n13++;. if (x[j] == 15) n15++;. }. }. cout << ""n11: "" << n11 << endl;. cout << ""n13: "" << n13 << endl;. cout << ""n15: "" << n15 << endl;. }. ```. ```. n11: 36148151. n13: 25642431. n15: 18289536. ```. So we can conclude that's a plotting issue in `TTree::Draw`? And I think `RDataFrame` does the right thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:139,integrability,Event,Events,139,"Here a reproducer with my best raw TTree skills:. ```cpp. void test() {. auto f = TFile::Open(""DYJetsToLL.root"");. auto t = f->Get<TTree>(""Events"");. UInt_t n;. Int_t x[100];. t->SetBranchAddress(""nGenPart"", &n);. t->SetBranchAddress(""GenPart_pdgId"", x);. auto n11 = 0u;. auto n13 = 0u;. auto n15 = 0u;. for(auto i = 0u; i < t->GetEntries(); i++) {. t->GetEntry(i);. for (auto j = 0u; j < n; j++) {. if (x[j] == 11) n11++;. if (x[j] == 13) n13++;. if (x[j] == 15) n15++;. }. }. cout << ""n11: "" << n11 << endl;. cout << ""n13: "" << n13 << endl;. cout << ""n15: "" << n15 << endl;. }. ```. ```. n11: 36148151. n13: 25642431. n15: 18289536. ```. So we can conclude that's a plotting issue in `TTree::Draw`? And I think `RDataFrame` does the right thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:726,reliability,doe,does,726,"Here a reproducer with my best raw TTree skills:. ```cpp. void test() {. auto f = TFile::Open(""DYJetsToLL.root"");. auto t = f->Get<TTree>(""Events"");. UInt_t n;. Int_t x[100];. t->SetBranchAddress(""nGenPart"", &n);. t->SetBranchAddress(""GenPart_pdgId"", x);. auto n11 = 0u;. auto n13 = 0u;. auto n15 = 0u;. for(auto i = 0u; i < t->GetEntries(); i++) {. t->GetEntry(i);. for (auto j = 0u; j < n; j++) {. if (x[j] == 11) n11++;. if (x[j] == 13) n13++;. if (x[j] == 15) n15++;. }. }. cout << ""n11: "" << n11 << endl;. cout << ""n13: "" << n13 << endl;. cout << ""n15: "" << n15 << endl;. }. ```. ```. n11: 36148151. n13: 25642431. n15: 18289536. ```. So we can conclude that's a plotting issue in `TTree::Draw`? And I think `RDataFrame` does the right thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:63,safety,test,test,63,"Here a reproducer with my best raw TTree skills:. ```cpp. void test() {. auto f = TFile::Open(""DYJetsToLL.root"");. auto t = f->Get<TTree>(""Events"");. UInt_t n;. Int_t x[100];. t->SetBranchAddress(""nGenPart"", &n);. t->SetBranchAddress(""GenPart_pdgId"", x);. auto n11 = 0u;. auto n13 = 0u;. auto n15 = 0u;. for(auto i = 0u; i < t->GetEntries(); i++) {. t->GetEntry(i);. for (auto j = 0u; j < n; j++) {. if (x[j] == 11) n11++;. if (x[j] == 13) n13++;. if (x[j] == 15) n15++;. }. }. cout << ""n11: "" << n11 << endl;. cout << ""n13: "" << n13 << endl;. cout << ""n15: "" << n15 << endl;. }. ```. ```. n11: 36148151. n13: 25642431. n15: 18289536. ```. So we can conclude that's a plotting issue in `TTree::Draw`? And I think `RDataFrame` does the right thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:63,testability,test,test,63,"Here a reproducer with my best raw TTree skills:. ```cpp. void test() {. auto f = TFile::Open(""DYJetsToLL.root"");. auto t = f->Get<TTree>(""Events"");. UInt_t n;. Int_t x[100];. t->SetBranchAddress(""nGenPart"", &n);. t->SetBranchAddress(""GenPart_pdgId"", x);. auto n11 = 0u;. auto n13 = 0u;. auto n15 = 0u;. for(auto i = 0u; i < t->GetEntries(); i++) {. t->GetEntry(i);. for (auto j = 0u; j < n; j++) {. if (x[j] == 11) n11++;. if (x[j] == 13) n13++;. if (x[j] == 15) n15++;. }. }. cout << ""n11: "" << n11 << endl;. cout << ""n13: "" << n13 << endl;. cout << ""n15: "" << n15 << endl;. }. ```. ```. n11: 36148151. n13: 25642431. n15: 18289536. ```. So we can conclude that's a plotting issue in `TTree::Draw`? And I think `RDataFrame` does the right thing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:26,energy efficiency,Draw,Draw,26,"Another ingredient, `tree.Draw('GenPart_pdgId[0]')` gives a correct plot:. ![Screenshot from 2020-10-20 12-25-09](https://user-images.githubusercontent.com/6951222/96574248-7e370f80-12cf-11eb-97c6-8bc8f212913b.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:122,usability,user,user-images,122,"Another ingredient, `tree.Draw('GenPart_pdgId[0]')` gives a correct plot:. ![Screenshot from 2020-10-20 12-25-09](https://user-images.githubusercontent.com/6951222/96574248-7e370f80-12cf-11eb-97c6-8bc8f212913b.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:73,energy efficiency,Draw,Draw,73,"Ok, thanks for investigating. I think it's safe to treat it as a `TTree::Draw` bug unless @pcanal figures out otherwise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:43,safety,safe,safe,43,"Ok, thanks for investigating. I think it's safe to treat it as a `TTree::Draw` bug unless @pcanal figures out otherwise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:180,availability,consist,consistent,180,"An interesting observation: if you look at the bars in the two plots, for the RDF plot you can estimate the total number of entries as `37e6*2 + 26e6*2 + 18e6*2 = 1.62e8` which is consistent with the number of entries reported by the histogram. For the `TTree::Draw` plot you get, more or less, `16.75e6 * 6 = 1.01e8`: why are the other entries not displayed? Did they end up in the overflow/underflow bins?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:15,deployability,observ,observation,15,"An interesting observation: if you look at the bars in the two plots, for the RDF plot you can estimate the total number of entries as `37e6*2 + 26e6*2 + 18e6*2 = 1.62e8` which is consistent with the number of entries reported by the histogram. For the `TTree::Draw` plot you get, more or less, `16.75e6 * 6 = 1.01e8`: why are the other entries not displayed? Did they end up in the overflow/underflow bins?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:95,energy efficiency,estimat,estimate,95,"An interesting observation: if you look at the bars in the two plots, for the RDF plot you can estimate the total number of entries as `37e6*2 + 26e6*2 + 18e6*2 = 1.62e8` which is consistent with the number of entries reported by the histogram. For the `TTree::Draw` plot you get, more or less, `16.75e6 * 6 = 1.01e8`: why are the other entries not displayed? Did they end up in the overflow/underflow bins?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:261,energy efficiency,Draw,Draw,261,"An interesting observation: if you look at the bars in the two plots, for the RDF plot you can estimate the total number of entries as `37e6*2 + 26e6*2 + 18e6*2 = 1.62e8` which is consistent with the number of entries reported by the histogram. For the `TTree::Draw` plot you get, more or less, `16.75e6 * 6 = 1.01e8`: why are the other entries not displayed? Did they end up in the overflow/underflow bins?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:15,testability,observ,observation,15,"An interesting observation: if you look at the bars in the two plots, for the RDF plot you can estimate the total number of entries as `37e6*2 + 26e6*2 + 18e6*2 = 1.62e8` which is consistent with the number of entries reported by the histogram. For the `TTree::Draw` plot you get, more or less, `16.75e6 * 6 = 1.01e8`: why are the other entries not displayed? Did they end up in the overflow/underflow bins?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:180,usability,consist,consistent,180,"An interesting observation: if you look at the bars in the two plots, for the RDF plot you can estimate the total number of entries as `37e6*2 + 26e6*2 + 18e6*2 = 1.62e8` which is consistent with the number of entries reported by the histogram. For the `TTree::Draw` plot you get, more or less, `16.75e6 * 6 = 1.01e8`: why are the other entries not displayed? Did they end up in the overflow/underflow bins?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:285,deployability,Integr,Integral,285,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:348,deployability,integr,integral,348,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:194,energy efficiency,Draw,Draw,194,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:371,energy efficiency,estimat,estimation,371,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:111,integrability,Event,Events,111,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:285,integrability,Integr,Integral,285,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:348,integrability,integr,integral,348,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:285,interoperability,Integr,Integral,285,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:348,interoperability,integr,integral,348,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:285,modifiability,Integr,Integral,285,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:348,modifiability,integr,integral,348,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:285,reliability,Integr,Integral,285,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:348,reliability,integr,integral,348,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:285,security,Integr,Integral,285,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:348,security,integr,integral,348,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:285,testability,Integr,Integral,285,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:348,testability,integr,integral,348,"No underflows or overflows:. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> c = ROOT.TCanvas(). >>> h = ROOT.TH1F('h', 'h', 100, -20, 20). >>> t.Draw('GenPart_pdgId>>h'). >>> h.GetBinContent(0). 0.0. >>> h.GetBinContent(21). 0.0. >>> h.Integral(). 100663296.0. ```. @eguiraud But have a look at the integral! Indeed, your estimation is fully correct.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:40,integrability,Event,Events,40,"Last round of investigations, here the `Events->Print()` output:. ```. *............................................................................*. *Br 62 :nGenPart : nGenPart/i *. *Entries : 30458871 : Total Size= 121869654 bytes File Size = 27764921 *. *Baskets : 349 : Basket Size= 574464 bytes Compression= 4.39 *. *............................................................................*. *Br 67 :GenPart_pdgId : GenPart_pdgId[nGenPart]/I *. *Entries : 30458871 : Total Size= 767472277 bytes File Size = 175369010 *. *Baskets : 698 : Basket Size= 1738752 bytes Compression= 4.38 *. *............................................................................*. ```. And the issue is also visible in `TBrowser` by clicking on the branch:. ![Screenshot from 2020-10-20 13-26-28](https://user-images.githubusercontent.com/6951222/96580291-5ac49280-12d8-11eb-9b74-3a796b23b517.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:799,usability,user,user-images,799,"Last round of investigations, here the `Events->Print()` output:. ```. *............................................................................*. *Br 62 :nGenPart : nGenPart/i *. *Entries : 30458871 : Total Size= 121869654 bytes File Size = 27764921 *. *Baskets : 349 : Basket Size= 574464 bytes Compression= 4.39 *. *............................................................................*. *Br 67 :GenPart_pdgId : GenPart_pdgId[nGenPart]/I *. *Entries : 30458871 : Total Size= 767472277 bytes File Size = 175369010 *. *Baskets : 698 : Basket Size= 1738752 bytes Compression= 4.38 *. *............................................................................*. ```. And the issue is also visible in `TBrowser` by clicking on the branch:. ![Screenshot from 2020-10-20 13-26-28](https://user-images.githubusercontent.com/6951222/96580291-5ac49280-12d8-11eb-9b74-3a796b23b517.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:17,usability,user,user-images,17,![image](https://user-images.githubusercontent.com/10999034/96580341-6fa12600-12d8-11eb-92e2-7fd278c6fe0d.png).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:55,availability,error,error,55,Running TTree::Scan should give an idea of the type of error made by TTree::Draw.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:76,energy efficiency,Draw,Draw,76,Running TTree::Scan should give an idea of the type of error made by TTree::Draw.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:55,performance,error,error,55,Running TTree::Scan should give an idea of the type of error made by TTree::Draw.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:55,safety,error,error,55,Running TTree::Scan should give an idea of the type of error made by TTree::Draw.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:55,usability,error,error,55,Running TTree::Scan should give an idea of the type of error made by TTree::Draw.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:158,integrability,Event,Events,158,"`TTree::Scan` looks fine, I guess. ```. $ root -l DYJetsToLL.root . root [0] . Attaching file DYJetsToLL.root as _file0... (TFile *) 0x55a4bb156060. root [1] Events->Scan(""GenPart_pdgId""). ***********************************. * Row * Instance * GenPart_p *. ***********************************. * 0 * 0 * 15 *. * 0 * 1 * 11 *. * 0 * 2 * -15 *. * 0 * 3 * 11 *. * 0 * 4 * -11 *. * 0 * 5 * 11 *. * 0 * 6 * 15 *. * 0 * 7 * -11 *. * 0 * 8 * 15 *. * 0 * 9 * 11 *. * 0 * 10 * 15 *. * 0 * 11 * -15 *. * 0 * 12 * 15 *. * 0 * 13 * 15 *. * 0 * 14 * 11 *. * 0 * 15 * 11 *. * 0 * 16 * 15 *. * 0 * 17 * 15 *. * 0 * 18 * 11 *. * 1 * 0 * -13 *. * 1 * 1 * -13 *. * 1 * 2 * -11 *. * 1 * 3 * 13 *. * 1 * 4 * 11 *. * 1 * 5 * 13 *. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:8,availability,ping,ping,8,@pcanal ping (this is marked as critical),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:197,energy efficiency,Draw,Draw,197,"Found a smoking gun with @stwunsch : given a file with more than 16777216 entries, let's say, 50e6:. ```python. >>> ROOT.RDataFrame(50000000).Define(""x"", ""1"").Snapshot(""t"", ""f.root""). ```. `TTree::Draw` caps the contents of each bin at 16777216 (note in particular that `h->GetEntries()` returns the correct number, 50e6, but the bin contents are wrong:. ```cpp. root [1] t->Draw(""x>>h""). Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. root [2] h->GetEntries(). (double) 50000000. root [3] h->GetNbinsX(). (int) 3. root [4] h->GetBinContent(2). (double) 16777216. root [5] h->GetBinContent(0). (double) 0.0000000. root [6] h->GetBinContent(1). (double) 0.0000000. root [7] h->GetBinContent(3). (double) 0.0000000. ```. @pcanal help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:375,energy efficiency,Draw,Draw,375,"Found a smoking gun with @stwunsch : given a file with more than 16777216 entries, let's say, 50e6:. ```python. >>> ROOT.RDataFrame(50000000).Define(""x"", ""1"").Snapshot(""t"", ""f.root""). ```. `TTree::Draw` caps the contents of each bin at 16777216 (note in particular that `h->GetEntries()` returns the correct number, 50e6, but the bin contents are wrong:. ```cpp. root [1] t->Draw(""x>>h""). Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. root [2] h->GetEntries(). (double) 50000000. root [3] h->GetNbinsX(). (int) 3. root [4] h->GetBinContent(2). (double) 16777216. root [5] h->GetBinContent(0). (double) 0.0000000. root [6] h->GetBinContent(1). (double) 0.0000000. root [7] h->GetBinContent(3). (double) 0.0000000. ```. @pcanal help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:212,performance,content,contents,212,"Found a smoking gun with @stwunsch : given a file with more than 16777216 entries, let's say, 50e6:. ```python. >>> ROOT.RDataFrame(50000000).Define(""x"", ""1"").Snapshot(""t"", ""f.root""). ```. `TTree::Draw` caps the contents of each bin at 16777216 (note in particular that `h->GetEntries()` returns the correct number, 50e6, but the bin contents are wrong:. ```cpp. root [1] t->Draw(""x>>h""). Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. root [2] h->GetEntries(). (double) 50000000. root [3] h->GetNbinsX(). (int) 3. root [4] h->GetBinContent(2). (double) 16777216. root [5] h->GetBinContent(0). (double) 0.0000000. root [6] h->GetBinContent(1). (double) 0.0000000. root [7] h->GetBinContent(3). (double) 0.0000000. ```. @pcanal help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:334,performance,content,contents,334,"Found a smoking gun with @stwunsch : given a file with more than 16777216 entries, let's say, 50e6:. ```python. >>> ROOT.RDataFrame(50000000).Define(""x"", ""1"").Snapshot(""t"", ""f.root""). ```. `TTree::Draw` caps the contents of each bin at 16777216 (note in particular that `h->GetEntries()` returns the correct number, 50e6, but the bin contents are wrong:. ```cpp. root [1] t->Draw(""x>>h""). Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. root [2] h->GetEntries(). (double) 50000000. root [3] h->GetNbinsX(). (int) 3. root [4] h->GetBinContent(2). (double) 16777216. root [5] h->GetBinContent(0). (double) 0.0000000. root [6] h->GetBinContent(1). (double) 0.0000000. root [7] h->GetBinContent(3). (double) 0.0000000. ```. @pcanal help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:752,usability,help,help,752,"Found a smoking gun with @stwunsch : given a file with more than 16777216 entries, let's say, 50e6:. ```python. >>> ROOT.RDataFrame(50000000).Define(""x"", ""1"").Snapshot(""t"", ""f.root""). ```. `TTree::Draw` caps the contents of each bin at 16777216 (note in particular that `h->GetEntries()` returns the correct number, 50e6, but the bin contents are wrong:. ```cpp. root [1] t->Draw(""x>>h""). Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1. root [2] h->GetEntries(). (double) 50000000. root [3] h->GetNbinsX(). (int) 3. root [4] h->GetBinContent(2). (double) 16777216. root [5] h->GetBinContent(0). (double) 0.0000000. root [6] h->GetBinContent(1). (double) 0.0000000. root [7] h->GetBinContent(3). (double) 0.0000000. ```. @pcanal help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:48,availability,consist,consistent,48,"So, if you run on a few entries, the result are consistent between RDataFrame and TTree::Draw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:89,energy efficiency,Draw,Draw,89,"So, if you run on a few entries, the result are consistent between RDataFrame and TTree::Draw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:48,usability,consist,consistent,48,"So, if you run on a few entries, the result are consistent between RDataFrame and TTree::Draw?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:90,modifiability,scal,scalar,90,"Note that the TTree in the last repro is really nothing special, it just has one integer (scalar) branch with all values equal to 1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:74,availability,down,down,74,Then it definitively weird :( ... Would have to see whether the cutoff is down in TSelectorDraw itself or somehow in the histogram ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:158,energy efficiency,Draw,Draw,158,"Simple repo:. ```C++. void repo() {. int i = 10000;. TTree t(""t"", ""title"");. t.Branch(""b"", &i, ""i/I"");. for (int e = 0; e < 50000000; ++e) {. t.Fill();. }. t.Draw(""b.i"");. std::cout << ((TH1*)gDirectory->FindObject(""htemp""))->GetMaximum() << '\n';. }. ```. Prints `1.67772e+07` and really shouldn't.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:0,testability,Simpl,Simple,0,"Simple repo:. ```C++. void repo() {. int i = 10000;. TTree t(""t"", ""title"");. t.Branch(""b"", &i, ""i/I"");. for (int e = 0; e < 50000000; ++e) {. t.Fill();. }. t.Draw(""b.i"");. std::cout << ((TH1*)gDirectory->FindObject(""htemp""))->GetMaximum() << '\n';. }. ```. Prints `1.67772e+07` and really shouldn't.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:0,usability,Simpl,Simple,0,"Simple repo:. ```C++. void repo() {. int i = 10000;. TTree t(""t"", ""title"");. t.Branch(""b"", &i, ""i/I"");. for (int e = 0; e < 50000000; ++e) {. t.Fill();. }. t.Draw(""b.i"");. std::cout << ((TH1*)gDirectory->FindObject(""htemp""))->GetMaximum() << '\n';. }. ```. Prints `1.67772e+07` and really shouldn't.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:306,performance,content,content,306,"@lmoneta given that we didn't understand this, and that this is likely not obvious to our users, could we add a test to `AddBinContent()` of the form:. ```c++. if (w != 0 && bincontent + w == bincontent). Warning(""AddBinContent"", ""Bin too full, adding %d is below its precision and does not change the bin content!"", w);. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:282,reliability,doe,does,282,"@lmoneta given that we didn't understand this, and that this is likely not obvious to our users, could we add a test to `AddBinContent()` of the form:. ```c++. if (w != 0 && bincontent + w == bincontent). Warning(""AddBinContent"", ""Bin too full, adding %d is below its precision and does not change the bin content!"", w);. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:112,safety,test,test,112,"@lmoneta given that we didn't understand this, and that this is likely not obvious to our users, could we add a test to `AddBinContent()` of the form:. ```c++. if (w != 0 && bincontent + w == bincontent). Warning(""AddBinContent"", ""Bin too full, adding %d is below its precision and does not change the bin content!"", w);. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:30,testability,understand,understand,30,"@lmoneta given that we didn't understand this, and that this is likely not obvious to our users, could we add a test to `AddBinContent()` of the form:. ```c++. if (w != 0 && bincontent + w == bincontent). Warning(""AddBinContent"", ""Bin too full, adding %d is below its precision and does not change the bin content!"", w);. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:112,testability,test,test,112,"@lmoneta given that we didn't understand this, and that this is likely not obvious to our users, could we add a test to `AddBinContent()` of the form:. ```c++. if (w != 0 && bincontent + w == bincontent). Warning(""AddBinContent"", ""Bin too full, adding %d is below its precision and does not change the bin content!"", w);. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:90,usability,user,users,90,"@lmoneta given that we didn't understand this, and that this is likely not obvious to our users, could we add a test to `AddBinContent()` of the form:. ```c++. if (w != 0 && bincontent + w == bincontent). Warning(""AddBinContent"", ""Bin too full, adding %d is below its precision and does not change the bin content!"", w);. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:82,performance,memor,memory,82,"Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:144,performance,time,times,144,"Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:82,usability,memor,memory,82,"Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:548,energy efficiency,Draw,Draw,548,"From my experience, everyone is using TH1Fs because the datatype in most ntuple is float and not double (there because of the size). Most users may think that if the branch type is float, you should also use a TH1F. Not necessarily correct, but I can guarantee you that this happens a lot. And more important, especially for NanoAOD, the following very typical user code will show a wrong result, on rather small files (see the initial reproducer):. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. The bare minimum would fixing the type of histogram, that `TTree::Draw` returns (TH1D, not TH1F), I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:642,energy efficiency,Draw,Draw,642,"From my experience, everyone is using TH1Fs because the datatype in most ntuple is float and not double (there because of the size). Most users may think that if the branch type is float, you should also use a TH1F. Not necessarily correct, but I can guarantee you that this happens a lot. And more important, especially for NanoAOD, the following very typical user code will show a wrong result, on rather small files (see the initial reproducer):. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. The bare minimum would fixing the type of histogram, that `TTree::Draw` returns (TH1D, not TH1F), I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:532,integrability,Event,Events,532,"From my experience, everyone is using TH1Fs because the datatype in most ntuple is float and not double (there because of the size). Most users may think that if the branch type is float, you should also use a TH1F. Not necessarily correct, but I can guarantee you that this happens a lot. And more important, especially for NanoAOD, the following very typical user code will show a wrong result, on rather small files (see the initial reproducer):. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. The bare minimum would fixing the type of histogram, that `TTree::Draw` returns (TH1D, not TH1F), I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:8,usability,experien,experience,8,"From my experience, everyone is using TH1Fs because the datatype in most ntuple is float and not double (there because of the size). Most users may think that if the branch type is float, you should also use a TH1F. Not necessarily correct, but I can guarantee you that this happens a lot. And more important, especially for NanoAOD, the following very typical user code will show a wrong result, on rather small files (see the initial reproducer):. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. The bare minimum would fixing the type of histogram, that `TTree::Draw` returns (TH1D, not TH1F), I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:138,usability,user,users,138,"From my experience, everyone is using TH1Fs because the datatype in most ntuple is float and not double (there because of the size). Most users may think that if the branch type is float, you should also use a TH1F. Not necessarily correct, but I can guarantee you that this happens a lot. And more important, especially for NanoAOD, the following very typical user code will show a wrong result, on rather small files (see the initial reproducer):. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. The bare minimum would fixing the type of histogram, that `TTree::Draw` returns (TH1D, not TH1F), I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:361,usability,user,user,361,"From my experience, everyone is using TH1Fs because the datatype in most ntuple is float and not double (there because of the size). Most users may think that if the branch type is float, you should also use a TH1F. Not necessarily correct, but I can guarantee you that this happens a lot. And more important, especially for NanoAOD, the following very typical user code will show a wrong result, on rather small files (see the initial reproducer):. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. The bare minimum would fixing the type of histogram, that `TTree::Draw` returns (TH1D, not TH1F), I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:585,usability,minim,minimum,585,"From my experience, everyone is using TH1Fs because the datatype in most ntuple is float and not double (there because of the size). Most users may think that if the branch type is float, you should also use a TH1F. Not necessarily correct, but I can guarantee you that this happens a lot. And more important, especially for NanoAOD, the following very typical user code will show a wrong result, on rather small files (see the initial reproducer):. ```python. >>> import ROOT. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. The bare minimum would fixing the type of histogram, that `TTree::Draw` returns (TH1D, not TH1F), I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:159,interoperability,specif,specify,159,"This is completely wrong, an histogram type has nothing to do with the data type. The axis binning is always used in double precision. We should probably then specify this better in the TH1 documentation!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:8,safety,compl,completely,8,"This is completely wrong, an histogram type has nothing to do with the data type. The axis binning is always used in double precision. We should probably then specify this better in the TH1 documentation!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:8,security,compl,completely,8,"This is completely wrong, an histogram type has nothing to do with the data type. The axis binning is always used in double precision. We should probably then specify this better in the TH1 documentation!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:190,usability,document,documentation,190,"This is completely wrong, an histogram type has nothing to do with the data type. The axis binning is always used in double precision. We should probably then specify this better in the TH1 documentation!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:16,energy efficiency,Draw,Draw,16,"And yes `TTree::Draw` should return a TH1D. @pcanal, can this be changed ? RDataFrame.Histo1D returns TH1D already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:161,interoperability,specif,specify,161,"> This is completely wrong, an histogram type has nothing to do with the data type. The axis binning is always used in double precision. We should probably then specify this better in the TH1 documentation! And that's not how ROOT histograms are used ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:10,safety,compl,completely,10,"> This is completely wrong, an histogram type has nothing to do with the data type. The axis binning is always used in double precision. We should probably then specify this better in the TH1 documentation! And that's not how ROOT histograms are used ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:10,security,compl,completely,10,"> This is completely wrong, an histogram type has nothing to do with the data type. The axis binning is always used in double precision. We should probably then specify this better in the TH1 documentation! And that's not how ROOT histograms are used ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:192,usability,document,documentation,192,"> This is completely wrong, an histogram type has nothing to do with the data type. The axis binning is always used in double precision. We should probably then specify this better in the TH1 documentation! And that's not how ROOT histograms are used ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:166,availability,error,errors,166,"![image](https://user-images.githubusercontent.com/6951222/110138875-b9476480-7dd2-11eb-997a-d2a636e5be00.png). https://root.cern/doc/master/classTH1.html#associated-errors. I also would have understood the docs as the precision on the value that you fill in rather than the precision on the bin content. And it's also not a precision in that sense, it's a maximum bin content you can achieve by doing small increments. Actually, in principle you could have larger bin contents with float, e.g., with large weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:166,performance,error,errors,166,"![image](https://user-images.githubusercontent.com/6951222/110138875-b9476480-7dd2-11eb-997a-d2a636e5be00.png). https://root.cern/doc/master/classTH1.html#associated-errors. I also would have understood the docs as the precision on the value that you fill in rather than the precision on the bin content. And it's also not a precision in that sense, it's a maximum bin content you can achieve by doing small increments. Actually, in principle you could have larger bin contents with float, e.g., with large weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:296,performance,content,content,296,"![image](https://user-images.githubusercontent.com/6951222/110138875-b9476480-7dd2-11eb-997a-d2a636e5be00.png). https://root.cern/doc/master/classTH1.html#associated-errors. I also would have understood the docs as the precision on the value that you fill in rather than the precision on the bin content. And it's also not a precision in that sense, it's a maximum bin content you can achieve by doing small increments. Actually, in principle you could have larger bin contents with float, e.g., with large weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:369,performance,content,content,369,"![image](https://user-images.githubusercontent.com/6951222/110138875-b9476480-7dd2-11eb-997a-d2a636e5be00.png). https://root.cern/doc/master/classTH1.html#associated-errors. I also would have understood the docs as the precision on the value that you fill in rather than the precision on the bin content. And it's also not a precision in that sense, it's a maximum bin content you can achieve by doing small increments. Actually, in principle you could have larger bin contents with float, e.g., with large weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:469,performance,content,contents,469,"![image](https://user-images.githubusercontent.com/6951222/110138875-b9476480-7dd2-11eb-997a-d2a636e5be00.png). https://root.cern/doc/master/classTH1.html#associated-errors. I also would have understood the docs as the precision on the value that you fill in rather than the precision on the bin content. And it's also not a precision in that sense, it's a maximum bin content you can achieve by doing small increments. Actually, in principle you could have larger bin contents with float, e.g., with large weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:166,safety,error,errors,166,"![image](https://user-images.githubusercontent.com/6951222/110138875-b9476480-7dd2-11eb-997a-d2a636e5be00.png). https://root.cern/doc/master/classTH1.html#associated-errors. I also would have understood the docs as the precision on the value that you fill in rather than the precision on the bin content. And it's also not a precision in that sense, it's a maximum bin content you can achieve by doing small increments. Actually, in principle you could have larger bin contents with float, e.g., with large weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:17,usability,user,user-images,17,"![image](https://user-images.githubusercontent.com/6951222/110138875-b9476480-7dd2-11eb-997a-d2a636e5be00.png). https://root.cern/doc/master/classTH1.html#associated-errors. I also would have understood the docs as the precision on the value that you fill in rather than the precision on the bin content. And it's also not a precision in that sense, it's a maximum bin content you can achieve by doing small increments. Actually, in principle you could have larger bin contents with float, e.g., with large weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:166,usability,error,errors,166,"![image](https://user-images.githubusercontent.com/6951222/110138875-b9476480-7dd2-11eb-997a-d2a636e5be00.png). https://root.cern/doc/master/classTH1.html#associated-errors. I also would have understood the docs as the precision on the value that you fill in rather than the precision on the bin content. And it's also not a precision in that sense, it's a maximum bin content you can achieve by doing small increments. Actually, in principle you could have larger bin contents with float, e.g., with large weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:386,availability,error,error,386,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:632,deployability,depend,depending,632,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:17,energy efficiency,Draw,Draw,17,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:361,energy efficiency,Draw,Draws,361,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:412,energy efficiency,Draw,Draw,412,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:872,energy efficiency,heat,heating,872,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:632,integrability,depend,depending,632,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:648,integrability,rout,routines,648,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:632,modifiability,depend,depending,632,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:303,performance,memor,memory,303,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:386,performance,error,error,386,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:386,safety,error,error,386,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:632,safety,depend,depending,632,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:751,safety,test,test,751,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:823,safety,detect,detect,823,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:823,security,detect,detect,823,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:632,testability,depend,depending,632,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:751,testability,test,test,751,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:303,usability,memor,memory,303,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:337,usability,user,users,337,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:386,usability,error,error,386,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:461,usability,user,users,461,"> And yes TTree::Draw should return a TH1D. @pcanal, can this be changed ? This is straightforward to change (in TSelectorDraw), it is the obvious solution to the problem (albeit it actually just delay the problem per se .. but by a lot I guess :) ) but is not without visible consequences:. * Increase memory usage (would be visible by users that use a lot of Draws). * Potential type error for those that call Draw and then retrieve the htmp histogram (lucky users would have provided their own .. .likely also a TH1F though !? ... the unlikely one would have C-style casted it to TH1F (which actually might still appears to work depending which routines they call on that pointer) ... and the most unlucky would have use dynamic_cast but forgot to test the result .... and the weird ones would rely on the saturation to detect some type of results (see [xkcd space bar heating](https://xkcd.com/1172/)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:332,energy efficiency,Draw,Draw,332,"Forget it: 🦔 [Edit: ouch, not hedgehog but groundhog! You know, groundhog day. Whatever. 😅 ]. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/63873.html. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/85436.html. * Email conversation between Philippe, Olivier, Enrico (!), me, and rootdev, titled ""TTree::Draw default histogram"", in 2017, where we concluded ""why not"". * We have c9e40d125fc3b27db05ced052856b38a814231d1. * I then changed the default to `TH1D`: 0ad637e2105e0ef248029f6377e5e73323333e00. * The main issue was user code that static-casts `htemp` to `TH1F` : if they then access the `TArrayF` (that's actually a `TArrayD`) then that's very bad. We even had such user code in ROOT: a9570d37277a13f7871ee64e0f522725fc250e1e. * So in d001610754d0d620faac7400027086ea73063b74 I turned the default back to `TH1F`. Hey, what about https://github.com/root-project/root/issues/6671#issuecomment-791443564 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:248,interoperability,convers,conversation,248,"Forget it: 🦔 [Edit: ouch, not hedgehog but groundhog! You know, groundhog day. Whatever. 😅 ]. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/63873.html. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/85436.html. * Email conversation between Philippe, Olivier, Enrico (!), me, and rootdev, titled ""TTree::Draw default histogram"", in 2017, where we concluded ""why not"". * We have c9e40d125fc3b27db05ced052856b38a814231d1. * I then changed the default to `TH1D`: 0ad637e2105e0ef248029f6377e5e73323333e00. * The main issue was user code that static-casts `htemp` to `TH1F` : if they then access the `TArrayF` (that's actually a `TArrayD`) then that's very bad. We even had such user code in ROOT: a9570d37277a13f7871ee64e0f522725fc250e1e. * So in d001610754d0d620faac7400027086ea73063b74 I turned the default back to `TH1F`. Hey, what about https://github.com/root-project/root/issues/6671#issuecomment-791443564 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:612,security,access,access,612,"Forget it: 🦔 [Edit: ouch, not hedgehog but groundhog! You know, groundhog day. Whatever. 😅 ]. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/63873.html. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/85436.html. * Email conversation between Philippe, Olivier, Enrico (!), me, and rootdev, titled ""TTree::Draw default histogram"", in 2017, where we concluded ""why not"". * We have c9e40d125fc3b27db05ced052856b38a814231d1. * I then changed the default to `TH1D`: 0ad637e2105e0ef248029f6377e5e73323333e00. * The main issue was user code that static-casts `htemp` to `TH1F` : if they then access the `TArrayF` (that's actually a `TArrayD`) then that's very bad. We even had such user code in ROOT: a9570d37277a13f7871ee64e0f522725fc250e1e. * So in d001610754d0d620faac7400027086ea73063b74 I turned the default back to `TH1F`. Hey, what about https://github.com/root-project/root/issues/6671#issuecomment-791443564 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:551,usability,user,user,551,"Forget it: 🦔 [Edit: ouch, not hedgehog but groundhog! You know, groundhog day. Whatever. 😅 ]. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/63873.html. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/85436.html. * Email conversation between Philippe, Olivier, Enrico (!), me, and rootdev, titled ""TTree::Draw default histogram"", in 2017, where we concluded ""why not"". * We have c9e40d125fc3b27db05ced052856b38a814231d1. * I then changed the default to `TH1D`: 0ad637e2105e0ef248029f6377e5e73323333e00. * The main issue was user code that static-casts `htemp` to `TH1F` : if they then access the `TArrayF` (that's actually a `TArrayD`) then that's very bad. We even had such user code in ROOT: a9570d37277a13f7871ee64e0f522725fc250e1e. * So in d001610754d0d620faac7400027086ea73063b74 I turned the default back to `TH1F`. Hey, what about https://github.com/root-project/root/issues/6671#issuecomment-791443564 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:702,usability,user,user,702,"Forget it: 🦔 [Edit: ouch, not hedgehog but groundhog! You know, groundhog day. Whatever. 😅 ]. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/63873.html. * https://savannah.web.cern.ch/HEP_Applications/savroot/bugs/85436.html. * Email conversation between Philippe, Olivier, Enrico (!), me, and rootdev, titled ""TTree::Draw default histogram"", in 2017, where we concluded ""why not"". * We have c9e40d125fc3b27db05ced052856b38a814231d1. * I then changed the default to `TH1D`: 0ad637e2105e0ef248029f6377e5e73323333e00. * The main issue was user code that static-casts `htemp` to `TH1F` : if they then access the `TArrayF` (that's actually a `TArrayD`) then that's very bad. We even had such user code in ROOT: a9570d37277a13f7871ee64e0f522725fc250e1e. * So in d001610754d0d620faac7400027086ea73063b74 I turned the default back to `TH1F`. Hey, what about https://github.com/root-project/root/issues/6671#issuecomment-791443564 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:11,performance,perform,performance,11,"What's the performance impact of https://github.com/root-project/root/issues/6671#issuecomment-791443564? I guess that's the question. Otherwise, I'd be all in!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:11,usability,perform,performance,11,"What's the performance impact of https://github.com/root-project/root/issues/6671#issuecomment-791443564? I guess that's the question. Otherwise, I'd be all in!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:431,deployability,fail,failing,431,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:371,energy efficiency,Draw,Draw,371,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:390,modifiability,concern,concerning,390,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:13,performance,perform,performance,13,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:246,performance,time,time,246,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:431,reliability,fail,failing,431,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:273,safety,avoid,avoid,273,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:390,testability,concern,concerning,390,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:13,usability,perform,performance,13,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:201,usability,help,helpful,201,"> What's the performance impact of [#6671 (comment)](https://github.com/root-project/root/issues/6671#issuecomment-791443564)? I guess that's the question. Otherwise, I'd be all in! A warning would be helpful indeed, but maybe only for the first time this happens? Just to avoid getting 1000 lines printed out in the terminal. Just as a side note, there is another TTree.Draw bug out there concerning double (or ULong) precision / failing silently as in this issue:. https://sft.its.cern.ch/jira/browse/ROOT-8009",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:203,integrability,sub,subsequent,203,"> A warning would be helpful indeed, but maybe only for the first time this happens? Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:123,modifiability,concern,concerned,123,"> A warning would be helpful indeed, but maybe only for the first time this happens? Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:66,performance,time,time,66,"> A warning would be helpful indeed, but maybe only for the first time this happens? Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:172,reliability,diagno,diagnostic,172,"> A warning would be helpful indeed, but maybe only for the first time this happens? Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:123,testability,concern,concerned,123,"> A warning would be helpful indeed, but maybe only for the first time this happens? Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:172,testability,diagno,diagnostic,172,"> A warning would be helpful indeed, but maybe only for the first time this happens? Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:21,usability,help,helpful,21,"> A warning would be helpful indeed, but maybe only for the first time this happens? Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:258,availability,avail,available,258,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:120,integrability,sub,subsequent,120,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:40,modifiability,concern,concerned,40,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:189,performance,perform,performance-wise,189,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:383,performance,perform,performance,383,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:89,reliability,diagno,diagnostic,89,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:163,reliability,doe,doesn,163,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:258,reliability,availab,available,258,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:258,safety,avail,available,258,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:258,security,availab,available,258,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:40,testability,concern,concerned,40,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:89,testability,diagno,diagnostic,89,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:189,usability,perform,performance-wise,189,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:383,usability,perform,performance,383,"> Certainly - but the perf impact we're concerned about is the `if` in the case where no diagnostic is emitted, not the subsequent warning. Ok, I see. Probably it doesn't make a difference performance-wise, but there are functions to calculate what the next available float value is:. `https://en.cppreference.com/w/cpp/numeric/math/nextafter`. Side note: we are already losing some performance in TH1I by checking for overflow, but not for TH1F. See:. ```. void TH1I::AddBinContent(Int_t bin, Double_t w). {. Long64_t newval = fArray[bin] + Long64_t(w);. if (newval > -INT_MAX && newval < INT_MAX) {fArray[bin] = Int_t(newval); return;}. if (newval < -INT_MAX) fArray[bin] = -INT_MAX;. if (newval > INT_MAX) fArray[bin] = INT_MAX;. }. ```. vs. ```. void TH1F::AddBinContent(Int_t bin, Double_t w). {fArray[bin] += Float_t (w);}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:12,integrability,wrap,wrap,12,"I'd like to wrap this up. Maybe I am naive but, as pointed out by Rene on [JIRA](https://sft.its.cern.ch/jira/browse/ROOT-2956), isn't this understood? We are trying to increment by one a single precision floating point number and at some point, the gap between 2 subsequent 32bit fp numbers is larger than 1...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:264,integrability,sub,subsequent,264,"I'd like to wrap this up. Maybe I am naive but, as pointed out by Rene on [JIRA](https://sft.its.cern.ch/jira/browse/ROOT-2956), isn't this understood? We are trying to increment by one a single precision floating point number and at some point, the gap between 2 subsequent 32bit fp numbers is larger than 1...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:275,energy efficiency,Draw,Draw,275,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:843,energy efficiency,Draw,Draw,843,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:1042,energy efficiency,Draw,Draw,1042,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:1229,energy efficiency,Draw,Draw,1229,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:259,integrability,Event,Events,259,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:970,integrability,interfac,interfaces,970,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:970,interoperability,interfac,interfaces,970,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:970,modifiability,interfac,interfaces,970,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:919,reliability,diagno,diagnose,919,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:185,safety,input,inputs,185,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:326,safety,compl,completely,326,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:326,security,compl,completely,326,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:919,testability,diagno,diagnose,919,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:122,usability,user,users,122,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:185,usability,input,inputs,185,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:303,usability,user,users,303,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:808,usability,effectiv,effectively,808,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:910,usability,user,users,910,"My two cents. The root cause of the problem is understood and it is what you mentioned. However, the way this presents to users is that if they run the following code on a large-enough inputs:. ```python. >>> f = ROOT.TFile('DYJetsToLL.root'). >>> t = f.Get('Events'). >>> t.Draw('GenPart_pdgId'). ```. users _silently_ get a completely wrong histogram:. ![image](https://github.com/root-project/root/assets/10999034/1d53b401-cf13-471c-bf6f-908835845b20). instead of the histogram they _should_ get:. ![image](https://github.com/root-project/root/assets/10999034/4bfc1d5d-e7e6-450a-b3c0-783cfccbda3a). Even if you are lucky enough that the histogram is so wrong that you spot the problem immediately, it is then very difficult to go from ""my histogram is wrong"" to ""low floating point precision makes `Fill` effectively a no-op inside `TTree::Draw`"". So difficult that I do not think one can reasonably expect users to diagnose the issue themselves. With that said, new interfaces already moved to TH1D by default instead of TH1F, and TTree::Draw cannot be changed to produce a TH1D for the backward-compat issues Axel listed above, so the only remaining option, AFAICT, is to add a check after every `Fill` or deprecate `TTree::Draw`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:447,energy efficiency,Draw,Draw,447,"Thanks Enrico, I was just about to write the same :laughing: I think once we implement such a precision loss check in `TH*F::Fill()` we should be fine. I would be hesitant to implement this for general `TH` types because of performance overhead. But given that we encourage people to use `THD` because of the reasons that became apparent in this discussion, I think it's fine to do this for `THF`. What is you opinion on this? Deprecating `TTree::Draw()` is a whole different beast that is maybe outside the scope of this discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:224,performance,perform,performance,224,"Thanks Enrico, I was just about to write the same :laughing: I think once we implement such a precision loss check in `TH*F::Fill()` we should be fine. I would be hesitant to implement this for general `TH` types because of performance overhead. But given that we encourage people to use `THD` because of the reasons that became apparent in this discussion, I think it's fine to do this for `THF`. What is you opinion on this? Deprecating `TTree::Draw()` is a whole different beast that is maybe outside the scope of this discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:236,performance,overhead,overhead,236,"Thanks Enrico, I was just about to write the same :laughing: I think once we implement such a precision loss check in `TH*F::Fill()` we should be fine. I would be hesitant to implement this for general `TH` types because of performance overhead. But given that we encourage people to use `THD` because of the reasons that became apparent in this discussion, I think it's fine to do this for `THF`. What is you opinion on this? Deprecating `TTree::Draw()` is a whole different beast that is maybe outside the scope of this discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:104,security,loss,loss,104,"Thanks Enrico, I was just about to write the same :laughing: I think once we implement such a precision loss check in `TH*F::Fill()` we should be fine. I would be hesitant to implement this for general `TH` types because of performance overhead. But given that we encourage people to use `THD` because of the reasons that became apparent in this discussion, I think it's fine to do this for `THF`. What is you opinion on this? Deprecating `TTree::Draw()` is a whole different beast that is maybe outside the scope of this discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:224,usability,perform,performance,224,"Thanks Enrico, I was just about to write the same :laughing: I think once we implement such a precision loss check in `TH*F::Fill()` we should be fine. I would be hesitant to implement this for general `TH` types because of performance overhead. But given that we encourage people to use `THD` because of the reasons that became apparent in this discussion, I think it's fine to do this for `THF`. What is you opinion on this? Deprecating `TTree::Draw()` is a whole different beast that is maybe outside the scope of this discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:293,deployability,depend,dependent,293,"According to https://en.cppreference.com/w/cpp/numeric/math/nextafter,. TH1F stops working well at 1e7 (with integer weights). Should we add this as the maximum value for TH1F, as is with TH1C for 128 e.g. With non-integer weights, this might become more of a problem to check as it is highly dependent on the chosen weight. But usually w = 1. ```. Precision loss demo for float:. nextafter(1e+01, INF) gives 10.000001; Δ = 0.000001. nextafter(1e+02, INF) gives 100.000008; Δ = 0.000008. nextafter(1e+03, INF) gives 1000.000061; Δ = 0.000061. nextafter(1e+04, INF) gives 10000.000977; Δ = 0.000977. nextafter(1e+05, INF) gives 100000.007812; Δ = 0.007812. nextafter(1e+06, INF) gives 1000000.062500; Δ = 0.062500. nextafter(1e+07, INF) gives 10000001.000000; Δ = 1.000000. nextafter(1e+08, INF) gives 100000008.000000; Δ = 8.000000. ```. I proposed a pull request.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:293,integrability,depend,dependent,293,"According to https://en.cppreference.com/w/cpp/numeric/math/nextafter,. TH1F stops working well at 1e7 (with integer weights). Should we add this as the maximum value for TH1F, as is with TH1C for 128 e.g. With non-integer weights, this might become more of a problem to check as it is highly dependent on the chosen weight. But usually w = 1. ```. Precision loss demo for float:. nextafter(1e+01, INF) gives 10.000001; Δ = 0.000001. nextafter(1e+02, INF) gives 100.000008; Δ = 0.000008. nextafter(1e+03, INF) gives 1000.000061; Δ = 0.000061. nextafter(1e+04, INF) gives 10000.000977; Δ = 0.000977. nextafter(1e+05, INF) gives 100000.007812; Δ = 0.007812. nextafter(1e+06, INF) gives 1000000.062500; Δ = 0.062500. nextafter(1e+07, INF) gives 10000001.000000; Δ = 1.000000. nextafter(1e+08, INF) gives 100000008.000000; Δ = 8.000000. ```. I proposed a pull request.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:293,modifiability,depend,dependent,293,"According to https://en.cppreference.com/w/cpp/numeric/math/nextafter,. TH1F stops working well at 1e7 (with integer weights). Should we add this as the maximum value for TH1F, as is with TH1C for 128 e.g. With non-integer weights, this might become more of a problem to check as it is highly dependent on the chosen weight. But usually w = 1. ```. Precision loss demo for float:. nextafter(1e+01, INF) gives 10.000001; Δ = 0.000001. nextafter(1e+02, INF) gives 100.000008; Δ = 0.000008. nextafter(1e+03, INF) gives 1000.000061; Δ = 0.000061. nextafter(1e+04, INF) gives 10000.000977; Δ = 0.000977. nextafter(1e+05, INF) gives 100000.007812; Δ = 0.007812. nextafter(1e+06, INF) gives 1000000.062500; Δ = 0.062500. nextafter(1e+07, INF) gives 10000001.000000; Δ = 1.000000. nextafter(1e+08, INF) gives 100000008.000000; Δ = 8.000000. ```. I proposed a pull request.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:293,safety,depend,dependent,293,"According to https://en.cppreference.com/w/cpp/numeric/math/nextafter,. TH1F stops working well at 1e7 (with integer weights). Should we add this as the maximum value for TH1F, as is with TH1C for 128 e.g. With non-integer weights, this might become more of a problem to check as it is highly dependent on the chosen weight. But usually w = 1. ```. Precision loss demo for float:. nextafter(1e+01, INF) gives 10.000001; Δ = 0.000001. nextafter(1e+02, INF) gives 100.000008; Δ = 0.000008. nextafter(1e+03, INF) gives 1000.000061; Δ = 0.000061. nextafter(1e+04, INF) gives 10000.000977; Δ = 0.000977. nextafter(1e+05, INF) gives 100000.007812; Δ = 0.007812. nextafter(1e+06, INF) gives 1000000.062500; Δ = 0.062500. nextafter(1e+07, INF) gives 10000001.000000; Δ = 1.000000. nextafter(1e+08, INF) gives 100000008.000000; Δ = 8.000000. ```. I proposed a pull request.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:359,security,loss,loss,359,"According to https://en.cppreference.com/w/cpp/numeric/math/nextafter,. TH1F stops working well at 1e7 (with integer weights). Should we add this as the maximum value for TH1F, as is with TH1C for 128 e.g. With non-integer weights, this might become more of a problem to check as it is highly dependent on the chosen weight. But usually w = 1. ```. Precision loss demo for float:. nextafter(1e+01, INF) gives 10.000001; Δ = 0.000001. nextafter(1e+02, INF) gives 100.000008; Δ = 0.000008. nextafter(1e+03, INF) gives 1000.000061; Δ = 0.000061. nextafter(1e+04, INF) gives 10000.000977; Δ = 0.000977. nextafter(1e+05, INF) gives 100000.007812; Δ = 0.007812. nextafter(1e+06, INF) gives 1000000.062500; Δ = 0.062500. nextafter(1e+07, INF) gives 10000001.000000; Δ = 1.000000. nextafter(1e+08, INF) gives 100000008.000000; Δ = 8.000000. ```. I proposed a pull request.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:293,testability,depend,dependent,293,"According to https://en.cppreference.com/w/cpp/numeric/math/nextafter,. TH1F stops working well at 1e7 (with integer weights). Should we add this as the maximum value for TH1F, as is with TH1C for 128 e.g. With non-integer weights, this might become more of a problem to check as it is highly dependent on the chosen weight. But usually w = 1. ```. Precision loss demo for float:. nextafter(1e+01, INF) gives 10.000001; Δ = 0.000001. nextafter(1e+02, INF) gives 100.000008; Δ = 0.000008. nextafter(1e+03, INF) gives 1000.000061; Δ = 0.000061. nextafter(1e+04, INF) gives 10000.000977; Δ = 0.000977. nextafter(1e+05, INF) gives 100000.007812; Δ = 0.007812. nextafter(1e+06, INF) gives 1000000.062500; Δ = 0.062500. nextafter(1e+07, INF) gives 10000001.000000; Δ = 1.000000. nextafter(1e+08, INF) gives 100000008.000000; Δ = 8.000000. ```. I proposed a pull request.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:77,usability,stop,stops,77,"According to https://en.cppreference.com/w/cpp/numeric/math/nextafter,. TH1F stops working well at 1e7 (with integer weights). Should we add this as the maximum value for TH1F, as is with TH1C for 128 e.g. With non-integer weights, this might become more of a problem to check as it is highly dependent on the chosen weight. But usually w = 1. ```. Precision loss demo for float:. nextafter(1e+01, INF) gives 10.000001; Δ = 0.000001. nextafter(1e+02, INF) gives 100.000008; Δ = 0.000008. nextafter(1e+03, INF) gives 1000.000061; Δ = 0.000061. nextafter(1e+04, INF) gives 10000.000977; Δ = 0.000977. nextafter(1e+05, INF) gives 100000.007812; Δ = 0.007812. nextafter(1e+06, INF) gives 1000000.062500; Δ = 0.062500. nextafter(1e+07, INF) gives 10000001.000000; Δ = 1.000000. nextafter(1e+08, INF) gives 100000008.000000; Δ = 8.000000. ```. I proposed a pull request.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:84,performance,memor,memory,84,"> Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times. If we want to encourage that change, I think we should start by removing TH1F from all the doxygen examples in ROOT, which is I believe why many people still use TH1F. If you run a grep, there are almost 2000 results. Most of them in the tutorials and test folders. Others in roofit and tmva.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:146,performance,time,times,146,"> Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times. If we want to encourage that change, I think we should start by removing TH1F from all the doxygen examples in ROOT, which is I believe why many people still use TH1F. If you run a grep, there are almost 2000 results. Most of them in the tutorials and test folders. Others in roofit and tmva.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:405,safety,test,test,405,"> Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times. If we want to encourage that change, I think we should start by removing TH1F from all the doxygen examples in ROOT, which is I believe why many people still use TH1F. If you run a grep, there are almost 2000 results. Most of them in the tutorials and test folders. Others in roofit and tmva.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:405,testability,test,test,405,"> Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times. If we want to encourage that change, I think we should start by removing TH1F from all the doxygen examples in ROOT, which is I believe why many people still use TH1F. If you run a grep, there are almost 2000 results. Most of them in the tutorials and test folders. Others in roofit and tmva.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:84,usability,memor,memory,84,"> Yes, but why using TH1F ? Everybody should always use TH1D, unless there are some memory issues. I have seen problem like this already too many times. If we want to encourage that change, I think we should start by removing TH1F from all the doxygen examples in ROOT, which is I believe why many people still use TH1F. If you run a grep, there are almost 2000 results. Most of them in the tutorials and test folders. Others in roofit and tmva.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:61,energy efficiency,Draw,Draw,61,"> why using TH1F ? Everybody should always use TH1D,. TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:132,energy efficiency,current,currently,132,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:193,energy efficiency,CPU,CPU,193,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:723,energy efficiency,Draw,Draw,723,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:969,energy efficiency,Draw,Draw,969,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:234,integrability,interfac,interfaces,234,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:234,interoperability,interfac,interfaces,234,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:234,modifiability,interfac,interfaces,234,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:193,performance,CPU,CPU,193,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:503,performance,content,content,503,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:761,safety,compl,complicated,761,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:81,security,loss,loss,81,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:761,security,compl,complicated,761,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:155,usability,effectiv,effectively,155,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:221,usability,document,document,221,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:296,usability,behavi,behaviour,296,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:359,usability,user,user,359,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:536,usability,document,documented,536,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:621,usability,user,user,621,"A summary of the discussion at the linked PR:. * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op and a waste of CPU cycles. * We can better document the interfaces highlighting the possibility to incur in undefined behaviour of the type seen in this issue. * The only way for a user to know that they are reaching the limits of their histogram is to check the amount of entries and compare it with the maximum integer bin content for the float channel as documented by the changes in the PR. * TH1F should probably never be used unless the user really knows what they are doing. Unfortunately it is the default histogram type used by `TTree::Draw`, rendering its deprecation very complicated. * To combat this we should probably remove bare TH1F usage from tutorials everywhere. * The difference seen by @stwunsch in his report is due to the fact that RDataFrame uses TH1D whereas TTree::Draw uses the 'malign' TH1F which saturates at 1.67e8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:391,availability,slo,slower,391,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:87,energy efficiency,current,currently,87,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:347,energy efficiency,CPU,CPU,347,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:307,integrability,messag,message,307,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:307,interoperability,messag,message,307,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:347,performance,CPU,CPU,347,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:391,reliability,slo,slower,391,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:36,security,loss,loss,36,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:110,usability,effectiv,effectively,110,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:252,usability,close,close,252,"> * We cannot implement a precision loss check in TH*F classes as they are implemented currently, as it would effectively be a no-op ... . Why not ? You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. > ... and a waste of CPU cycles. Ah, yes, it would definitely be slower !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:414,deployability,depend,depend,414,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:160,integrability,messag,message,160,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:414,integrability,depend,depend,414,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:160,interoperability,messag,message,160,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:414,modifiability,depend,depend,414,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:414,safety,depend,depend,414,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:853,safety,compl,completely,853,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:853,security,compl,completely,853,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:414,testability,depend,depend,414,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:105,usability,close,close,105,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:315,usability,close,close,315,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:359,usability,Close,Closeness,359,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:470,usability,user,user,470,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:567,usability,user,user,567,"> You can always check that (value in the bin after fill) - (value in the bin before fill) is reasonably close to the value that was added, and print a warning message otherwise. Not really. Your suggestion would work well if you only had `AddBinContentByOne`. But if you have `AddBinContentByWeight`, then what's ""close"" becomes non-trivial. In other words, Closeness is a function of Weight. So your limit would depend on Weight. There is no way to ensure that that a user always calls AddBinContentByWeight with the same weight. There is no way to ensure that the user calls uses the same weight for each bin of the histogram. This would result in different ""overflow bin limits"" for every bin in the histogram. So it's an ill-posed problem. I attempted to do this with `std::nextafter - current_value` comparing it vs `weight`, but as said, this is completely problematic if you have changing weights. To me, the only solution is using TH1L where the overflow limit is well defined, and forget about floating precision.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:489,availability,toler,tolerance,489,"Sorry, but I strongly disagree. `TH1F` implements `Fill(x, w)` via `AddBinContent(bin, w)`:. ```c++. void AddBinContent(Int_t bin, Double_t w) override. {. fArray[bin] += Float_t (w);. }. ```. If one wants to be warned about overflows, it could be changed to. ```c++. void AddBinContent(Int_t bin, Double_t w) override. {. float old = fArray[bin];. fArray[bin] += Float_t (w);. float inc = fArray[bin] - old;. if (inc != (float) w) { // could be done with a non-exact comparison with some tolerance. std::cerr << ""Warning: TH1F::Fill(...) failed to increment the bin due to limited floating point precision\n"";. }. }. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:539,deployability,fail,failed,539,"Sorry, but I strongly disagree. `TH1F` implements `Fill(x, w)` via `AddBinContent(bin, w)`:. ```c++. void AddBinContent(Int_t bin, Double_t w) override. {. fArray[bin] += Float_t (w);. }. ```. If one wants to be warned about overflows, it could be changed to. ```c++. void AddBinContent(Int_t bin, Double_t w) override. {. float old = fArray[bin];. fArray[bin] += Float_t (w);. float inc = fArray[bin] - old;. if (inc != (float) w) { // could be done with a non-exact comparison with some tolerance. std::cerr << ""Warning: TH1F::Fill(...) failed to increment the bin due to limited floating point precision\n"";. }. }. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:489,reliability,toleran,tolerance,489,"Sorry, but I strongly disagree. `TH1F` implements `Fill(x, w)` via `AddBinContent(bin, w)`:. ```c++. void AddBinContent(Int_t bin, Double_t w) override. {. fArray[bin] += Float_t (w);. }. ```. If one wants to be warned about overflows, it could be changed to. ```c++. void AddBinContent(Int_t bin, Double_t w) override. {. float old = fArray[bin];. fArray[bin] += Float_t (w);. float inc = fArray[bin] - old;. if (inc != (float) w) { // could be done with a non-exact comparison with some tolerance. std::cerr << ""Warning: TH1F::Fill(...) failed to increment the bin due to limited floating point precision\n"";. }. }. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:539,reliability,fail,failed,539,"Sorry, but I strongly disagree. `TH1F` implements `Fill(x, w)` via `AddBinContent(bin, w)`:. ```c++. void AddBinContent(Int_t bin, Double_t w) override. {. fArray[bin] += Float_t (w);. }. ```. If one wants to be warned about overflows, it could be changed to. ```c++. void AddBinContent(Int_t bin, Double_t w) override. {. float old = fArray[bin];. fArray[bin] += Float_t (w);. float inc = fArray[bin] - old;. if (inc != (float) w) { // could be done with a non-exact comparison with some tolerance. std::cerr << ""Warning: TH1F::Fill(...) failed to increment the bin due to limited floating point precision\n"";. }. }. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:57,availability,toler,tolerance,57,"> // could be done with a non-exact comparison with some tolerance. Yeah, that's what I meant. Please define a tolerance that scales over order of magnitudes and weights, and that also takes into account clamping and overflows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:111,availability,toler,tolerance,111,"> // could be done with a non-exact comparison with some tolerance. Yeah, that's what I meant. Please define a tolerance that scales over order of magnitudes and weights, and that also takes into account clamping and overflows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:126,deployability,scale,scales,126,"> // could be done with a non-exact comparison with some tolerance. Yeah, that's what I meant. Please define a tolerance that scales over order of magnitudes and weights, and that also takes into account clamping and overflows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:126,energy efficiency,scale,scales,126,"> // could be done with a non-exact comparison with some tolerance. Yeah, that's what I meant. Please define a tolerance that scales over order of magnitudes and weights, and that also takes into account clamping and overflows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:126,modifiability,scal,scales,126,"> // could be done with a non-exact comparison with some tolerance. Yeah, that's what I meant. Please define a tolerance that scales over order of magnitudes and weights, and that also takes into account clamping and overflows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:126,performance,scale,scales,126,"> // could be done with a non-exact comparison with some tolerance. Yeah, that's what I meant. Please define a tolerance that scales over order of magnitudes and weights, and that also takes into account clamping and overflows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:57,reliability,toleran,tolerance,57,"> // could be done with a non-exact comparison with some tolerance. Yeah, that's what I meant. Please define a tolerance that scales over order of magnitudes and weights, and that also takes into account clamping and overflows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:111,reliability,toleran,tolerance,111,"> // could be done with a non-exact comparison with some tolerance. Yeah, that's what I meant. Please define a tolerance that scales over order of magnitudes and weights, and that also takes into account clamping and overflows...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:108,availability,state,state,108,"Re-opening the issue following further discussion. The linked PR is still valid as it documents the current state of the implementation, so that doesn't need to be changed. An investigation into finding a tolerance that can account for different (orders of magnitude of) weights is the next step for this issue. Since it was not foreseen in the PoW for 2024, we cannot give an ETA at this moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:205,availability,toler,tolerance,205,"Re-opening the issue following further discussion. The linked PR is still valid as it documents the current state of the implementation, so that doesn't need to be changed. An investigation into finding a tolerance that can account for different (orders of magnitude of) weights is the next step for this issue. Since it was not foreseen in the PoW for 2024, we cannot give an ETA at this moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:100,energy efficiency,current,current,100,"Re-opening the issue following further discussion. The linked PR is still valid as it documents the current state of the implementation, so that doesn't need to be changed. An investigation into finding a tolerance that can account for different (orders of magnitude of) weights is the next step for this issue. Since it was not foreseen in the PoW for 2024, we cannot give an ETA at this moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:108,integrability,state,state,108,"Re-opening the issue following further discussion. The linked PR is still valid as it documents the current state of the implementation, so that doesn't need to be changed. An investigation into finding a tolerance that can account for different (orders of magnitude of) weights is the next step for this issue. Since it was not foreseen in the PoW for 2024, we cannot give an ETA at this moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:145,reliability,doe,doesn,145,"Re-opening the issue following further discussion. The linked PR is still valid as it documents the current state of the implementation, so that doesn't need to be changed. An investigation into finding a tolerance that can account for different (orders of magnitude of) weights is the next step for this issue. Since it was not foreseen in the PoW for 2024, we cannot give an ETA at this moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:205,reliability,toleran,tolerance,205,"Re-opening the issue following further discussion. The linked PR is still valid as it documents the current state of the implementation, so that doesn't need to be changed. An investigation into finding a tolerance that can account for different (orders of magnitude of) weights is the next step for this issue. Since it was not foreseen in the PoW for 2024, we cannot give an ETA at this moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:74,safety,valid,valid,74,"Re-opening the issue following further discussion. The linked PR is still valid as it documents the current state of the implementation, so that doesn't need to be changed. An investigation into finding a tolerance that can account for different (orders of magnitude of) weights is the next step for this issue. Since it was not foreseen in the PoW for 2024, we cannot give an ETA at this moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:86,usability,document,documents,86,"Re-opening the issue following further discussion. The linked PR is still valid as it documents the current state of the implementation, so that doesn't need to be changed. An investigation into finding a tolerance that can account for different (orders of magnitude of) weights is the next step for this issue. Since it was not foreseen in the PoW for 2024, we cannot give an ETA at this moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:90,availability,toler,tolerance,90,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:203,deployability,depend,depending,203,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:346,energy efficiency,Draw,Draw,346,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:203,integrability,depend,depending,203,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:203,modifiability,depend,depending,203,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:220,performance,content,content,220,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:90,reliability,toleran,tolerance,90,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:40,safety,Safe,SafeFill,40,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:203,safety,depend,depending,203,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:203,testability,depend,depending,203,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:70,usability,user,user,70,"As alternative ideas:. - a new function SafeFill(x, w, tol) where the user can define his tolerance tol. - a static function IsInOverflow(binc, w, tol) that checks whether a histogram bin is in overflow depending on its content and a potential weight w to be added. From my point of view, I will just go towards TH1D or TH1L and away from TTree::Draw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:285,availability,toler,tolerance,285,"Here is a implementation that may be naive, but I would argue catches the vast majority of the use cases:. ```c++. constexpr bool compare(float expected, float actual) {. // most simple and most common case. if (actual == expected). return true;. // comparison with an arbitrary small tolerance . constexpr const float epsilon = std::numeric_limits<float>::epsilon();. const float delta = std::fabs(expected) * epsilon;. if ((actual > expected - delta) and (actual < expected + delta)). return true;. . return false;. }. ```. If any of the arguments (the weight or the actual increment) is NaN or infinite the function should return `false`, which kind of makes sense in [the above context](https://github.com/root-project/root/issues/6671#issuecomment-2047035457).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:285,reliability,toleran,tolerance,285,"Here is a implementation that may be naive, but I would argue catches the vast majority of the use cases:. ```c++. constexpr bool compare(float expected, float actual) {. // most simple and most common case. if (actual == expected). return true;. // comparison with an arbitrary small tolerance . constexpr const float epsilon = std::numeric_limits<float>::epsilon();. const float delta = std::fabs(expected) * epsilon;. if ((actual > expected - delta) and (actual < expected + delta)). return true;. . return false;. }. ```. If any of the arguments (the weight or the actual increment) is NaN or infinite the function should return `false`, which kind of makes sense in [the above context](https://github.com/root-project/root/issues/6671#issuecomment-2047035457).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:179,testability,simpl,simple,179,"Here is a implementation that may be naive, but I would argue catches the vast majority of the use cases:. ```c++. constexpr bool compare(float expected, float actual) {. // most simple and most common case. if (actual == expected). return true;. // comparison with an arbitrary small tolerance . constexpr const float epsilon = std::numeric_limits<float>::epsilon();. const float delta = std::fabs(expected) * epsilon;. if ((actual > expected - delta) and (actual < expected + delta)). return true;. . return false;. }. ```. If any of the arguments (the weight or the actual increment) is NaN or infinite the function should return `false`, which kind of makes sense in [the above context](https://github.com/root-project/root/issues/6671#issuecomment-2047035457).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:682,testability,context,context,682,"Here is a implementation that may be naive, but I would argue catches the vast majority of the use cases:. ```c++. constexpr bool compare(float expected, float actual) {. // most simple and most common case. if (actual == expected). return true;. // comparison with an arbitrary small tolerance . constexpr const float epsilon = std::numeric_limits<float>::epsilon();. const float delta = std::fabs(expected) * epsilon;. if ((actual > expected - delta) and (actual < expected + delta)). return true;. . return false;. }. ```. If any of the arguments (the weight or the actual increment) is NaN or infinite the function should return `false`, which kind of makes sense in [the above context](https://github.com/root-project/root/issues/6671#issuecomment-2047035457).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:179,usability,simpl,simple,179,"Here is a implementation that may be naive, but I would argue catches the vast majority of the use cases:. ```c++. constexpr bool compare(float expected, float actual) {. // most simple and most common case. if (actual == expected). return true;. // comparison with an arbitrary small tolerance . constexpr const float epsilon = std::numeric_limits<float>::epsilon();. const float delta = std::fabs(expected) * epsilon;. if ((actual > expected - delta) and (actual < expected + delta)). return true;. . return false;. }. ```. If any of the arguments (the weight or the actual increment) is NaN or infinite the function should return `false`, which kind of makes sense in [the above context](https://github.com/root-project/root/issues/6671#issuecomment-2047035457).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:166,availability,error,error,166,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:408,availability,toler,tolerance,408,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:789,availability,toler,tolerance,789,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:819,energy efficiency,CPU,CPU-wasting,819,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:128,integrability,event,event,128,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:166,performance,error,error,166,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:238,performance,content,content,238,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:819,performance,CPU,CPU-wasting,819,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:408,reliability,toleran,tolerance,408,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:789,reliability,toleran,tolerance,789,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:166,safety,error,error,166,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:166,usability,error,error,166,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/issues/6671:626,usability,close,close,626,"With @lmoneta we were discussing in the PR this kind of case:. a histogram with an initial SetBinContent of 1e8, and you add an event with weight 8. This leads to an error. `(1e8f+8.01f)- 1e8f - 8.01f = -0.01f`. which compared to the bin content of 1e8 is a negligible difference. But `compare(8.01f,8.00f)` would return that the increment is not the same. So we were thinking of defining somehow a relative tolerance. We used std::nextafterf and compared the relative distance wrt the original, and divided by w. But weird things may happen here, because you might call Fill with a negative weight, and the result might come close to zero for some bins, so a relative normalization is also ugly. We would need a compromise somehow between an absolute and a relative normalization for the tolerance, or adding a lot of CPU-wasting checks. Or just focus on the main cases with positive weights.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6671
https://github.com/root-project/root/pull/6672:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6672
https://github.com/root-project/root/issues/6675:5,deployability,contain,contained,5,"Self-contained compilable reproducer:. ```cpp. ROOT::RDataFrame(10).Define(""x"", [] { return ROOT::RVec<bool>{true, false}; }).Histo1D<ROOT::RVec<bool>>(""x""). ```. It's probably enough to change those `for(auto &x0: x0s)` to `for(auto &&x0: x0s)` or also `for(const auto &x0 : x0s)`. Pretty bad that we don't test filling of histograms with vectors of bools.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6675
https://github.com/root-project/root/issues/6675:308,safety,test,test,308,"Self-contained compilable reproducer:. ```cpp. ROOT::RDataFrame(10).Define(""x"", [] { return ROOT::RVec<bool>{true, false}; }).Histo1D<ROOT::RVec<bool>>(""x""). ```. It's probably enough to change those `for(auto &x0: x0s)` to `for(auto &&x0: x0s)` or also `for(const auto &x0 : x0s)`. Pretty bad that we don't test filling of histograms with vectors of bools.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6675
https://github.com/root-project/root/issues/6675:308,testability,test,test,308,"Self-contained compilable reproducer:. ```cpp. ROOT::RDataFrame(10).Define(""x"", [] { return ROOT::RVec<bool>{true, false}; }).Histo1D<ROOT::RVec<bool>>(""x""). ```. It's probably enough to change those `for(auto &x0: x0s)` to `for(auto &&x0: x0s)` or also `for(const auto &x0 : x0s)`. Pretty bad that we don't test filling of histograms with vectors of bools.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6675
https://github.com/root-project/root/issues/6676:108,deployability,build,build,108,"Please check where the allocations come from with `valgrind --tool=massif` (I think you need to use a debug build, i.e. not a conda package for this to work).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:23,energy efficiency,alloc,allocations,23,"Please check where the allocations come from with `valgrind --tool=massif` (I think you need to use a debug build, i.e. not a conda package for this to work).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:132,modifiability,pac,package,132,"Please check where the allocations come from with `valgrind --tool=massif` (I think you need to use a debug build, i.e. not a conda package for this to work).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:62,usability,tool,tool,62,"Please check where the allocations come from with `valgrind --tool=massif` (I think you need to use a debug build, i.e. not a conda package for this to work).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:311,energy efficiency,Draw,Draw,311,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:326,energy efficiency,estimat,estimate,326,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:237,integrability,filter,filters,237,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:448,integrability,event,event,448,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:42,interoperability,specif,specified,42,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:254,interoperability,specif,specifying,254,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:418,performance,lock,locking,418,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:435,performance,multi-thread,multi-thread,435,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:317,reliability,doe,does,317,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:387,safety,avoid,avoided,387,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:418,security,lock,locking,418,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:319,energy efficiency,Draw,Draw,319,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:334,energy efficiency,estimat,estimate,334,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:239,integrability,filter,filters,239,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:456,integrability,event,event,456,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:44,interoperability,specif,specified,44,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:256,interoperability,specif,specifying,256,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:426,performance,lock,locking,426,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:443,performance,multi-thread,multi-thread,443,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:325,reliability,doe,does,325,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:395,safety,avoid,avoided,395,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:426,security,lock,locking,426,"> My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. > . > We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though. Ah, thanks for the explanation. That makes sense, the file has around 8 GB (compressed size).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1111,deployability,log,log,1111,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1180,deployability,log,log,1180,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:55,energy efficiency,profil,profile,55,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:862,energy efficiency,Draw,Draw,862,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:950,energy efficiency,profil,profile,950,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:341,integrability,Event,Events,341,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:55,performance,profil,profile,55,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:950,performance,profil,profile,950,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:11,safety,test,test,11,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1111,safety,log,log,1111,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1180,safety,log,log,1180,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1111,security,log,log,1111,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1180,security,log,log,1180,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:11,testability,test,test,11,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1111,testability,log,log,1111,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1180,testability,log,log,1180,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:986,usability,clear,clear,986,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1010,usability,learn,learn,1010,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:1067,usability,clear,clear,1067,"Here's the test program for which I'm doing the massif profile:. ```cpp. #include ""ROOT/RDataFrame.hxx"". #include ""ROOT/RVec.hxx"". #include ""ROOT/RDF/RInterface.hxx"". #include ""TH1D.h"". #include ""TCanvas.h"". #include <string>. #include <vector>. #include <iostream>. int main() {. using namespace std;. using namespace ROOT;. RDataFrame df(""Events"", ""DYJetsToLL.root"");. vector<string> cols;. for (auto& col: df.GetColumnNames()) {. const auto type = df.GetColumnType(col);. if (type.find(""RVec<Float_t>"") != string::npos) {. cols.emplace_back(col);. cout << ""Select column "" << col << "" with type "" << type << endl;. }. }. vector<RDF::RResultPtr<TH1D>> hists;. for (auto& col: cols) {. hists.emplace_back(df.Histo1D<RVec<float>>(col));. }. for (auto i = 0u; i < hists.size(); i++) {. auto c = new TCanvas(cols[i].c_str(), cols[i].c_str(), 600, 600);. hists[i]->Draw();. c->SaveAs((cols[i] + "".png"").c_str());. delete c;. }. }. ```. You can find the profile attached, but it's not very clear to me what we can learn from it. We have 3GB from malloc/new, but it's not clear where it's coming from. [ms_print_cpp.log](https://github.com/root-project/root/files/5437832/ms_print_cpp.log).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:89,deployability,log,log,89,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:552,deployability,automat,automatically,552,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:172,energy efficiency,alloc,allocations,172,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:681,integrability,topic,topic,681,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:852,integrability,event,events,852,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:282,interoperability,specif,specify,282,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:591,interoperability,compatib,compatible,591,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:184,performance,perform,performed,184,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:425,performance,synch,synchronization,425,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:460,performance,perform,performance,460,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:89,safety,log,log,89,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:89,security,log,log,89,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:89,testability,log,log,89,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:256,testability,simpl,simplest,256,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:552,testability,automat,automatically,552,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:114,usability,confirm,confirm,114,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:184,usability,perform,performed,184,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:256,usability,simpl,simplest,256,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:460,usability,perform,performance,460,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:65,deployability,build,build,65,"I wonder why the information is missing, it's a `RelWithDebInfo` build and no jitting involved :thinking: . But I agree that combined with your knowledge about the code, it's clear where it comes from. It's not clear to me whether it's an issue or not. Definitely, it's confusing to see your machine blow up for no reason and I'm sure it's a pain to figure this out. What about a warning if you use histograms without a binning? But I don't see how we could do this so that the exploratory analysis in the shell isn't messed up with warnings all the time. Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:682,interoperability,distribut,distribution,682,"I wonder why the information is missing, it's a `RelWithDebInfo` build and no jitting involved :thinking: . But I agree that combined with your knowledge about the code, it's clear where it comes from. It's not clear to me whether it's an issue or not. Definitely, it's confusing to see your machine blow up for no reason and I'm sure it's a pain to figure this out. What about a warning if you use histograms without a binning? But I don't see how we could do this so that the exploratory analysis in the shell isn't messed up with warnings all the time. Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:550,performance,time,time,550,"I wonder why the information is missing, it's a `RelWithDebInfo` build and no jitting involved :thinking: . But I agree that combined with your knowledge about the code, it's clear where it comes from. It's not clear to me whether it's an issue or not. Definitely, it's confusing to see your machine blow up for no reason and I'm sure it's a pain to figure this out. What about a warning if you use histograms without a binning? But I don't see how we could do this so that the exploratory analysis in the shell isn't messed up with warnings all the time. Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:175,usability,clear,clear,175,"I wonder why the information is missing, it's a `RelWithDebInfo` build and no jitting involved :thinking: . But I agree that combined with your knowledge about the code, it's clear where it comes from. It's not clear to me whether it's an issue or not. Definitely, it's confusing to see your machine blow up for no reason and I'm sure it's a pain to figure this out. What about a warning if you use histograms without a binning? But I don't see how we could do this so that the exploratory analysis in the shell isn't messed up with warnings all the time. Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:211,usability,clear,clear,211,"I wonder why the information is missing, it's a `RelWithDebInfo` build and no jitting involved :thinking: . But I agree that combined with your knowledge about the code, it's clear where it comes from. It's not clear to me whether it's an issue or not. Definitely, it's confusing to see your machine blow up for no reason and I'm sure it's a pain to figure this out. What about a warning if you use histograms without a binning? But I don't see how we could do this so that the exploratory analysis in the shell isn't messed up with warnings all the time. Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:492,availability,monitor,monitors,492,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:358,deployability,depend,depends,358,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:492,deployability,monitor,monitors,492,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:492,energy efficiency,monitor,monitors,492,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:201,integrability,event,events,201,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:358,integrability,depend,depends,358,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:426,integrability,event,events,426,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:437,integrability,filter,filtered,437,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:128,interoperability,distribut,distribution,128,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:250,interoperability,specif,specify,250,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:358,modifiability,depend,depends,358,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:492,reliability,monitor,monitors,492,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:358,safety,depend,depends,358,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:492,safety,monitor,monitors,492,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:358,testability,depend,depends,358,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:492,testability,monitor,monitors,492,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:387,usability,behavi,behavior,387,"> Edit: And I would call the code above exploratory ;) It's a smallish sample in terms of HEP data and you just want to see the distribution of each column. Yes, that should make it ok to run on fewer events right? We could add warnings like ""please specify a binning"" if vectors become too large, but it's quite unclear what ""too large"" is (in principle in depends on the exact runtime behavior of the analysis, e.g. whether events are filtered a lot or not, but that would require that RDF monitors its own RAM usage which is tricky). So I'm not sure how to proceed. Ideas? :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:31,interoperability,specif,specify,31,"Closing as ""won't fix"", please specify a binning to avoid accumulation of a large number of values in memory.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:102,performance,memor,memory,102,"Closing as ""won't fix"", please specify a binning to avoid accumulation of a large number of values in memory.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:52,safety,avoid,avoid,52,"Closing as ""won't fix"", please specify a binning to avoid accumulation of a large number of values in memory.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:102,usability,memor,memory,102,"Closing as ""won't fix"", please specify a binning to avoid accumulation of a large number of values in memory.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:381,deployability,scale,scale,381,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:381,energy efficiency,scale,scale,381,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:412,energy efficiency,core,cores,412,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:18,interoperability,specif,specifying,18,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:381,modifiability,scal,scale,381,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:88,performance,multi-thread,multi-threading,88,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:139,performance,perform,performance,139,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:242,performance,multi-thread,multi-thread,242,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:300,performance,synch,synchronization,300,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:381,performance,scale,scale,381,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:283,reliability,doe,does,283,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:350,safety,avoid,avoid,350,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:139,usability,perform,performance,139,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:388,deployability,scale,scale,388,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:388,energy efficiency,scale,scale,388,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:419,energy efficiency,core,cores,419,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:20,interoperability,specif,specifying,20,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:509,interoperability,specif,specify,509,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:388,modifiability,scal,scale,388,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:90,performance,multi-thread,multi-threading,90,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:141,performance,perform,performance,141,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:249,performance,multi-thread,multi-thread,249,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:307,performance,synch,synchronization,307,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:388,performance,scale,scale,388,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:780,performance,memor,memory,780,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:818,performance,multi-thread,multi-threading,818,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:290,reliability,doe,does,290,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:357,safety,avoid,avoid,357,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:768,security,control,control,768,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:768,testability,control,control,768,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:141,usability,perform,performance,141,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:780,usability,memor,memory,780,"> Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D. > . > The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced). Hi @eguiraud , thanks for replying. I do specify a binning for every histogram being generated. However, the bin number is about ~20000 each histogram in order to guarantee there's no unexpected overflow/underflow. Maybe I should lower it a bit, but it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:563,interoperability,specif,specifying,563,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:305,performance,memor,memory,305,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:343,performance,multi-thread,multi-threading,343,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:517,performance,perform,performance,517,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:652,performance,memor,memory,652,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:490,reliability,doe,does,490,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:293,security,control,control,293,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:509,security,loss,loss,509,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:293,testability,control,control,293,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:305,usability,memor,memory,305,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:517,usability,perform,performance,517,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6676:652,usability,memor,memory,652,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6676
https://github.com/root-project/root/issues/6677:385,deployability,releas,releases,385,"Hi @bellenot ,. > it might be an issue with Clang itself. That is exactly the point. clang produces wrong math in libraries/executables with anything higher than -O1. That affects at least some routines in ROOT. The code I've posted above is a standalone code, despite it is based on code from ROOT. On the ROOT side one can only change the compilation flags for clang in the official releases. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:194,integrability,rout,routines,194,"Hi @bellenot ,. > it might be an issue with Clang itself. That is exactly the point. clang produces wrong math in libraries/executables with anything higher than -O1. That affects at least some routines in ROOT. The code I've posted above is a standalone code, despite it is based on code from ROOT. On the ROOT side one can only change the compilation flags for clang in the official releases. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:43,availability,operat,operations,43,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:127,availability,operat,operations,127,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:341,availability,mask,mask,341,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:78,energy efficiency,optim,optimization,78,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:194,energy efficiency,optim,optimization,194,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:260,integrability,topic,topic,260,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:300,integrability,interfac,interface,300,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:300,interoperability,interfac,interface,300,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:300,modifiability,interfac,interface,300,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:78,performance,optimiz,optimization,78,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:194,performance,optimiz,optimization,194,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:286,reliability,doe,does,286,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:350,reliability,doe,does,350,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:28,safety,except,exceptions,28,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:150,safety,except,exceptions,150,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:243,safety,except,exceptions,243,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:331,safety,except,exception,331,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:372,safety,except,exceptions,372,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:225,testability,understand,understand,225,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:76,availability,operat,operations,76,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:598,availability,reliab,reliable,598,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:27,energy efficiency,optim,optimization,27,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:143,energy efficiency,optim,optimization,143,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:246,energy efficiency,optim,optimization,246,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:340,energy efficiency,optim,optimization,340,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:439,integrability,topic,topic,439,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:661,integrability,event,event,661,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:27,performance,optimiz,optimization,27,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:143,performance,optimiz,optimization,143,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:246,performance,optimiz,optimization,246,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:340,performance,optimiz,optimization,340,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:598,reliability,reliab,reliable,598,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:99,safety,except,exceptions,99,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:385,safety,compl,complicated,385,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:422,safety,except,exceptions,422,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:492,safety,except,exceptions,492,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:385,security,compl,complicated,385,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:174,testability,understand,understand,174,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,. Andrii. Best regards,. Andrii .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:56,availability,reliab,reliable,56,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:240,availability,down,down,240,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:461,availability,reliab,reliable,461,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:531,availability,operat,operations,531,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:626,deployability,version,versions,626,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:505,energy efficiency,optim,optimizer,505,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:626,integrability,version,versions,626,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:626,modifiability,version,versions,626,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:505,performance,optimiz,optimizer,505,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:56,reliability,reliab,reliable,56,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:461,reliability,reliab,reliable,461,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:157,safety,except,exceptions,157,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:575,safety,safe,safe,575,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:708,safety,reme,remember,708,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:769,safety,except,exceptions,769,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:810,safety,test,tests,810,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:853,safety,except,exceptions,853,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:885,safety,detect,detect,885,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:885,security,detect,detect,885,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:787,testability,coverag,coverage,787,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:799,testability,regress,regression,799,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:810,testability,test,tests,810,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:302,usability,behavi,behavior,302,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:953,usability,close,close,953,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:502,availability,operat,operations,502,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:201,deployability,integr,integration,201,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:214,deployability,fail,fails,214,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:597,deployability,version,versions,597,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:1078,deployability,releas,release,1078,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:1086,deployability,build,builds,1086,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:1133,deployability,patch,patch,1133,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:476,energy efficiency,optim,optimizer,476,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:201,integrability,integr,integration,201,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:597,integrability,version,versions,597,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:201,interoperability,integr,integration,201,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:815,interoperability,standard,standard,815,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:201,modifiability,integr,integration,201,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:597,modifiability,version,versions,597,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:476,performance,optimiz,optimizer,476,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:123,reliability,doe,does,123,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:137,reliability,pra,practically,137,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:201,reliability,integr,integration,201,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:214,reliability,fail,fails,214,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:942,reliability,pra,practice,942,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:189,safety,compl,complicated,189,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:546,safety,safe,safe,546,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:1133,safety,patch,patch,1133,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:189,security,compl,complicated,189,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:201,security,integr,integration,201,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:1133,security,patch,patch,1133,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:201,testability,integr,integration,201,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:434,testability,understand,understand,434,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:619,testability,understand,understand,619,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:45,usability,behavi,behavior,45,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:132,usability,help,help,132,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:395,usability,user,user,395,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. . So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right? If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:29,deployability,releas,release,29,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:37,deployability,build,builds,37,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:241,deployability,build,build,241,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:322,deployability,build,build,322,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:395,deployability,patch,patch,395,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:281,safety,compl,complexity,281,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:395,safety,patch,patch,395,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:281,security,compl,complexity,281,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:395,security,patch,patch,395,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:254,testability,simpl,simpler,254,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:165,usability,user,user,165,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:222,usability,prefer,prefer,222,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:254,usability,simpl,simpler,254,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:377,usability,prefer,prefer,377,"> changing the flags for the release builds is not an option, right? It certainly is, but we have not received any request from an experiment, and you are the first user ever to mention this :-) Given these statistics I'd prefer to keep our build system simpler rather than adding complexity, especially as you can always build your own ROOT if needed, with the flags that you prefer! > would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I'll assign this to @couet so he can decide whether that's useful!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:10,deployability,patch,patch,10,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:151,deployability,version,version,151,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:370,energy efficiency,core,core,370,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:151,integrability,version,version,151,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:151,modifiability,version,version,151,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:10,safety,patch,patch,10,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:320,safety,test,test,320,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:380,safety,test,test,380,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:10,security,patch,patch,10,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:144,security,secur,secure,144,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:320,testability,test,test,320,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:380,testability,test,test,380,"> would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Why not, if that provides a more secure version of the method. But that's not the only one to be considered I guess: All the XXX2YYY methods in TColor should be checked, shouldn't they ? If you provide a PR a test going with it would be also appreciated. (in core/base/test)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:89,deployability,build,build,89,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:156,deployability,build,build,156,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:219,deployability,build,building,219,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:268,deployability,build,build,268,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:194,integrability,event,event,194,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:366,integrability,repositor,repositories,366,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:366,interoperability,repositor,repositories,366,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:354,modifiability,pac,packages,354,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:213,safety,avoid,avoid,213,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:449,safety,test,test,449,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:449,testability,test,test,449,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:85,deployability,build,building,85,"Thanks a lot, @andriish ! > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:60,integrability,event,event,60,"Thanks a lot, @andriish ! > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:79,safety,avoid,avoid,79,"Thanks a lot, @andriish ! > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:201,safety,except,exceptions,201,"Thanks a lot, @andriish ! > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:245,safety,test,testing,245,"Thanks a lot, @andriish ! > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:150,testability,understand,understand,150,"Thanks a lot, @andriish ! > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:165,testability,context,context,165,"Thanks a lot, @andriish ! > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:245,testability,test,testing,245,"Thanks a lot, @andriish ! > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:250,deployability,updat,update,250,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:51,integrability,event,event,51,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:379,integrability,event,event,379,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:533,reliability,stabil,stability,533,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:250,safety,updat,update,250,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:250,security,updat,update,250,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:121,usability,user,userbase,121,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/issues/6677:318,usability,clear,clear,318,"Hi @Axel-Naumann ,. I would say ""both"". That is an event display from ZEUS, ""ported"" from ROOT5/Make to ROOT6/CMake. The userbase is small, so whenever someone needs it, some smaller of greater issues arise for various reasons (e.g. ROOT/OS/compiler update) and one has to debug them with the people who need that. No clear separation of ""debug"" and ""production"". And well, this event display is kind of small and fast, so there are no reasons to disable debug information ""in production"". Speed is lesser issue than correctness and stability. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6677
https://github.com/root-project/root/pull/6678:14,safety,compl,complains,14,Let's see who complains about a const ref!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6678
https://github.com/root-project/root/pull/6678:14,security,compl,complains,14,Let's see who complains about a const ref!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6678
https://github.com/root-project/root/pull/6678:12,safety,reme,remember,12,@eguiraud I remember having this issue before. At the end we used a good old plain C style loop to make everyone happy ...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6678
https://github.com/root-project/root/pull/6678:41,availability,down,down,41,"It's your call. C style loop or shutting down the warning? Edit: Actually, we need an iterator based loop, so that we also support `std::list` and friends.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6678
https://github.com/root-project/root/pull/6678:123,usability,support,support,123,"It's your call. C style loop or shutting down the warning? Edit: Actually, we need an iterator based loop, so that we also support `std::list` and friends.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6678
https://github.com/root-project/root/pull/6680:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6680
https://github.com/root-project/root/pull/6680:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6680
https://github.com/root-project/root/pull/6680:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6680
https://github.com/root-project/root/pull/6680:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6680
https://github.com/root-project/root/pull/6680:4,availability,failur,failures,4,The failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6680
https://github.com/root-project/root/pull/6680:4,deployability,fail,failures,4,The failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6680
https://github.com/root-project/root/pull/6680:4,performance,failur,failures,4,The failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6680
https://github.com/root-project/root/pull/6680:4,reliability,fail,failures,4,The failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6680
https://github.com/root-project/root/issues/6681:112,modifiability,exten,extend,112,For the moment JSROOT and all ROOT7 widgets enforce `utf-8` on produced web pages. But it should be possible to extend ROOT7 functionality and support other encodings as well. We also have to investigate usage of `wchar` type on C++ side if different encodings has to be used at the same time. Thanks for pointing it out!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6681
https://github.com/root-project/root/issues/6681:288,performance,time,time,288,For the moment JSROOT and all ROOT7 widgets enforce `utf-8` on produced web pages. But it should be possible to extend ROOT7 functionality and support other encodings as well. We also have to investigate usage of `wchar` type on C++ side if different encodings has to be used at the same time. Thanks for pointing it out!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6681
https://github.com/root-project/root/issues/6681:36,usability,widget,widgets,36,For the moment JSROOT and all ROOT7 widgets enforce `utf-8` on produced web pages. But it should be possible to extend ROOT7 functionality and support other encodings as well. We also have to investigate usage of `wchar` type on C++ side if different encodings has to be used at the same time. Thanks for pointing it out!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6681
https://github.com/root-project/root/issues/6681:143,usability,support,support,143,For the moment JSROOT and all ROOT7 widgets enforce `utf-8` on produced web pages. But it should be possible to extend ROOT7 functionality and support other encodings as well. We also have to investigate usage of `wchar` type on C++ side if different encodings has to be used at the same time. Thanks for pointing it out!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6681
https://github.com/root-project/root/issues/6681:103,usability,support,supported,103,"Finally after https://github.com/root-project/root/pull/8344 merged into the master, UTF-8 is properly supported in TBufferJSON and therefore can be transferred to the client without problems. In all ROOT-based web widgets UTF-8 set as default and therefore directly works without any limitation for any kind of elements like `RText`, `RAxis` titles and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6681
https://github.com/root-project/root/issues/6681:215,usability,widget,widgets,215,"Finally after https://github.com/root-project/root/pull/8344 merged into the master, UTF-8 is properly supported in TBufferJSON and therefore can be transferred to the client without problems. In all ROOT-based web widgets UTF-8 set as default and therefore directly works without any limitation for any kind of elements like `RText`, `RAxis` titles and so on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6681
https://github.com/root-project/root/issues/6682:343,deployability,resourc,resources,343,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:343,energy efficiency,resourc,resources,343,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:704,energy efficiency,draw,drawing,704,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:759,energy efficiency,draw,drawing,759,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:114,interoperability,plug,plugin,114,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:561,interoperability,plug,plugin,561,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:343,performance,resourc,resources,343,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:343,safety,resourc,resources,343,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:343,testability,resourc,resources,343,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:365,testability,simpl,simply,365,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:365,usability,simpl,simply,365,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:409,usability,close,close,409,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:651,usability,help,help,651,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:666,usability,user,users,666,"As I pointed out in https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=108747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-108747 :. > we should keep ROOT7 graphics open enough for people to be able to write it themselves if they wish. Given that there is no way we will do this (we don't have the resources and this is simply not important enough) I'd suggest we close this? That hasn't changed, which only leaves [this](https://sft.its.cern.ch/jira/browse/ROOT-7567?focusedCommentId=109658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-109658) open for @linev . > Just to help potential users interested in implementing this drawing option, could you tell us in which classes the drawing is done in ROOT7?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:649,availability,avail,available,649,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:87,energy efficiency,draw,drawing,87,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:509,energy efficiency,Draw,DrawAxis,509,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:219,integrability,event,events,219,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:649,reliability,availab,available,649,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:649,safety,avail,available,649,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:649,security,availab,available,649,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:249,testability,context,context,249,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:171,usability,interact,interactive,171,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:213,usability,mous,mouse,213,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:230,usability,tool,tooltips,230,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/issues/6682:257,usability,menu,menus,257,"There will be many aspects of implementing `XKCD` style. Axes, labels and all kinds of drawing options for histograms, graphs, functions, ... And, that is very important, interactive functionality - how to handle mouse events for tooltips, zooming, context menus. It will be a long way, but we could try. Probably starting with axes and TF1 object. There is `RAxisPainter` class in JSROOT, which could be found here:. https://github.com/root-project/jsroot/blob/master/scripts/JSRoot.v7gpad.js#L246. Central `DrawAxis` method used for producing SVG output. . I could try to implement alternative there. I also will try to check if ""Humor sans"" font available in web browsers.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6682
https://github.com/root-project/root/pull/6683:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6683
https://github.com/root-project/root/pull/6684:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:515,availability,mask,masks,515,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:907,availability,mask,masks,907,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1030,availability,mask,mask,1030," is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:3974,deployability,build,build,3974,"=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLight1, fSaturation1);. printf(""%f, %f, %f\n"",fHue1, fLight1, fSaturation1);. }. for (size_t i=0; i<1000000;i++). {. r2=16.0f*(1.0f-float(R2->Rndm()));. g2=16.0f*(1.0f-float(R2->Rndm()));. b2=16.0f*(1.0f-float(R2->Rndm()));. printf(""TColor::RGB2HSV(%f, %f, %f ...) ->"",r2,g2,b2);. TColor::RGB2HSV( r2,g2,b2 ,fHue2, fLight2, fSaturation2);. printf(""%f, %f, %f\n"",fHue2, fLight2, fSaturation2);. }. for (size_t i=0; i<1000000;i++). {. r3=16.0f*(1.0f-float(R3->Rndm()));. g3=16.0f*(1.0f-float(R3->Rndm()));. b3=16.0f*(1.0f-float(R3->Rndm()));. printf(""TColor::HLStoRGB(%f, %f, %f ...) ->"",r3,g3,b3);. TColor::HLStoRGB( r3,g3,b3 ,fHue3, fLight3, fSaturation3);. printf(""%f, %f, %f\n"",fHue3, fLight3, fSaturation3);. }. . . delete R1;. delete R2;. delete R3;. return 0;. }. ```. One should compile it with ``clang++ -O4``. On Mac + official ROOT 6.22 it gives me a crash almost immediately . ```. TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). ```. However it runs fine on Linux where ROOT was build with gcc. It seems the other functions do not crash. Or , at least, I was not able to find proper parameters. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1264,energy efficiency,current,current,1264,"eenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1596,energy efficiency,current,current,1596,"= fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLight1, fSaturation1);. printf(""%f, %f, %f\n"",fHue1, fLigh",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:240,integrability,Pub,Public,240,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:4078,modifiability,paramet,parameters,4078,"=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLight1, fSaturation1);. printf(""%f, %f, %f\n"",fHue1, fLight1, fSaturation1);. }. for (size_t i=0; i<1000000;i++). {. r2=16.0f*(1.0f-float(R2->Rndm()));. g2=16.0f*(1.0f-float(R2->Rndm()));. b2=16.0f*(1.0f-float(R2->Rndm()));. printf(""TColor::RGB2HSV(%f, %f, %f ...) ->"",r2,g2,b2);. TColor::RGB2HSV( r2,g2,b2 ,fHue2, fLight2, fSaturation2);. printf(""%f, %f, %f\n"",fHue2, fLight2, fSaturation2);. }. for (size_t i=0; i<1000000;i++). {. r3=16.0f*(1.0f-float(R3->Rndm()));. g3=16.0f*(1.0f-float(R3->Rndm()));. b3=16.0f*(1.0f-float(R3->Rndm()));. printf(""TColor::HLStoRGB(%f, %f, %f ...) ->"",r3,g3,b3);. TColor::HLStoRGB( r3,g3,b3 ,fHue3, fLight3, fSaturation3);. printf(""%f, %f, %f\n"",fHue3, fLight3, fSaturation3);. }. . . delete R1;. delete R2;. delete R3;. return 0;. }. ```. One should compile it with ``clang++ -O4``. On Mac + official ROOT 6.22 it gives me a crash almost immediately . ```. TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). ```. However it runs fine on Linux where ROOT was build with gcc. It seems the other functions do not crash. Or , at least, I was not able to find proper parameters. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1210,reliability,pra,pragma,1210,") && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSatur",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1542,reliability,pra,pragma,1542,"s;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLig",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:28,safety,test,test,28,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:416,safety,except,excepts,416,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:477,safety,except,excepts,477,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:804,safety,except,excepts,804,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:865,safety,except,excepts,865,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1196,safety,except,excepts,1196,"ned(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. F",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1272,safety,except,exception,1272,"cept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1380,safety,except,exception,1380,"nt feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1436,safety,except,excepts,1436,"_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1528,safety,except,excepts,1528,"nt old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1604,safety,except,exception,1604,"control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLight1, fSaturation1);. printf(""%f, %f, %f\n"",fHue1, fLight1, fSatu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1712,safety,except,exception,1712,"return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLight1, fSaturation1);. printf(""%f, %f, %f\n"",fHue1, fLight1, fSaturation1);. }. for (size_t i=0; i<1000000;i++). {. r2=16.0f*(1.0f-float(R2->Rndm()));. g2=16.0f*(1.0f-float(R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1769,safety,except,excepts,1769,"t fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLight1, fSaturation1);. printf(""%f, %f, %f\n"",fHue1, fLight1, fSaturation1);. }. for (size_t i=0; i<1000000;i++). {. r2=16.0f*(1.0f-float(R2->Rndm()));. g2=16.0f*(1.0f-float(R2->Rndm()));. b2=16.0f*(1.0f-float(R2->Rndm()));. printf",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:3792,safety,except,exception,3792,"=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLight1, fSaturation1);. printf(""%f, %f, %f\n"",fHue1, fLight1, fSaturation1);. }. for (size_t i=0; i<1000000;i++). {. r2=16.0f*(1.0f-float(R2->Rndm()));. g2=16.0f*(1.0f-float(R2->Rndm()));. b2=16.0f*(1.0f-float(R2->Rndm()));. printf(""TColor::RGB2HSV(%f, %f, %f ...) ->"",r2,g2,b2);. TColor::RGB2HSV( r2,g2,b2 ,fHue2, fLight2, fSaturation2);. printf(""%f, %f, %f\n"",fHue2, fLight2, fSaturation2);. }. for (size_t i=0; i<1000000;i++). {. r3=16.0f*(1.0f-float(R3->Rndm()));. g3=16.0f*(1.0f-float(R3->Rndm()));. b3=16.0f*(1.0f-float(R3->Rndm()));. printf(""TColor::HLStoRGB(%f, %f, %f ...) ->"",r3,g3,b3);. TColor::HLStoRGB( r3,g3,b3 ,fHue3, fLight3, fSaturation3);. printf(""%f, %f, %f\n"",fHue3, fLight3, fSaturation3);. }. . . delete R1;. delete R2;. delete R3;. return 0;. }. ```. One should compile it with ``clang++ -O4``. On Mac + official ROOT 6.22 it gives me a crash almost immediately . ```. TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). ```. However it runs fine on Linux where ROOT was build with gcc. It seems the other functions do not crash. Or , at least, I was not able to find proper parameters. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:28,testability,test,test,28,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:305,usability,person,personal,305,"Hi @couet ,. the reproducer/test is. ```. //. // main.cxx. #include <iostream>. #include <stdlib.h>. #include <TColor.h>. #include <TRandom.h>. #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT. #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X. // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3=",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1367,usability,clear,clear,1367,"ple.c. inline int feenableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask. fenv.__control &= ~new_excepts;. fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:1699,usability,clear,clear,1699,"xcepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;. }. inline int fedisableexcept(unsigned int excepts). {. static fenv_t fenv;. unsigned int new_excepts = excepts & FE_ALL_EXCEPT;. // all previous masks. unsigned int old_excepts;. if (fegetenv(&fenv)) {. return -1;. }. old_excepts = fenv.__control & FE_ALL_EXCEPT;. // mask. fenv.__control |= new_excepts;. fenv.__mxcsr |= new_excepts << 7;. return fesetenv(&fenv) ? -1 : old_excepts;. }. #else. inline int feenableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, excepts) != 0 ? -1 : flags; /* set new flags */. }. inline int fedisableexcept(unsigned int excepts). {. #pragma STDC FENV_ACCESS ON. fexcept_t flags;. /* Save current exception flags. */. fegetexceptflag(&flags, FE_ALL_EXCEPT);. feclearexcept(FE_ALL_EXCEPT); /* clear all fp exception conditions */. return fesetexceptflag(&flags, ~excepts) != 0 ? -1 : flags; /* set new flags */. }. #endif. #endif. int main(int argc, char **argv) {. feenableexcept(FE_DIVBYZERO | FE_INVALID | FE_OVERFLOW);. TRandom* R1= new TRandom();. TRandom* R2= new TRandom();. TRandom* R3= new TRandom();. Float_t r1,g1,b1;. Float_t r2,g2,b2;. Float_t r3,g3,b3;. Float_t fHue1=-1.0f; . Float_t fLight1=-1.0f;. Float_t fSaturation1 = -1.0f;. Float_t fHue2=-1.0f; . Float_t fLight2=-1.0f;. Float_t fSaturation2 = -1.0f;. Float_t fHue3=-1.0f; . Float_t fLight3=-1.0f;. Float_t fSaturation3 = -1.0f;. for (size_t i=0; i<1000000;i++). {. r1=16.0f*(1.0f-float(R1->Rndm()));. g1=16.0f*(1.0f-float(R1->Rndm()));. b1=16.0f*(1.0f-float(R1->Rndm()));. printf(""TColor::RGB2HLS(%f, %f, %f ...)->"",r1,g1,b1);. TColor::RGB2HLS( r1,g1,b1 ,fHue1, fLight1, fSaturation1);. printf(""%f, %f, %f\n"",fHue1, fLight1, fSaturation1);. }. for (size_t i=0; i<1000000;i++). {. r2=16.0f*(1.0f-float(R2->Rndm()));. g2=16.0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:42,energy efficiency,model,model,42,@andriish I was thinking of a test on the model of those in core/base/test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:60,energy efficiency,core,core,60,@andriish I was thinking of a test on the model of those in core/base/test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:30,safety,test,test,30,@andriish I was thinking of a test on the model of those in core/base/test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:70,safety,test,test,70,@andriish I was thinking of a test on the model of those in core/base/test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:42,security,model,model,42,@andriish I was thinking of a test on the model of those in core/base/test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:30,testability,test,test,30,@andriish I was thinking of a test on the model of those in core/base/test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:70,testability,test,test,70,@andriish I was thinking of a test on the model of those in core/base/test,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:66,energy efficiency,adapt,adapt,66,"Hi @couet ,. hm. That is google test. I don't use it. Will try to adapt the reproducer to it, but it will take some time. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:66,integrability,adapt,adapt,66,"Hi @couet ,. hm. That is google test. I don't use it. Will try to adapt the reproducer to it, but it will take some time. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:66,interoperability,adapt,adapt,66,"Hi @couet ,. hm. That is google test. I don't use it. Will try to adapt the reproducer to it, but it will take some time. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:66,modifiability,adapt,adapt,66,"Hi @couet ,. hm. That is google test. I don't use it. Will try to adapt the reproducer to it, but it will take some time. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:116,performance,time,time,116,"Hi @couet ,. hm. That is google test. I don't use it. Will try to adapt the reproducer to it, but it will take some time. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:32,safety,test,test,32,"Hi @couet ,. hm. That is google test. I don't use it. Will try to adapt the reproducer to it, but it will take some time. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:32,testability,test,test,32,"Hi @couet ,. hm. That is google test. I don't use it. Will try to adapt the reproducer to it, but it will take some time. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:16,safety,test,test,16,I guess a quick test on the various XXX2YYY methods is enough (input value xyz should gives output abc...) no need for a reproducer. Other wise do not worry we can add it later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:63,safety,input,input,63,I guess a quick test on the various XXX2YYY methods is enough (input value xyz should gives output abc...) no need for a reproducer. Other wise do not worry we can add it later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:16,testability,test,test,16,I guess a quick test on the various XXX2YYY methods is enough (input value xyz should gives output abc...) no need for a reproducer. Other wise do not worry we can add it later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:63,usability,input,input,63,I guess a quick test on the various XXX2YYY methods is enough (input value xyz should gives output abc...) no need for a reproducer. Other wise do not worry we can add it later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:125,availability,sli,slightly,125,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:359,availability,sli,slightly,359,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:621,availability,consist,consistency,621,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:747,energy efficiency,reduc,reducing,747,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:125,reliability,sli,slightly,125,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:359,reliability,sli,slightly,359,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:871,reliability,Doe,Does,871,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:264,safety,compl,completely,264,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:636,safety,compl,completely,636,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:264,security,compl,completely,264,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:636,security,compl,completely,636,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:85,testability,simpl,simply,85,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:85,usability,simpl,simply,85,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:621,usability,consist,consistency,621,"Hi @Axel-Naumann ,. > Much of this has no effect on the resulting assembly; they are simply code churn. Some might result in slightly different assembly instructions, but I double they have a visible effect - can you convince us that this is needed? This would be completely true if the clang would do its job well. Not the case, unfortunately. Therefore . > slightly different assembly instructions. actually matter. . > by including the case that this change fixes. The reproducer should not crash with these changes. >I don't see why this is needed. What I actually did is that I've put 'f' everywhere for the sake of consistency. I completely agree that at least in some cases the changes will not matter even for clang. . >I'd be in favor of reducing the change to the few lines where it actually has an effect. OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:534,energy efficiency,current,current,534,"> The reproducer should not crash with these changes. Could you verify that, please? > OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Even assignments should be left with double literals (`float x = 1.2;`); as you can see from the CompilerExplorer link I pasted above, clang does generate the exact same assembly whether you assign a float or double literal. Instead, only computations with literals should become floats, as these will otherwise become double precision computations. So based on my current understanding my preference would be:. - leave double literals in comparisons and assignments;. - change to float literals where they appearing in computations (`+ - * /`), if you can validate that this fixes your reproducer. Would that sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:141,reliability,Doe,Does,141,"> The reproducer should not crash with these changes. Could you verify that, please? > OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Even assignments should be left with double literals (`float x = 1.2;`); as you can see from the CompilerExplorer link I pasted above, clang does generate the exact same assembly whether you assign a float or double literal. Instead, only computations with literals should become floats, as these will otherwise become double precision computations. So based on my current understanding my preference would be:. - leave double literals in comparisons and assignments;. - change to float literals where they appearing in computations (`+ - * /`), if you can validate that this fixes your reproducer. Would that sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:310,reliability,doe,does,310,"> The reproducer should not crash with these changes. Could you verify that, please? > OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Even assignments should be left with double literals (`float x = 1.2;`); as you can see from the CompilerExplorer link I pasted above, clang does generate the exact same assembly whether you assign a float or double literal. Instead, only computations with literals should become floats, as these will otherwise become double precision computations. So based on my current understanding my preference would be:. - leave double literals in comparisons and assignments;. - change to float literals where they appearing in computations (`+ - * /`), if you can validate that this fixes your reproducer. Would that sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:726,safety,valid,validate,726,"> The reproducer should not crash with these changes. Could you verify that, please? > OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Even assignments should be left with double literals (`float x = 1.2;`); as you can see from the CompilerExplorer link I pasted above, clang does generate the exact same assembly whether you assign a float or double literal. Instead, only computations with literals should become floats, as these will otherwise become double precision computations. So based on my current understanding my preference would be:. - leave double literals in comparisons and assignments;. - change to float literals where they appearing in computations (`+ - * /`), if you can validate that this fixes your reproducer. Would that sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:726,security,validat,validate,726,"> The reproducer should not crash with these changes. Could you verify that, please? > OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Even assignments should be left with double literals (`float x = 1.2;`); as you can see from the CompilerExplorer link I pasted above, clang does generate the exact same assembly whether you assign a float or double literal. Instead, only computations with literals should become floats, as these will otherwise become double precision computations. So based on my current understanding my preference would be:. - leave double literals in comparisons and assignments;. - change to float literals where they appearing in computations (`+ - * /`), if you can validate that this fixes your reproducer. Would that sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:64,testability,verif,verify,64,"> The reproducer should not crash with these changes. Could you verify that, please? > OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Even assignments should be left with double literals (`float x = 1.2;`); as you can see from the CompilerExplorer link I pasted above, clang does generate the exact same assembly whether you assign a float or double literal. Instead, only computations with literals should become floats, as these will otherwise become double precision computations. So based on my current understanding my preference would be:. - leave double literals in comparisons and assignments;. - change to float literals where they appearing in computations (`+ - * /`), if you can validate that this fixes your reproducer. Would that sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:542,testability,understand,understanding,542,"> The reproducer should not crash with these changes. Could you verify that, please? > OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Even assignments should be left with double literals (`float x = 1.2;`); as you can see from the CompilerExplorer link I pasted above, clang does generate the exact same assembly whether you assign a float or double literal. Instead, only computations with literals should become floats, as these will otherwise become double precision computations. So based on my current understanding my preference would be:. - leave double literals in comparisons and assignments;. - change to float literals where they appearing in computations (`+ - * /`), if you can validate that this fixes your reproducer. Would that sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:559,usability,prefer,preference,559,"> The reproducer should not crash with these changes. Could you verify that, please? > OK. Revert the comparisons and leave the assignments? Does that sound reasonable? Even assignments should be left with double literals (`float x = 1.2;`); as you can see from the CompilerExplorer link I pasted above, clang does generate the exact same assembly whether you assign a float or double literal. Instead, only computations with literals should become floats, as these will otherwise become double precision computations. So based on my current understanding my preference would be:. - leave double literals in comparisons and assignments;. - change to float literals where they appearing in computations (`+ - * /`), if you can validate that this fixes your reproducer. Would that sound reasonable?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:37,energy efficiency,current,current,37,"Hi @Axel-Naumann ,. > So based on my current understanding my preference would be: ... Done. > Could you verify that, please? The standalone example does not clash with floats. To check the example with ROOT I will need some time. At least to compile ROOT with clang. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:225,performance,time,time,225,"Hi @Axel-Naumann ,. > So based on my current understanding my preference would be: ... Done. > Could you verify that, please? The standalone example does not clash with floats. To check the example with ROOT I will need some time. At least to compile ROOT with clang. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:149,reliability,doe,does,149,"Hi @Axel-Naumann ,. > So based on my current understanding my preference would be: ... Done. > Could you verify that, please? The standalone example does not clash with floats. To check the example with ROOT I will need some time. At least to compile ROOT with clang. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:45,testability,understand,understanding,45,"Hi @Axel-Naumann ,. > So based on my current understanding my preference would be: ... Done. > Could you verify that, please? The standalone example does not clash with floats. To check the example with ROOT I will need some time. At least to compile ROOT with clang. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:105,testability,verif,verify,105,"Hi @Axel-Naumann ,. > So based on my current understanding my preference would be: ... Done. > Could you verify that, please? The standalone example does not clash with floats. To check the example with ROOT I will need some time. At least to compile ROOT with clang. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:62,usability,prefer,preference,62,"Hi @Axel-Naumann ,. > So based on my current understanding my preference would be: ... Done. > Could you verify that, please? The standalone example does not clash with floats. To check the example with ROOT I will need some time. At least to compile ROOT with clang. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:69,deployability,build,build,69,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:130,deployability,build,build,130,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:272,deployability,build,build,272,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:851,deployability,build,build,851,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:988,deployability,build,build,988,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:656,safety,except,exception,656,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:75,usability,user,user,75,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:89,usability,User,Users,89,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:95,usability,user,user,95,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:136,usability,user,user,136,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:278,usability,user,user,278,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:826,usability,User,Users,826,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:832,usability,user,user,832,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:994,usability,user,user,994,"Hi @Axel-Naumann ,. just checked. master branch with -O4:. ```. host:build user$ source /Users/user/MYROOT/bin/thisroot.sh . host:build user$ clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). clang: warning: -O4 is equivalent to -O3 [-Wdeprecated]. host:build user$ ./color.exe . TColor::RGB2HLS(13.531198, 9.228077, 3.350407 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(12.057813, 12.900666, 13.290458 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(3.584785, 12.519324, 2.208079 ...)->0.000000, 1.000000, 0.000000. TColor::RGB2HLS(6.409876, 8.155184, 1.691731 ...)->0.000000, 1.000000, 0.000000. *** Break *** floating point exception. TColor::RGB2HLS(9.862289, 0.100378, 3.557429 ...)->[/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/Users/user/Projects/ROOT/build/./color.exe] main (no debug info). [/usr/lib/system/libdyld.dylib] start (no debug info). [<unknown binary>] (no debug info). host:build user$ . ```. TColorClang branch with -O4 runs fine. Not posting output for obvious reasons. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:144,safety,prevent,prevents,144,"Hi @couet , @Axel-Naumann ,. would you have a look? This PR was discussed with a lot of details... Not having these fixes at least in nightlies prevents me from looking at other things in the debugged code. ( The stuff I debug simply crashes before ). And I would really like to debug as much as possible so the results would go into 6.24. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:144,security,preven,prevents,144,"Hi @couet , @Axel-Naumann ,. would you have a look? This PR was discussed with a lot of details... Not having these fixes at least in nightlies prevents me from looking at other things in the debugged code. ( The stuff I debug simply crashes before ). And I would really like to debug as much as possible so the results would go into 6.24. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:227,testability,simpl,simply,227,"Hi @couet , @Axel-Naumann ,. would you have a look? This PR was discussed with a lot of details... Not having these fixes at least in nightlies prevents me from looking at other things in the debugged code. ( The stuff I debug simply crashes before ). And I would really like to debug as much as possible so the results would go into 6.24. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:227,usability,simpl,simply,227,"Hi @couet , @Axel-Naumann ,. would you have a look? This PR was discussed with a lot of details... Not having these fixes at least in nightlies prevents me from looking at other things in the debugged code. ( The stuff I debug simply crashes before ). And I would really like to debug as much as possible so the results would go into 6.24. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:110,deployability,version,version,110,"Looks fine for me. I took the new code of TColor you did. Put it in my ROOT and try you example with this new version of TColor. I completed, as you said:. ```. clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). ```. Then:. ```. ./color.exe. ```. And it works fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:110,integrability,version,version,110,"Looks fine for me. I took the new code of TColor you did. Put it in my ROOT and try you example with this new version of TColor. I completed, as you said:. ```. clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). ```. Then:. ```. ./color.exe. ```. And it works fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:110,modifiability,version,version,110,"Looks fine for me. I took the new code of TColor you did. Put it in my ROOT and try you example with this new version of TColor. I completed, as you said:. ```. clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). ```. Then:. ```. ./color.exe. ```. And it works fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:131,safety,compl,completed,131,"Looks fine for me. I took the new code of TColor you did. Put it in my ROOT and try you example with this new version of TColor. I completed, as you said:. ```. clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). ```. Then:. ```. ./color.exe. ```. And it works fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:131,security,compl,completed,131,"Looks fine for me. I took the new code of TColor you did. Put it in my ROOT and try you example with this new version of TColor. I completed, as you said:. ```. clang++ -O4 color.cxx -o color.exe $(root-config --glibs --cflags). ```. Then:. ```. ./color.exe. ```. And it works fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:44,energy efficiency,model,model,44,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:62,energy efficiency,core,core,62,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:122,energy efficiency,adapt,adapt,122,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:122,integrability,adapt,adapt,122,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:122,interoperability,adapt,adapt,122,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:122,modifiability,adapt,adapt,122,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:172,performance,time,time,172,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:32,safety,test,test,32,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:72,safety,test,test,72,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:44,security,model,model,44,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:32,testability,test,test,32,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:72,testability,test,test,72,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/pull/6684:206,usability,progress,progress,206,"> @andriish I was thinking of a test on the model of those in core/base/test. Hi @couet , I've wrote that . > Will try to adapt the reproducer to it, but it will take some time. But so far I don't have any progress there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6684
https://github.com/root-project/root/issues/6686:122,deployability,manag,manage,122,"I will say the first option is very reasonable for me (yes python2 is dead anyway!!!), but what if some experiment didn't manage to move to python3? How hard is to implement the second option?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:122,energy efficiency,manag,manage,122,"I will say the first option is very reasonable for me (yes python2 is dead anyway!!!), but what if some experiment didn't manage to move to python3? How hard is to implement the second option?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:122,safety,manag,manage,122,"I will say the first option is very reasonable for me (yes python2 is dead anyway!!!), but what if some experiment didn't manage to move to python3? How hard is to implement the second option?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:292,availability,reliab,reliably,292,"Wrt to the experiments, I think it's not so critical. Mac isn't used anyway for any experiment specific usage of ROOT. I guess, @axel please correct me, MacOS is purely a platform used by analysts. I think we could drop py2 for MacOS, however, since there's no system python3 we cannot build reliably any binaries against python. So it's a convoluted thing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:286,deployability,build,build,286,"Wrt to the experiments, I think it's not so critical. Mac isn't used anyway for any experiment specific usage of ROOT. I guess, @axel please correct me, MacOS is purely a platform used by analysts. I think we could drop py2 for MacOS, however, since there's no system python3 we cannot build reliably any binaries against python. So it's a convoluted thing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:95,interoperability,specif,specific,95,"Wrt to the experiments, I think it's not so critical. Mac isn't used anyway for any experiment specific usage of ROOT. I guess, @axel please correct me, MacOS is purely a platform used by analysts. I think we could drop py2 for MacOS, however, since there's no system python3 we cannot build reliably any binaries against python. So it's a convoluted thing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:171,interoperability,platform,platform,171,"Wrt to the experiments, I think it's not so critical. Mac isn't used anyway for any experiment specific usage of ROOT. I guess, @axel please correct me, MacOS is purely a platform used by analysts. I think we could drop py2 for MacOS, however, since there's no system python3 we cannot build reliably any binaries against python. So it's a convoluted thing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:292,reliability,reliab,reliably,292,"Wrt to the experiments, I think it's not so critical. Mac isn't used anyway for any experiment specific usage of ROOT. I guess, @axel please correct me, MacOS is purely a platform used by analysts. I think we could drop py2 for MacOS, however, since there's no system python3 we cannot build reliably any binaries against python. So it's a convoluted thing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:49,deployability,instal,installation,49,"Regarding option 2 (using a venv to overcome the installation issue): Technically, I'm rather sure we can make it work. However, I'm more scared of the additional complexity added to the CI. Someone has to maintain all these fixes on the long run!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:206,modifiability,maintain,maintain,206,"Regarding option 2 (using a venv to overcome the installation issue): Technically, I'm rather sure we can make it work. However, I'm more scared of the additional complexity added to the CI. Someone has to maintain all these fixes on the long run!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:163,safety,compl,complexity,163,"Regarding option 2 (using a venv to overcome the installation issue): Technically, I'm rather sure we can make it work. However, I'm more scared of the additional complexity added to the CI. Someone has to maintain all these fixes on the long run!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:206,safety,maintain,maintain,206,"Regarding option 2 (using a venv to overcome the installation issue): Technically, I'm rather sure we can make it work. However, I'm more scared of the additional complexity added to the CI. Someone has to maintain all these fixes on the long run!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:163,security,compl,complexity,163,"Regarding option 2 (using a venv to overcome the installation issue): Technically, I'm rather sure we can make it work. However, I'm more scared of the additional complexity added to the CI. Someone has to maintain all these fixes on the long run!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:148,modifiability,pac,packages,148,"Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > Without a virtual environment, MacOS does not allow to pip packages. I'm very surprised about that - not even `pip --user` or whatever it's called?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:126,reliability,doe,does,126,"Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > Without a virtual environment, MacOS does not allow to pip packages. I'm very surprised about that - not even `pip --user` or whatever it's called?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:4,safety,test,testing,4,"Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > Without a virtual environment, MacOS does not allow to pip packages. I'm very surprised about that - not even `pip --user` or whatever it's called?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:4,testability,test,testing,4,"Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > Without a virtual environment, MacOS does not allow to pip packages. I'm very surprised about that - not even `pip --user` or whatever it's called?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:206,usability,user,user,206,"Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > Without a virtual environment, MacOS does not allow to pip packages. I'm very surprised about that - not even `pip --user` or whatever it's called?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:323,deployability,instal,installation,323,"> Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > . > > Without a virtual environment, MacOS does not allow to pip packages. > . > I'm very surprised about that - not even `pip --user` or whatever it's called? Well, the actual issue is that there is no `pip` for the system python2 installation. The virtualenv is the solution to get `pip` easily. I think installing `pip` manually is the least favored solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:397,deployability,instal,installing,397,"> Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > . > > Without a virtual environment, MacOS does not allow to pip packages. > . > I'm very surprised about that - not even `pip --user` or whatever it's called? Well, the actual issue is that there is no `pip` for the system python2 installation. The virtualenv is the solution to get `pip` easily. I think installing `pip` manually is the least favored solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:156,modifiability,pac,packages,156,"> Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > . > > Without a virtual environment, MacOS does not allow to pip packages. > . > I'm very surprised about that - not even `pip --user` or whatever it's called? Well, the actual issue is that there is no `pip` for the system python2 installation. The virtualenv is the solution to get `pip` easily. I think installing `pip` manually is the least favored solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:134,reliability,doe,does,134,"> Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > . > > Without a virtual environment, MacOS does not allow to pip packages. > . > I'm very surprised about that - not even `pip --user` or whatever it's called? Well, the actual issue is that there is no `pip` for the system python2 installation. The virtualenv is the solution to get `pip` easily. I think installing `pip` manually is the least favored solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:6,safety,test,testing,6,"> Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > . > > Without a virtual environment, MacOS does not allow to pip packages. > . > I'm very surprised about that - not even `pip --user` or whatever it's called? Well, the actual issue is that there is no `pip` for the system python2 installation. The virtualenv is the solution to get `pip` easily. I think installing `pip` manually is the least favored solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:6,testability,test,testing,6,"> Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > . > > Without a virtual environment, MacOS does not allow to pip packages. > . > I'm very surprised about that - not even `pip --user` or whatever it's called? Well, the actual issue is that there is no `pip` for the system python2 installation. The virtualenv is the solution to get `pip` easily. I think installing `pip` manually is the least favored solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:220,usability,user,user,220,"> Not testing py2 on MacOS is probably reasonable. There is a system py3 as of Xcode 12. > . > > Without a virtual environment, MacOS does not allow to pip packages. > . > I'm very surprised about that - not even `pip --user` or whatever it's called? Well, the actual issue is that there is no `pip` for the system python2 installation. The virtualenv is the solution to get `pip` easily. I think installing `pip` manually is the least favored solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:28,deployability,build,build,28,"But ok, if we agree that we build with python2 and python3 on MacOS, but test only against python3, then we are fine. Feel free to close the issue!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:73,safety,test,test,73,"But ok, if we agree that we build with python2 and python3 on MacOS, but test only against python3, then we are fine. Feel free to close the issue!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:73,testability,test,test,73,"But ok, if we agree that we build with python2 and python3 on MacOS, but test only against python3, then we are fine. Feel free to close the issue!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/issues/6686:131,usability,close,close,131,"But ok, if we agree that we build with python2 and python3 on MacOS, but test only against python3, then we are fine. Feel free to close the issue!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6686
https://github.com/root-project/root/pull/6687:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6687
https://github.com/root-project/root/pull/6689:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6689
https://github.com/root-project/root/pull/6690:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_nlohmannjson=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_nlohmannjson=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_nlohmannjson=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:87,deployability,configurat,configuration,87,"@oshadura @Axel-Naumann . Before I can merge it in master, one should change `Jenkins` configuration, otherwise it will try to disable `builtin_nlohmannjson` for every platform :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:87,integrability,configur,configuration,87,"@oshadura @Axel-Naumann . Before I can merge it in master, one should change `Jenkins` configuration, otherwise it will try to disable `builtin_nlohmannjson` for every platform :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:168,interoperability,platform,platform,168,"@oshadura @Axel-Naumann . Before I can merge it in master, one should change `Jenkins` configuration, otherwise it will try to disable `builtin_nlohmannjson` for every platform :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:87,modifiability,configur,configuration,87,"@oshadura @Axel-Naumann . Before I can merge it in master, one should change `Jenkins` configuration, otherwise it will try to disable `builtin_nlohmannjson` for every platform :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:87,security,configur,configuration,87,"@oshadura @Axel-Naumann . Before I can merge it in master, one should change `Jenkins` configuration, otherwise it will try to disable `builtin_nlohmannjson` for every platform :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:78,deployability,build,build,78,"Seems to be, all platforms compiled, only for `mac1014` jenkins did not found build node.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6690:17,interoperability,platform,platforms,17,"Seems to be, all platforms compiled, only for `mac1014` jenkins did not found build node.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6690
https://github.com/root-project/root/pull/6695:76,safety,test,test,76,"@bellenot . Actually, it is non-documented functionality. . And by chance I test it now - when migrating all existing JS code to support future JSROOT v6. I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:184,safety,test,tests,184,"@bellenot . Actually, it is non-documented functionality. . And by chance I test it now - when migrating all existing JS code to support future JSROOT v6. I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:205,safety,test,test,205,"@bellenot . Actually, it is non-documented functionality. . And by chance I test it now - when migrating all existing JS code to support future JSROOT v6. I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:76,testability,test,test,76,"@bellenot . Actually, it is non-documented functionality. . And by chance I test it now - when migrating all existing JS code to support future JSROOT v6. I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:184,testability,test,tests,184,"@bellenot . Actually, it is non-documented functionality. . And by chance I test it now - when migrating all existing JS code to support future JSROOT v6. I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:205,testability,test,test,205,"@bellenot . Actually, it is non-documented functionality. . And by chance I test it now - when migrating all existing JS code to support future JSROOT v6. I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:32,usability,document,documented,32,"@bellenot . Actually, it is non-documented functionality. . And by chance I test it now - when migrating all existing JS code to support future JSROOT v6. I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:129,usability,support,support,129,"@bellenot . Actually, it is non-documented functionality. . And by chance I test it now - when migrating all existing JS code to support future JSROOT v6. I really need to add special tests to roottest to test all these special features. Thanks!!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:0,availability,Error,Error,0,Error has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:0,performance,Error,Error,0,Error has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:0,safety,Error,Error,0,Error has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6695:0,usability,Error,Error,0,Error has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6695
https://github.com/root-project/root/pull/6699:23,availability,error,errors,23,"jenkins producing many errors, but they all has nothing to do with PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6699
https://github.com/root-project/root/pull/6699:23,performance,error,errors,23,"jenkins producing many errors, but they all has nothing to do with PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6699
https://github.com/root-project/root/pull/6699:23,safety,error,errors,23,"jenkins producing many errors, but they all has nothing to do with PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6699
https://github.com/root-project/root/pull/6699:23,usability,error,errors,23,"jenkins producing many errors, but they all has nothing to do with PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6699
https://github.com/root-project/root/pull/6700:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:255,availability,error,error,255,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some? Pity! I get an error with. ```. auto lambda0 = [](){return #jets. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:51,performance,time,time,51,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some? Pity! I get an error with. ```. auto lambda0 = [](){return #jets. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:255,performance,error,error,255,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some? Pity! I get an error with. ```. auto lambda0 = [](){return #jets. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:5,reliability,doe,does,5,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some? Pity! I get an error with. ```. auto lambda0 = [](){return #jets. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:134,safety,test,tests,134,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some? Pity! I get an error with. ```. auto lambda0 = [](){return #jets. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:255,safety,error,error,255,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some? Pity! I get an error with. ```. auto lambda0 = [](){return #jets. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:91,security,token,tokenizer,91,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some? Pity! I get an error with. ```. auto lambda0 = [](){return #jets. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:134,testability,test,tests,134,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some? Pity! I get an error with. ```. auto lambda0 = [](){return #jets. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:255,usability,error,error,255,"> 1. does the `#column` notation work with just-in-time compilation? I am not sure how our tokenizer treats it. I don't think we have tests with RNTupleDS + jitting, e.g. `df.Define(""xlength"", ""#x"").Histo1D(""#x"")`, can you please add some? Pity! I get an error with. ```. auto lambda0 = [](){return #jets. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:240,availability,operat,operation,240,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:320,deployability,log,logic,320,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:258,performance,perform,perform,258,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:271,performance,time,times,271,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:74,safety,reme,remember,74,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:320,safety,log,logic,320,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:320,security,log,logic,320,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:320,testability,log,logic,320,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:152,usability,prototyp,prototypes,152,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:258,usability,perform,perform,258,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times? 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:81,deployability,build,build,81,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:231,integrability,schema,schema,231,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:130,performance,memor,memory,130,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:25,security,modif,modifications,25,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:70,testability,simpl,simpler,70,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:70,usability,simpl,simpler,70,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:130,usability,memor,memory,130,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:365,usability,prefer,prefer,365,"Ad 1) With all the other modifications, I think in the end it is just simpler to build all the fields upfront. We'd save a bit of memory doing it on demand, but it will possibly take a little longer because we need to traverse the schema tree more often (for every leaf, we have to figure out again what are the parents). Ad 2) I'm fine with a squash on merge. I'd prefer not to squash individual commits, it's a long history and a partial rewrite will get it as wrong as the full history. Let me know if you like the squash commit over the rebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:47,deployability,build,build,47,"Oh, actually I remember one more reason why we build the fields beforehand: we anyway have to figure out beforehand which column _names_ exist. Figuring that out is almost the same than going all the way and creating the fields. Good point on the whether or not it compiles! There are commits that don't. So squash it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:15,safety,reme,remember,15,"Oh, actually I remember one more reason why we build the fields beforehand: we anyway have to figure out beforehand which column _names_ exist. Figuring that out is almost the same than going all the way and creating the fields. Good point on the whether or not it compiles! There are commits that don't. So squash it is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:51,availability,failur,failure,51,Almost there... I'll take a look into the tutorial failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:51,deployability,fail,failure,51,Almost there... I'll take a look into the tutorial failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:51,performance,failur,failure,51,Almost there... I'll take a look into the tutorial failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6700:51,reliability,fail,failure,51,Almost there... I'll take a look into the tutorial failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6700
https://github.com/root-project/root/pull/6702:4,availability,error,errors,4,All errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6702
https://github.com/root-project/root/pull/6702:4,performance,error,errors,4,All errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6702
https://github.com/root-project/root/pull/6702:4,safety,error,errors,4,All errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6702
https://github.com/root-project/root/pull/6702:4,usability,error,errors,4,All errors has nothing to do with PR,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6702
https://github.com/root-project/root/pull/6704:41,deployability,updat,update,41,"@alja @osschar . This is changes after I update `nlohmann/json.hpp` parser and just include it in `REveElement.hxx`. Now cling do not have problem to parse it. I already prepared changes in eve7 client code https://github.com/linev/root/tree/eve7_jsroot6,. but will merge it begin of next week together with JSROOT v6. As I said, there are not much changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6704
https://github.com/root-project/root/pull/6704:41,safety,updat,update,41,"@alja @osschar . This is changes after I update `nlohmann/json.hpp` parser and just include it in `REveElement.hxx`. Now cling do not have problem to parse it. I already prepared changes in eve7 client code https://github.com/linev/root/tree/eve7_jsroot6,. but will merge it begin of next week together with JSROOT v6. As I said, there are not much changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6704
https://github.com/root-project/root/pull/6704:41,security,updat,update,41,"@alja @osschar . This is changes after I update `nlohmann/json.hpp` parser and just include it in `REveElement.hxx`. Now cling do not have problem to parse it. I already prepared changes in eve7 client code https://github.com/linev/root/tree/eve7_jsroot6,. but will merge it begin of next week together with JSROOT v6. As I said, there are not much changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6704
https://github.com/root-project/root/pull/6705:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:278,availability,consist,consist,278,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:357,availability,Error,Error,357,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:482,availability,redund,redundant,482,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:13,deployability,patch,patch,13,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:44,deployability,log,logging,44,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:113,deployability,Log,Log,113,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:482,deployability,redundan,redundant,482,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:826,deployability,log,logging,826,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:165,integrability,messag,message,165,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:234,integrability,messag,message,234,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:259,integrability,messag,message,259,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:165,interoperability,messag,message,165,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:234,interoperability,messag,message,234,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:259,interoperability,messag,message,259,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:357,performance,Error,Error,357,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:482,reliability,redundan,redundant,482,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:13,safety,patch,patch,13,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:32,safety,review,review,32,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:44,safety,log,logging,44,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:113,safety,Log,Log,113,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:357,safety,Error,Error,357,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:482,safety,redund,redundant,482,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:826,safety,log,logging,826,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:13,security,patch,patch,13,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:44,security,log,logging,44,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:113,security,Log,Log,113,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:826,security,log,logging,826,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:32,testability,review,review,32,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:44,testability,log,logging,44,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:113,testability,Log,Log,113,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:826,testability,log,logging,826,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:207,usability,indicat,indicate,207,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:278,usability,consist,consist,278,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:357,usability,Error,Error,357,"@lmoneta The patch is ready for review. All logging is now done through `MnPrint`, which gained a static method `Log` with a severity level, a prefix for the actual message (usually set to the class name to indicate the origin of the message), and the actual message, which can consist of strings and streamable objects. For convenience, there are methods `Error`, `Warn`, `Info`, `Debug`, which use a globally set prefix for convenience and to make the code more readable and less redundant. The global prefix is set with a scope guard. Thanks to RAII, this works also for nested scopes. . Since I was going through all the code anyway, I replaced some c headers with the corresponding cxx headers (e.g. math.h with cmath). I did not touch Minuit2Minimizer, because it is only used by ROOT and I could not figure out how the logging works there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:46,safety,test,tests,46,I think the CI bots need to be triggered. The tests succeed when I run locally.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:46,testability,test,tests,46,I think the CI bots need to be triggered. The tests succeed when I run locally.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:95,energy efficiency,reduc,reduces,95,"@HDembinski thanks! Could you rewrite this branch so we have meaningful commits to merge? That reduces the chances that one of us hits ""Rebase & merge"" instead of ""Squash & merge"" :-). @lmoneta please have a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:97,energy efficiency,reduc,reduces,97,"> @HDembinski thanks! Could you rewrite this branch so we have meaningful commits to merge? That reduces the chances that one of us hits ""Rebase & merge"" instead of ""Squash & merge"" :-). Sure, I assumed that the branch is going to be squashed, sorry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:226,availability,Error,Error,226,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:720,availability,error,error,720,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1977,availability,redund,redundant,1977,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:73,deployability,patch,patch,73,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:115,deployability,log,log,115,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:263,deployability,log,logging,263,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:365,deployability,log,logged,365,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:760,deployability,log,logging,760,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:899,deployability,automat,automate,899,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1472,deployability,patch,patch,1472,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1714,deployability,log,logging,1714,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1731,deployability,contain,contain,1731,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1919,deployability,log,logs,1919,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1977,deployability,redundan,redundant,1977,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2196,deployability,log,log,2196,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1788,energy efficiency,reduc,reduced,1788,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:304,integrability,messag,messages,304,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:386,integrability,messag,messages,386,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:848,integrability,messag,messages,848,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1722,integrability,messag,messages,1722,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1854,integrability,messag,messages,1854,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1987,integrability,messag,messages,1987,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2022,integrability,messag,messages,2022,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:304,interoperability,messag,messages,304,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:386,interoperability,messag,messages,386,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:848,interoperability,messag,messages,848,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1722,interoperability,messag,messages,1722,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1831,interoperability,format,formatting,1831,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1854,interoperability,messag,messages,1854,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1987,interoperability,messag,messages,1987,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2022,interoperability,messag,messages,2022,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1548,modifiability,variab,variables,1548,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2124,modifiability,variab,variables,2124,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2242,modifiability,variab,variables,2242,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:226,performance,Error,Error,226,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:720,performance,error,error,720,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1628,performance,multi-thread,multi-threading,1628,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1977,reliability,redundan,redundant,1977,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:35,safety,review,review,35,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:73,safety,patch,patch,73,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:115,safety,log,log,115,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:226,safety,Error,Error,226,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:263,safety,log,logging,263,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:365,safety,log,logged,365,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:720,safety,error,error,720,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:760,safety,log,logging,760,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1472,safety,patch,patch,1472,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1714,safety,log,logging,1714,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1919,safety,log,logs,1919,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1952,safety,isol,isolated,1952,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1977,safety,redund,redundant,1977,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2196,safety,log,log,2196,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:73,security,patch,patch,73,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:115,security,log,log,115,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:263,security,log,logging,263,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:365,security,log,logged,365,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:760,security,log,logging,760,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1472,security,patch,patch,1472,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1714,security,log,logging,1714,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1919,security,log,logs,1919,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1952,security,iso,isolated,1952,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2196,security,log,log,2196,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:35,testability,review,review,35,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:115,testability,log,log,115,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:263,testability,log,logging,263,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:365,testability,log,logged,365,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:760,testability,log,logging,760,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:899,testability,automat,automate,899,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1714,testability,log,logging,1714,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1919,testability,log,logs,1919,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1952,testability,isol,isolated,1952,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2196,testability,log,log,2196,"bit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I did this only when two messages printed the same information in succession. * In a few cases, I changed debug output so that variables are printed in one line that were printed in several lines. A log is easier to grep and scroll through when variables are on the same line as the prefix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:226,usability,Error,Error,226,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:330,usability,indicat,indicate,330,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:720,usability,error,error,720,"Maybe a few more notes to make the review easier, because this is a huge patch. * The previous code used macros to log things. I found that the macros are not needed, so I replaced all the macros with method calls to MnPrint::Error, MnPrint::Info, .... * The old logging made a useful habit of prefixing messages with a string to indicate the origin, e.g. when you logged from MnHesse, messages would be prefixed with ""MnHesse:"". Inside ``MnHesse``, to stay with the example, you might have seen code like this. ```c++. MN_INFO_MSG(""MnHesse: Some foo happened"");. [...]. MN_INFO_MSG(""MnHesse: Some bar happened"");. [...]. int n = 5;. MN_INFO_MSG(""MnHesse: Frobinated"", n, ""glorps"");. ```. Setting the prefix by hand was error prone and repetetive and made the logging code more distractive from the actual code. Especially now, since all the debug messages should also have this prefix, I wanted to automate this. So I turned MnPrint into a class that one can instantiate with a prefix for a given scope. ```c++. MnPrint print(""MnHesse""); // appears once at the beginning of a long method. [...]. print.Info(""Some foo happened"");. [...]. print.Info(""Some bar happened"");. [...]. int n = 5;. print.Info(""Frobinated"", n, ""glorps"");. ```. The method ``MnPrint::Info`` uses the prefix set in the MnPrint ctor. The ctor of MnPrint also has an optional argument to print with a local print level. If this is not set, the global print level is used. In the long run (not in this patch), we should get rid of the global print level, because global mutable variables are difficult to reason about and in particular do not play nice with multi-threading. This design prepares for that step. * I generally made sure that the logging messages contain the same information as the previous ones, but I reduced excess whitespace and improved the formatting. Some debug messages added several empty lines to the output, which made the logs hard to read. * In very few isolated cases I removed redundant messages. I d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:27,deployability,log,log,27,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:38,deployability,fail,failing,38,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:90,deployability,build,build,90,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:38,reliability,fail,failing,38,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:27,safety,log,log,27,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:46,safety,test,test,46,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:27,security,log,log,27,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:27,testability,log,log,27,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:46,testability,test,test,46,"@lmoneta I looked into the log of the failing test, it looks like an unrelated bug in the build. Perhaps rebase to master would fix it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:174,deployability,updat,updated,174,I further simplified and improved the design of the new MnPrint in commit https://github.com/root-project/root/pull/6705/commits/c804c2e7f129c8fe7ae5b34a188a45bf6847fc17 and updated the previous note about the design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:174,safety,updat,updated,174,I further simplified and improved the design of the new MnPrint in commit https://github.com/root-project/root/pull/6705/commits/c804c2e7f129c8fe7ae5b34a188a45bf6847fc17 and updated the previous note about the design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:174,security,updat,updated,174,I further simplified and improved the design of the new MnPrint in commit https://github.com/root-project/root/pull/6705/commits/c804c2e7f129c8fe7ae5b34a188a45bf6847fc17 and updated the previous note about the design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:10,testability,simpl,simplified,10,I further simplified and improved the design of the new MnPrint in commit https://github.com/root-project/root/pull/6705/commits/c804c2e7f129c8fe7ae5b34a188a45bf6847fc17 and updated the previous note about the design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:10,usability,simpl,simplified,10,I further simplified and improved the design of the new MnPrint in commit https://github.com/root-project/root/pull/6705/commits/c804c2e7f129c8fe7ae5b34a188a45bf6847fc17 and updated the previous note about the design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:351,availability,error,errors,351,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!! I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. . Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. . There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:69,deployability,log,logging,69,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!! I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. . Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. . There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:351,performance,error,errors,351,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!! I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. . Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. . There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:69,safety,log,logging,69,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!! I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. . Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. . There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:351,safety,error,errors,351,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!! I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. . Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. . There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:69,security,log,logging,69,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!! I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. . Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. . There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:69,testability,log,logging,69,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!! I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. . Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. . There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:351,usability,error,errors,351,"@HDembinski , thank you very much for this nice improvements for the logging in Minuit2!! I like the way you have implemented the MnPrint class. I think all the needed functionality is there and the PR looks good to me. . Before merging let me look at it in detail and also try it. After a first look I don't see any particular problems. . There some errors reported by the Travis CI, but I think those are unrelated to your changes. Cheers. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:95,deployability,log,logging,95,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:188,deployability,log,logging,188,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:238,deployability,patch,patch,238,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:95,safety,log,logging,95,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:188,safety,log,logging,188,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:238,safety,patch,patch,238,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:95,security,log,logging,95,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:188,security,log,logging,188,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:238,security,patch,patch,238,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:95,testability,log,logging,95,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:188,testability,log,logging,188,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:367,testability,understand,understand,367,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:433,testability,plan,plan,433,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:354,usability,help,helped,354,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:494,usability,help,helpful,494,"Thank you, I am glad. Looking at the output from your side is appreciated. I did checks of the logging output with iminuit, whether it looks good, but I haven't tried this with the TError logging backend. I am looking forward to use this patch in iminuit. Being able to turn on debugging output at runtime is going to be incredibly useful and it already helped me to understand much better what is called where and when in Minuit. I plan to work on other improvements and this going to be very helpful.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:35,deployability,fail,failing,35,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:79,deployability,build,build,79,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:340,deployability,manag,management,340,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:506,deployability,log,logging,506,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:976,deployability,patch,patch,976,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:340,energy efficiency,manag,management,340,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:639,interoperability,share,shared,639,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:771,interoperability,format,format,771,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:818,interoperability,format,format,818,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:864,interoperability,format,format,864,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1016,interoperability,format,format,1016,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:333,performance,memor,memory,333,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:35,reliability,fail,failing,35,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:43,safety,test,tests,43,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:286,safety,compl,complaints,286,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:340,safety,manag,management,340,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:471,safety,compl,complaint,471,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:506,safety,log,logging,506,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:976,safety,patch,patch,976,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:992,safety,review,reviewed,992,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:286,security,compl,complaints,286,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:471,security,compl,complaint,471,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:506,security,log,logging,506,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:976,security,patch,patch,976,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:43,testability,test,tests,43,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:506,testability,log,logging,506,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:992,testability,review,reviewed,992,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:333,usability,memor,memory,333,"@lmoneta I looked at the remaining failing tests. Edit: I fixed the standalone build and the clang-tidy-modernize issue. * clang-tidy-analyzer issues: I don't know how to address these in this PR and would like to propose to postpone fixing these in a separate PR. I looked through the complaints and those seem to be all related to memory management issues in Minuit2 that were there before, but are now uncovered since I touched so many lines of code. I didn't see any complaint related to my actual new logging code. I think a good deal of these issues can be resolved by replacing the MnRefCountedPointer with std::shared_ptr. Writing shared pointers correctly is hard, it is good that we have one in the stdlib now. I would like to do this in a separate PR. * clang-format issues: I would love to fix these clang-format issues. In fact, I would love to clang-format the whole Minuit2 code right now, but I think this should happen in a separate PR - or perhaps after the patch was fully reviewed. Doing a clang-format on the whole code will probably reveal even more issues for clang-tidy-analyzer...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:99,interoperability,format,format,99,"Hi Hans, . I agree that it is better to fix those issues reported by clang-tidy-analyzer and clang-format in separate PR's.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:133,deployability,build,build,133,@lmoneta Did you have a change to look at the output? Can I help by running some tests in ROOT and posting the output? I have a ROOT build with tests enabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:81,safety,test,tests,81,@lmoneta Did you have a change to look at the output? Can I help by running some tests in ROOT and posting the output? I have a ROOT build with tests enabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:144,safety,test,tests,144,@lmoneta Did you have a change to look at the output? Can I help by running some tests in ROOT and posting the output? I have a ROOT build with tests enabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:81,testability,test,tests,81,@lmoneta Did you have a change to look at the output? Can I help by running some tests in ROOT and posting the output? I have a ROOT build with tests enabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:144,testability,test,tests,144,@lmoneta Did you have a change to look at the output? Can I help by running some tests in ROOT and posting the output? I have a ROOT build with tests enabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:60,usability,help,help,60,@lmoneta Did you have a change to look at the output? Can I help by running some tests in ROOT and posting the output? I have a ROOT build with tests enabled.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:175,deployability,log,loggiing,175,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:155,energy efficiency,adapt,adapted,155,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:120,integrability,interfac,interface,120,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:155,integrability,adapt,adapted,155,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:120,interoperability,interfac,interface,120,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:155,interoperability,adapt,adapted,155,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:120,modifiability,interfac,interface,120,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:155,modifiability,adapt,adapted,155,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:175,safety,log,loggiing,175,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:175,security,log,loggiing,175,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:175,testability,log,loggiing,175,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:110,usability,MInim,MInimizer,110,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:202,usability,prefer,prefer,202,"Hi, . Yes I have tried and noticed some differences in the output produced when fitting in ROOT. Probably the MInimizer interface used in ROOT needs to be adapted for the new loggiing levels. . I would prefer doing this and having a fix there ready before merging this one, so I can commit after merging this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:78,integrability,messag,messages,78,"I see. I changed the formatting in some cases, but I guess you mean that some messages are not shown which should be shown or something is not shown that was shown before? Let me know how I can help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:21,interoperability,format,formatting,21,"I see. I changed the formatting in some cases, but I guess you mean that some messages are not shown which should be shown or something is not shown that was shown before? Let me know how I can help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:78,interoperability,messag,messages,78,"I see. I changed the formatting in some cases, but I guess you mean that some messages are not shown which should be shown or something is not shown that was shown before? Let me know how I can help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:194,usability,help,help,194,"I see. I changed the formatting in some cases, but I guess you mean that some messages are not shown which should be shown or something is not shown that was shown before? Let me know how I can help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:605,availability,error,error,605,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:725,availability,error,error,725,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:241,integrability,messag,messages,241,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:370,integrability,messag,messages,370,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:413,integrability,messag,messages,413,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:611,integrability,messag,message,611,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:241,interoperability,messag,messages,241,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:370,interoperability,messag,messages,370,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:413,interoperability,messag,messages,413,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:611,interoperability,messag,message,611,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:312,modifiability,Variab,VariableMetricBuilder,312,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:623,modifiability,Variab,VariableMetricBuilder,623,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:605,performance,error,error,605,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:725,performance,error,error,725,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:605,safety,error,error,605,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:725,safety,error,error,725,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:547,usability,experien,experience,547,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:605,usability,error,error,605,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:725,usability,error,error,725,"I addition to the fix for the one-line printing, I would like to get one last commit in, https://github.com/root-project/root/pull/6705/commits/bcd7adeddf2997feb588ec1c61a67e0247cdb92f. I think the warning levels need to be tweaked for some messages (but this can be done in later PRs). I just did this here for VariableMetricBuilder, because these are rather prominent messages. I changed two warnings into info messages, because the reported issue is not so severe that it warrants a warning, and it is something that happens fairly often in my experience. On the other hand, I promoted a warning to an error message. If VariableMetricBuilder cannot run at all because the initial EDM is negative, I would consider this an error.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:417,availability,state,state,417,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:29,deployability,updat,update,29,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:511,deployability,Modul,ModularFunctionMinimizer,511,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:669,deployability,Modul,ModularFunctionMinimizer,669,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:808,deployability,Modul,ModularFunctionMinimizer,808,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:956,deployability,Modul,ModularFunctionMinimizer,956,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1106,deployability,Modul,ModularFunctionMinimizer,1106,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1254,deployability,Modul,ModularFunctionMinimizer,1254,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1401,deployability,Modul,ModularFunctionMinimizer,1401,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:64,integrability,messag,message,64,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:417,integrability,state,state,417,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:511,integrability,Modular,ModularFunctionMinimizer,511,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:669,integrability,Modular,ModularFunctionMinimizer,669,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:808,integrability,Modular,ModularFunctionMinimizer,808,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:956,integrability,Modular,ModularFunctionMinimizer,956,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1106,integrability,Modular,ModularFunctionMinimizer,1106,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1254,integrability,Modular,ModularFunctionMinimizer,1254,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1401,integrability,Modular,ModularFunctionMinimizer,1401,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:64,interoperability,messag,message,64,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:511,modifiability,Modul,ModularFunctionMinimizer,511,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:536,modifiability,Variab,VariableMetricBuilder,536,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:669,modifiability,Modul,ModularFunctionMinimizer,669,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:694,modifiability,Variab,VariableMetricBuilder,694,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:808,modifiability,Modul,ModularFunctionMinimizer,808,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:833,modifiability,Variab,VariableMetricBuilder,833,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:956,modifiability,Modul,ModularFunctionMinimizer,956,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:981,modifiability,Variab,VariableMetricBuilder,981,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1106,modifiability,Modul,ModularFunctionMinimizer,1106,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1131,modifiability,Variab,VariableMetricBuilder,1131,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1254,modifiability,Modul,ModularFunctionMinimizer,1254,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1279,modifiability,Variab,VariableMetricBuilder,1279,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1401,modifiability,Modul,ModularFunctionMinimizer,1401,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1426,modifiability,Variab,VariableMetricBuilder,1426,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:29,safety,updat,update,29,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:511,safety,Modul,ModularFunctionMinimizer,511,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:669,safety,Modul,ModularFunctionMinimizer,669,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:808,safety,Modul,ModularFunctionMinimizer,808,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:956,safety,Modul,ModularFunctionMinimizer,956,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1106,safety,Modul,ModularFunctionMinimizer,1106,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1254,safety,Modul,ModularFunctionMinimizer,1254,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1401,safety,Modul,ModularFunctionMinimizer,1401,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:29,security,updat,update,29,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:511,testability,Modula,ModularFunctionMinimizer,511,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:669,testability,Modula,ModularFunctionMinimizer,669,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:808,testability,Modula,ModularFunctionMinimizer,808,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:956,testability,Modula,ModularFunctionMinimizer,956,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1106,testability,Modula,ModularFunctionMinimizer,1106,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1254,testability,Modula,ModularFunctionMinimizer,1254,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1401,testability,Modula,ModularFunctionMinimizer,1401,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:274,usability,Minim,Minimize,274,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:383,usability,Minim,Minimize,383,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:502,usability,Minim,Minimize,502,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:660,usability,Minim,Minimize,660,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:799,usability,Minim,Minimize,799,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:947,usability,Minim,Minimize,947,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1097,usability,Minim,Minimize,1097,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1245,usability,Minim,Minimize,1245,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1392,usability,Minim,Minimize,1392,"Hi Hans, . Thank you for the update. . Actually having the info message with all the nested calls is maybe making the line too verbose, especially when calling from ROOT. I am not sure everybody will like this. Here is for example what I am getting:. ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: Minuit2Minimizer::Minimize:MnSeedGenerator: Initial state: FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 2e-06 with call limit = 1000000. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 0 - FCN = 3616 Edm = 6305.439852 NCalls = 9. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 1 - FCN = 13.13450166 Edm = 0.7502570511 NCalls = 16. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 2 - FCN = 12.64308061 Edm = 0.001706300191 NCalls = 22. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 3 - FCN = 11.13331108 Edm = 0.4006477323 NCalls = 34. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 4 - FCN = 10.43729238 Edm = 1.767931142 NCalls = 41. Info in <Minuit2>: Minuit2Minimizer::Minimize:ModularFunctionMinimizer:VariableMetricBuilder: 5 - FCN = 6.552494076 Edm = 0.03027421909 NCalls = 51. ```. Maybe we should add a compiler option for this, whichcould be enabled for Iminuit ? .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:47,availability,Error,Error,47,And I agree with your changes from Warnings to Error and Warnings to Info in bcd7ade,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:47,performance,Error,Error,47,And I agree with your changes from Warnings to Error and Warnings to Info in bcd7ade,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:47,safety,Error,Error,47,And I agree with your changes from Warnings to Error and Warnings to Info in bcd7ade,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:47,usability,Error,Error,47,And I agree with your changes from Warnings to Error and Warnings to Info in bcd7ade,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:135,deployability,patch,patch,135,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:276,deployability,stack,stack,276,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:460,deployability,stack,stack,460,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:590,deployability,stack,stack,590,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:748,deployability,toggl,toggle,748,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:923,deployability,stack,stack,923,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:307,integrability,filter,filter,307,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:332,integrability,messag,messages,332,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:509,integrability,coupl,couple,509,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:818,integrability,messag,messages,818,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:868,integrability,filter,filtering,868,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:881,integrability,messag,messages,881,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:938,integrability,filter,filters,938,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:959,integrability,messag,messages,959,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:986,integrability,filter,filter,986,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1006,integrability,messag,messages,1006,"ain prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1030,integrability,filter,filter,1030,"n-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the perform",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1142,integrability,filter,filters,1142,"://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whethe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1151,integrability,Filter,Filtering,1151,"com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1203,integrability,messag,message,1203,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1234,integrability,filter,filter,1234,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1268,integrability,messag,messages,1268,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1363,integrability,messag,messages,1363,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1718,integrability,sub,substrings,1718,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1741,integrability,messag,messages,1741,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1940,integrability,Filter,Filtering,1940,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2060,integrability,filter,filters,2060,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2117,integrability,filter,filters,2117,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:332,interoperability,messag,messages,332,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:818,interoperability,messag,messages,818,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:881,interoperability,messag,messages,881,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:959,interoperability,messag,messages,959,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1006,interoperability,messag,messages,1006,"ain prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1203,interoperability,messag,message,1203,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1268,interoperability,messag,messages,1268,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1363,interoperability,messag,messages,1363,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1741,interoperability,messag,messages,1741,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:509,modifiability,coupl,couple,509,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1399,modifiability,Variab,VariableMetrixBuilder,1399,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1463,modifiability,Variab,VariableMetricBuilder,1463,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:35,performance,time,time,35,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2026,performance,perform,performance,2026,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2095,performance,perform,performance,2095,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:135,safety,patch,patch,135,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:135,security,patch,patch,135,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2107,security,loss,loss,2107,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:509,testability,coupl,couple,509,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2010,testability,simpl,simple,2010,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:14,usability,prefer,prefer,14,"I would again prefer to have a run-time option and I think I have a solution that satisfies everyone. This is implemented in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1116,usability,Clear,ClearFilter,1116,"in my latest patch https://github.com/root-project/root/pull/6705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1979,usability,efficien,efficient,1979,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2010,usability,simpl,simple,2010,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2026,usability,perform,performance,2026,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:2095,usability,perform,performance,2095,"705/commits/365bd46563c025a5341b48e6d199b2aa4be76c4e. I think we need to collect the prefix stack if we want to be able to filter out, for example, messages from MnLineSearch that happen inside MnMigrad, but not those that happen inside MnHesse. That's why I think the prefix stack should stay. It is also fast, since only a couple of pointers are copied around. However, there is no need to show the full stack of prefixes. By default, MnPrint could just show the prefix from the innermost scope. I added the static method `MnPrint::ShowPrefixStack(bool yes)` to toggle showing the full prefix or not. The default is off so that the messages are not too long. I also now implemented filtering of messages based on the value of the prefix stack. When no filters are set, all messages are shown. Once a filter is set, only messages that match the filter are shown. This is done with strings, using `MnPrint::AddFilter` and `MnPrint::ClearFilter` to reset the filters. Filtering works like `grep` on the full prefix, the message is shown if any of the filter strings match. To only see messages from `MnHesse`, one can do:. ```c++. MnPrint::AddFilter(""MnHesse"");. ```. To only see messages from `MnHesse` called from VariableMetrixBuilder, one can do:. ```c++. MnPrint::AddFilter(""VariableMetricBuilder:MnHesse"");. ```. To only match the beginning of the prefix string, use ""^"". For example,. ```c++. MnPrint::AddFilter(""^MnHesse"");. ```. only matches direct execution of MnHesse, but not MnHesse called by MnMigrad. It also works with substrings. To see all messages from any Gradient calculator, one can do:. ```c++. MnPrint::AddFilter(""Gradient"");. ```. to match AnalyticalGradientCalculator, Numerical2PGradientCalculator, and InitialGradientCalculator. Filtering is not implemented in a very efficient way to keep the code simple, but the performance drop is opt-in. If no filters are used, then there is no performance loss. The filters work correctly whether or not the full prefix is displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:176,deployability,stack,stack,176,"@lmoneta Feel free to ask me to revert this if you don't like the filtering. I just threw this in because we were discussing follow-up work and I wanted to show how the prefix stack can be used for filtering, even if it is not displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:66,integrability,filter,filtering,66,"@lmoneta Feel free to ask me to revert this if you don't like the filtering. I just threw this in because we were discussing follow-up work and I wanted to show how the prefix stack can be used for filtering, even if it is not displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:198,integrability,filter,filtering,198,"@lmoneta Feel free to ask me to revert this if you don't like the filtering. I just threw this in because we were discussing follow-up work and I wanted to show how the prefix stack can be used for filtering, even if it is not displayed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:69,deployability,stack,stack,69,"Hi Hans, . I think your idea of filtering and controlling the prefix stack at run time is great! I like it. Let me try and run a CI on the latest commit and then I think we can finally approve this PR. Thank you for this nice improvement!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:32,integrability,filter,filtering,32,"Hi Hans, . I think your idea of filtering and controlling the prefix stack at run time is great! I like it. Let me try and run a CI on the latest commit and then I think we can finally approve this PR. Thank you for this nice improvement!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:82,performance,time,time,82,"Hi Hans, . I think your idea of filtering and controlling the prefix stack at run time is great! I like it. Let me try and run a CI on the latest commit and then I think we can finally approve this PR. Thank you for this nice improvement!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:46,security,control,controlling,46,"Hi Hans, . I think your idea of filtering and controlling the prefix stack at run time is great! I like it. Let me try and run a CI on the latest commit and then I think we can finally approve this PR. Thank you for this nice improvement!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:46,testability,control,controlling,46,"Hi Hans, . I think your idea of filtering and controlling the prefix stack at run time is great! I like it. Let me try and run a CI on the latest commit and then I think we can finally approve this PR. Thank you for this nice improvement!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:43,availability,error,errors,43,"@HDembinski Hi , . there are some compiler errors in MnPrint and a warning in FumiliGradientCalculator.cxx. If you could fix those , it would be great ! Thank you !!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:43,performance,error,errors,43,"@HDembinski Hi , . there are some compiler errors in MnPrint and a warning in FumiliGradientCalculator.cxx. If you could fix those , it would be great ! Thank you !!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:43,safety,error,errors,43,"@HDembinski Hi , . there are some compiler errors in MnPrint and a warning in FumiliGradientCalculator.cxx. If you could fix those , it would be great ! Thank you !!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:43,usability,error,errors,43,"@HDembinski Hi , . there are some compiler errors in MnPrint and a warning in FumiliGradientCalculator.cxx. If you could fix those , it would be great ! Thank you !!!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1832,availability,operat,operator,1832,"r 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/libMinuit2.so. #2 0x00007fd8d256596e in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #3 0x00007fd8e630a6db in start_thread (arg=0x7fd8cb1bc700) at pthread_create.c:463. #4 0x00007fd8e6efca3f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1547,deployability,stack,stack,1547,"r 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/libMinuit2.so. #2 0x00007fd8d256596e in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #3 0x00007fd8e630a6db in start_thread (arg=0x7fd8cb1bc700) at pthread_create.c:463. #4 0x00007fd8e6efca3f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1988,deployability,build,build,1988,"r 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/libMinuit2.so. #2 0x00007fd8d256596e in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #3 0x00007fd8e630a6db in start_thread (arg=0x7fd8cb1bc700) at pthread_create.c:463. #4 0x00007fd8e6efca3f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:268,modifiability,paramet,parameters,268,"When running from ROOT the tutorial `tutorials/fit/NumericalMinimization.C`. I get this crash when using a debug print level (>3). ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: MnSeedGenerator 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:496,modifiability,paramet,parameter,496,"When running from ROOT the tutorial `tutorials/fit/NumericalMinimization.C`. I get this crash when using a debug print level (>3). ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: MnSeedGenerator 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:644,modifiability,paramet,parameter,644,"When running from ROOT the tutorial `tutorials/fit/NumericalMinimization.C`. I get this crash when using a debug print level (>3). ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: MnSeedGenerator 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1331,modifiability,Paramet,Parameter,1331,"r 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/libMinuit2.so. #2 0x00007fd8d256596e in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #3 0x00007fd8e630a6db in start_thread (arg=0x7fd8cb1bc700) at pthread_create.c:463. #4 0x00007fd8e6efca3f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1553,testability,trace,trace,1553,"r 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/libMinuit2.so. #2 0x00007fd8d256596e in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #3 0x00007fd8e630a6db in start_thread (arg=0x7fd8cb1bc700) at pthread_create.c:463. #4 0x00007fd8e6efca3f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:154,usability,Minim,Minimize,154,"When running from ROOT the tutorial `tutorials/fit/NumericalMinimization.C`. I get this crash when using a debug print level (>3). ```. Minuit2Minimizer: Minimize with max-calls 1000000 convergence for edm < 0.001 strategy 1. Info in <Minuit2>: MnSeedGenerator 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:1858,usability,Minim,MinimumParameters,1858,"r 2 free parameters, FCN pointer 0x7ffd440f3d30. Info in <Minuit2>: InitialGradientCalculator Calculating initital gradient at point . -19.29441224. 18.75662556. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter x value -19.2944 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: InitialGradientCalculator Computed initial gradient for parameter y value 18.7566 [ -0.01 , 0.01 ] dirin 0.01 grd 200 g2 20000. Info in <Minuit2>: Numerical2PGradientCalculator Assumed precision eps 8.88178e-16 eps2 5.96046e-08. Info in <Minuit2>: Numerical2PGradientCalculator Calculating gradient around value 1.24979e+07 at point . -19.29441224. 18.75662556. Info in <Minuit2>: Numerical2PGradientCalculator cycle 0 x -19.29441223852 step 0.01 f1 12470627.44365 f2 12525195.60355 grd -2728407.995034 g2 439228.5821213. Info in <Minuit2>: Numerical2PGradientCalculator cycle 1 x -19.29441223852 step 0.003683478230861 f1 12487842.51291 f2 12507942.5709 grd -2728407.327973 g2 439228.5648472. Info in <Minuit2>: Numerical2PGradientCalculator Parameter x Gradient -2728407.327973 g2 439228.5648472 step 0.003683478230861. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. Thread 16 (Thread 0x7fd8cb1bc700 (LWP 14166)):. #0 0x00007fd8d2568113 in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #1 0x00007fd8d2e38c5b in ROOT::Minuit2::Numerical2PGradientCalculator::operator()(ROOT::Minuit2::MinimumParameters const&, ROOT::Minuit2::FunctionGradient const&) const [clone ._omp_fn.0] () from /home/moneta/rootgit/root_dev3-build/lib/libMinuit2.so. #2 0x00007fd8d256596e in ?? () from /usr/lib/x86_64-linux-gnu/libgomp.so.1. #3 0x00007fd8e630a6db in start_thread (arg=0x7fd8cb1bc700) at pthread_create.c:463. #4 0x00007fd8e6efca3f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:9,energy efficiency,current,currently,9,"Ok, I am currently looking into those.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:21,availability,error,error,21,@lmoneta I fixed the error and the warning. I tried `tutorials/fit/NumericalMinimization.C` with the fixed code on my computer and its works. I changed the line 55 to increase the print level to 4.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:21,performance,error,error,21,@lmoneta I fixed the error and the warning. I tried `tutorials/fit/NumericalMinimization.C` with the fixed code on my computer and its works. I changed the line 55 to increase the print level to 4.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:21,safety,error,error,21,@lmoneta I fixed the error and the warning. I tried `tutorials/fit/NumericalMinimization.C` with the fixed code on my computer and its works. I changed the line 55 to increase the print level to 4.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:21,usability,error,error,21,@lmoneta I fixed the error and the warning. I tried `tutorials/fit/NumericalMinimization.C` with the fixed code on my computer and its works. I changed the line 55 to increase the print level to 4.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:117,deployability,configurat,configuration,117,Thank you for the fixes ! I am still having the crash on my machine with debug print level. Maybe is due to some bad configuration on my side. Let me check this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:117,integrability,configur,configuration,117,Thank you for the fixes ! I am still having the crash on my machine with debug print level. Maybe is due to some bad configuration on my side. Let me check this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:117,modifiability,configur,configuration,117,Thank you for the fixes ! I am still having the crash on my machine with debug print level. Maybe is due to some bad configuration on my side. Let me check this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:117,security,configur,configuration,117,Thank you for the fixes ! I am still having the crash on my machine with debug print level. Maybe is due to some bad configuration on my side. Let me check this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:17,deployability,observ,observed,17,Hi . The crash I observed seems to come when Minuit2 is compiled with omp support (i.e. when _OPENMP is defined in the . Numerical2PGradientCalculator. . Maybe we should add the debug printing in the for -loop only when _OPENMP is not defined,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:17,testability,observ,observed,17,Hi . The crash I observed seems to come when Minuit2 is compiled with omp support (i.e. when _OPENMP is defined in the . Numerical2PGradientCalculator. . Maybe we should add the debug printing in the for -loop only when _OPENMP is not defined,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:74,usability,support,support,74,Hi . The crash I observed seems to come when Minuit2 is compiled with omp support (i.e. when _OPENMP is defined in the . Numerical2PGradientCalculator. . Maybe we should add the debug printing in the for -loop only when _OPENMP is not defined,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:262,modifiability,Paramet,Parameter,262,"I have tried adding the pragma omp critical (see below) but still I am having the crash. . ```. #ifdef _OPENMP. #pragma omp critical. #endif. {. print.Debug([&](std::ostream &os) {. const int pr = os.precision(13);. const int iext = Trafo().ExtOfInt(i);. os << ""Parameter "" << Trafo().Name(iext) << "" Gradient "" << grd(i) << "" g2 "" << g2(i) << "" step "" << gstep(i);. os.precision(pr);. });. }. ```. so for the time being I would not use print.Debug when _OPENMP is defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:410,performance,time,time,410,"I have tried adding the pragma omp critical (see below) but still I am having the crash. . ```. #ifdef _OPENMP. #pragma omp critical. #endif. {. print.Debug([&](std::ostream &os) {. const int pr = os.precision(13);. const int iext = Trafo().ExtOfInt(i);. os << ""Parameter "" << Trafo().Name(iext) << "" Gradient "" << grd(i) << "" g2 "" << g2(i) << "" step "" << gstep(i);. os.precision(pr);. });. }. ```. so for the time being I would not use print.Debug when _OPENMP is defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:24,reliability,pra,pragma,24,"I have tried adding the pragma omp critical (see below) but still I am having the crash. . ```. #ifdef _OPENMP. #pragma omp critical. #endif. {. print.Debug([&](std::ostream &os) {. const int pr = os.precision(13);. const int iext = Trafo().ExtOfInt(i);. os << ""Parameter "" << Trafo().Name(iext) << "" Gradient "" << grd(i) << "" g2 "" << g2(i) << "" step "" << gstep(i);. os.precision(pr);. });. }. ```. so for the time being I would not use print.Debug when _OPENMP is defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:113,reliability,pra,pragma,113,"I have tried adding the pragma omp critical (see below) but still I am having the crash. . ```. #ifdef _OPENMP. #pragma omp critical. #endif. {. print.Debug([&](std::ostream &os) {. const int pr = os.precision(13);. const int iext = Trafo().ExtOfInt(i);. os << ""Parameter "" << Trafo().Name(iext) << "" Gradient "" << grd(i) << "" g2 "" << g2(i) << "" step "" << gstep(i);. os.precision(pr);. });. }. ```. so for the time being I would not use print.Debug when _OPENMP is defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:162,modifiability,variab,variables,162,"@lmoneta Thanks for investigating. I am a bit confused now. If this crash only happens when OMP is enabled, then it is probably related to my use of thread_local variables. I don't have much experience with what can go wrong there. Is there an easy way for me to reproduce this on my computer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:191,usability,experien,experience,191,"@lmoneta Thanks for investigating. I am a bit confused now. If this crash only happens when OMP is enabled, then it is probably related to my use of thread_local variables. I don't have much experience with what can go wrong there. Is there an easy way for me to reproduce this on my computer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:242,deployability,log,logging,242,"If calling gPrefixStack.back() segfaults, then the gPrefixStack is empty when it is called. The code assumes that gPrefixStack is never empty when StreamPrefix is called, which under normal circumstances is indeed impossible, one cannot call logging without creating a MnPrint object and that action adds the first prefix to the gPrefixStack. Edit: See below for an explanation why there is a crash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:242,safety,log,logging,242,"If calling gPrefixStack.back() segfaults, then the gPrefixStack is empty when it is called. The code assumes that gPrefixStack is never empty when StreamPrefix is called, which under normal circumstances is indeed impossible, one cannot call logging without creating a MnPrint object and that action adds the first prefix to the gPrefixStack. Edit: See below for an explanation why there is a crash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:242,security,log,logging,242,"If calling gPrefixStack.back() segfaults, then the gPrefixStack is empty when it is called. The code assumes that gPrefixStack is never empty when StreamPrefix is called, which under normal circumstances is indeed impossible, one cannot call logging without creating a MnPrint object and that action adds the first prefix to the gPrefixStack. Edit: See below for an explanation why there is a crash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:242,testability,log,logging,242,"If calling gPrefixStack.back() segfaults, then the gPrefixStack is empty when it is called. The code assumes that gPrefixStack is never empty when StreamPrefix is called, which under normal circumstances is indeed impossible, one cannot call logging without creating a MnPrint object and that action adds the first prefix to the gPrefixStack. Edit: See below for an explanation why there is a crash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:437,deployability,fail,fail,437,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:478,deployability,Fail,Failed,478,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:523,deployability,Fail,Failed,523,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:569,deployability,Fail,Failed,569,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:614,deployability,Fail,Failed,614,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:672,deployability,patch,patches,672,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:60,modifiability,variab,variable,60,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:437,reliability,fail,fail,437,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:478,reliability,Fail,Failed,478,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:523,reliability,Fail,Failed,523,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:569,reliability,Fail,Failed,569,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:614,reliability,Fail,Failed,614,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:984,reliability,doe,does,984,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:431,safety,test,tests,431,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:494,safety,test,test-stressroostats-,494,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:672,safety,patch,patches,672,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:672,security,patch,patches,672,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:431,testability,test,tests,431,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:494,testability,test,test-stressroostats-,494,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:979,usability,user,user,979,"I read up on this and it is indeed so that the thread-local variable is default initialized in each thread, therefore the gPrefixStack in a newly created thread is empty. I moved one debug print outside of the threads, it now happens after the threads are joined and I deactivated the second debug print when OpenMP is enabled. I hope this fixes the issue. I now compiled ROOT with minuit2_omp=ON and I don't get crashes, but some tests fail. ```. 	164 - minuit2_testMinimizer (Failed). 	227 - test-stressroostats-minuit2 (Failed). 	414 - tutorial-fit-minuit2FitBench (Failed). 	416 - tutorial-fit-minuit2GausFit (Failed). ```. Is this normal? Some notes on the other two patches:. * https://github.com/root-project/root/pull/6705/commits/83af202e0940423c2ba0fcdb0e091d861d5f517f just fixes a typo that I noticed. * https://github.com/root-project/root/pull/6705/commits/de1d979c1c9d194852237466dbf2ba04322f15df I noticed that MnApplication only prints the debug output when the user does not pass an analytical gradient, so I fixed that, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:108,availability,failur,failures,108,"Hi, . Thank you for the fix. I do not have anymore that crash in gPrefixStack. . Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:108,deployability,fail,failures,108,"Hi, . Thank you for the fix. I do not have anymore that crash in gPrefixStack. . Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:108,performance,failur,failures,108,"Hi, . Thank you for the fix. I do not have anymore that crash in gPrefixStack. . Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:149,performance,multi-thread,multi-thread,149,"Hi, . Thank you for the fix. I do not have anymore that crash in gPrefixStack. . Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:108,reliability,fail,failures,108,"Hi, . Thank you for the fix. I do not have anymore that crash in gPrefixStack. . Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:130,safety,test,tests,130,"Hi, . Thank you for the fix. I do not have anymore that crash in gPrefixStack. . Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:215,safety,safe,safe,215,"Hi, . Thank you for the fix. I do not have anymore that crash in gPrefixStack. . Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:130,testability,test,tests,130,"Hi, . Thank you for the fix. I do not have anymore that crash in gPrefixStack. . Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:11,deployability,build,build,11,@phsft-bot build with flags -Dminuit2=On -Dminuit2_omp=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:11,deployability,build,build,11,@phsft-bot build with flags -Dminuit2=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:40,deployability,patch,patch,40,"@lmoneta Big thanks! Sorry for the huge patch, reviewing this was surely not easy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:40,safety,patch,patch,40,"@lmoneta Big thanks! Sorry for the huge patch, reviewing this was surely not easy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:47,safety,review,reviewing,47,"@lmoneta Big thanks! Sorry for the huge patch, reviewing this was surely not easy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:40,security,patch,patch,40,"@lmoneta Big thanks! Sorry for the huge patch, reviewing this was surely not easy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6705:47,testability,review,reviewing,47,"@lmoneta Big thanks! Sorry for the huge patch, reviewing this was surely not easy.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6705
https://github.com/root-project/root/pull/6707:117,reliability,diagno,diagnostics,117,"@SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:294,safety,test,testing,294,"@SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:343,safety,compl,complex,343,"@SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:97,security,modif,modify,97,"@SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:343,security,compl,complex,343,"@SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:117,testability,diagno,diagnostics,117,"@SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:294,testability,test,testing,294,"@SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:456,availability,error,errors,456,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:536,availability,error,error,536,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:617,availability,error,errors,617,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:456,performance,error,errors,456,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:536,performance,error,error,536,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:617,performance,error,errors,617,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:119,reliability,diagno,diagnostics,119,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:296,safety,test,testing,296,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:345,safety,compl,complex,345,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:456,safety,error,errors,456,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:468,safety,test,tests,468,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:536,safety,error,error,536,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:568,safety,test,test,568,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:617,safety,error,errors,617,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:99,security,modif,modify,99,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:345,security,compl,complex,345,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:119,testability,diagno,diagnostics,119,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:296,testability,test,testing,296,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:381,testability,understand,understand,381,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:468,testability,test,tests,468,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:568,testability,test,test,568,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:456,usability,error,errors,456,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:536,usability,error,error,536,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:617,usability,error,errors,617,"> @SimeonEhrig great, thanks! Could you check out https://github.com/root-project/roottest.git and modify the expected diagnostics (`*.ref` files in the corresponding directories)? You can create a PR for roottest, and if you use the same branch name as for this PR, this PR will pick it up when testing! Happy to explain offline if this is too complex / convoluted :-). I think I understand what you want. Unfortunately I have no idea what is causing the errors. The tests have nothing to do with my changes and I cannot reproduce the error on my system. I think the test scripts have problems catching the expected errors.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:13,availability,error,error,13,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:47,availability,error,error,47,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:53,deployability,log,log,53,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:84,deployability,log,log,84,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:13,performance,error,error,13,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:47,performance,error,error,47,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:13,safety,error,error,13,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:47,safety,error,error,47,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:53,safety,log,log,53,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:84,safety,log,log,84,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:53,security,log,log,53,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:84,security,log,log,84,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:53,testability,log,log,53,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:84,testability,log,log,84,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:13,usability,error,error,13,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6707:47,usability,error,error,47,"The windows ""error"" is spurious, caused by the error log parser matching the commit log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6707
https://github.com/root-project/root/pull/6708:49,deployability,integr,integrated,49,"I checked once again - there are many images now integrated in openui5 libraries, but I do not have chance to select them out. Therefore I will merge as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6708
https://github.com/root-project/root/pull/6708:49,integrability,integr,integrated,49,"I checked once again - there are many images now integrated in openui5 libraries, but I do not have chance to select them out. Therefore I will merge as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6708
https://github.com/root-project/root/pull/6708:49,interoperability,integr,integrated,49,"I checked once again - there are many images now integrated in openui5 libraries, but I do not have chance to select them out. Therefore I will merge as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6708
https://github.com/root-project/root/pull/6708:49,modifiability,integr,integrated,49,"I checked once again - there are many images now integrated in openui5 libraries, but I do not have chance to select them out. Therefore I will merge as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6708
https://github.com/root-project/root/pull/6708:49,reliability,integr,integrated,49,"I checked once again - there are many images now integrated in openui5 libraries, but I do not have chance to select them out. Therefore I will merge as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6708
https://github.com/root-project/root/pull/6708:49,security,integr,integrated,49,"I checked once again - there are many images now integrated in openui5 libraries, but I do not have chance to select them out. Therefore I will merge as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6708
https://github.com/root-project/root/pull/6708:49,testability,integr,integrated,49,"I checked once again - there are many images now integrated in openui5 libraries, but I do not have chance to select them out. Therefore I will merge as is.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6708
https://github.com/root-project/root/pull/6710:21,deployability,log,logs,21,"Looking into jenkins logs - it tries to build with `builtin_openui5=OFF`. It works, but requires loading of full openui5 package from web. After merging this PR one has to change Jenkins to enable `builtin_openui5`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6710
https://github.com/root-project/root/pull/6710:40,deployability,build,build,40,"Looking into jenkins logs - it tries to build with `builtin_openui5=OFF`. It works, but requires loading of full openui5 package from web. After merging this PR one has to change Jenkins to enable `builtin_openui5`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6710
https://github.com/root-project/root/pull/6710:97,energy efficiency,load,loading,97,"Looking into jenkins logs - it tries to build with `builtin_openui5=OFF`. It works, but requires loading of full openui5 package from web. After merging this PR one has to change Jenkins to enable `builtin_openui5`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6710
https://github.com/root-project/root/pull/6710:121,modifiability,pac,package,121,"Looking into jenkins logs - it tries to build with `builtin_openui5=OFF`. It works, but requires loading of full openui5 package from web. After merging this PR one has to change Jenkins to enable `builtin_openui5`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6710
https://github.com/root-project/root/pull/6710:97,performance,load,loading,97,"Looking into jenkins logs - it tries to build with `builtin_openui5=OFF`. It works, but requires loading of full openui5 package from web. After merging this PR one has to change Jenkins to enable `builtin_openui5`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6710
https://github.com/root-project/root/pull/6710:21,safety,log,logs,21,"Looking into jenkins logs - it tries to build with `builtin_openui5=OFF`. It works, but requires loading of full openui5 package from web. After merging this PR one has to change Jenkins to enable `builtin_openui5`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6710
https://github.com/root-project/root/pull/6710:21,security,log,logs,21,"Looking into jenkins logs - it tries to build with `builtin_openui5=OFF`. It works, but requires loading of full openui5 package from web. After merging this PR one has to change Jenkins to enable `builtin_openui5`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6710
https://github.com/root-project/root/pull/6710:21,testability,log,logs,21,"Looking into jenkins logs - it tries to build with `builtin_openui5=OFF`. It works, but requires loading of full openui5 package from web. After merging this PR one has to change Jenkins to enable `builtin_openui5`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6710
https://github.com/root-project/root/pull/6714:56,usability,person,person,56,@andriish . This PR is related to GUI. @bellenot is the person to ask about it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:206,safety,review,review,206,"Hi @couet , @bellenot ,. how can I help to merge this and other requests into the master faster? This one, #6740 , #6547 and #6716 are quite trivial. Is there a tag that would mark the requsts as ""easy for review/merge""? Best regards,. Andrii. . .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:206,testability,review,review,206,"Hi @couet , @bellenot ,. how can I help to merge this and other requests into the master faster? This one, #6740 , #6547 and #6716 are quite trivial. Is there a tag that would mark the requsts as ""easy for review/merge""? Best regards,. Andrii. . .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:35,usability,help,help,35,"Hi @couet , @bellenot ,. how can I help to merge this and other requests into the master faster? This one, #6740 , #6547 and #6716 are quite trivial. Is there a tag that would mark the requsts as ""easy for review/merge""? Best regards,. Andrii. . .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:355,availability,unavail,unavailable,355,"> Hi @couet , @bellenot ,. > . > how can I help to merge this and other requests into the master faster? > This one, #6740 , #6547 and #6716 are quite trivial. Is there a tag that would mark the requsts as ""easy for review/merge""? > . > Best regards,. > . > Andrii. Hi @andriish, sorry, I'm not sure there is a fast way of doing it... And Olivier will be unavailable for a while. I'll try to take care of them, or ping the relevant people",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:414,availability,ping,ping,414,"> Hi @couet , @bellenot ,. > . > how can I help to merge this and other requests into the master faster? > This one, #6740 , #6547 and #6716 are quite trivial. Is there a tag that would mark the requsts as ""easy for review/merge""? > . > Best regards,. > . > Andrii. Hi @andriish, sorry, I'm not sure there is a fast way of doing it... And Olivier will be unavailable for a while. I'll try to take care of them, or ping the relevant people",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:216,safety,review,review,216,"> Hi @couet , @bellenot ,. > . > how can I help to merge this and other requests into the master faster? > This one, #6740 , #6547 and #6716 are quite trivial. Is there a tag that would mark the requsts as ""easy for review/merge""? > . > Best regards,. > . > Andrii. Hi @andriish, sorry, I'm not sure there is a fast way of doing it... And Olivier will be unavailable for a while. I'll try to take care of them, or ping the relevant people",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:216,testability,review,review,216,"> Hi @couet , @bellenot ,. > . > how can I help to merge this and other requests into the master faster? > This one, #6740 , #6547 and #6716 are quite trivial. Is there a tag that would mark the requsts as ""easy for review/merge""? > . > Best regards,. > . > Andrii. Hi @andriish, sorry, I'm not sure there is a fast way of doing it... And Olivier will be unavailable for a while. I'll try to take care of them, or ping the relevant people",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:43,usability,help,help,43,"> Hi @couet , @bellenot ,. > . > how can I help to merge this and other requests into the master faster? > This one, #6740 , #6547 and #6716 are quite trivial. Is there a tag that would mark the requsts as ""easy for review/merge""? > . > Best regards,. > . > Andrii. Hi @andriish, sorry, I'm not sure there is a fast way of doing it... And Olivier will be unavailable for a while. I'll try to take care of them, or ping the relevant people",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:75,testability,understand,understand,75,"Hi @bellenot ,. thanks for the information. No problem, I'm just trying to understand the mechanics of the development workflow you use here in GitHub and fit the pull requests to it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6714:119,usability,workflow,workflow,119,"Hi @bellenot ,. thanks for the information. No problem, I'm just trying to understand the mechanics of the development workflow you use here in GitHub and fit the pull requests to it. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6714
https://github.com/root-project/root/pull/6716:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6716
https://github.com/root-project/root/pull/6717:13,deployability,build,build,13,. @phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6717
https://github.com/root-project/root/pull/6718:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6718
https://github.com/root-project/root/pull/6718:185,interoperability,conflict,conflict,185,"Hi @hageboeck, thanks for this nice PR with a perfect commit history! It was nice to review since the complicated changes were local to the first commit. Unfortunately there is a merge conflict now, so I think you need to fix this with a final rebase before I can approve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6718
https://github.com/root-project/root/pull/6718:85,safety,review,review,85,"Hi @hageboeck, thanks for this nice PR with a perfect commit history! It was nice to review since the complicated changes were local to the first commit. Unfortunately there is a merge conflict now, so I think you need to fix this with a final rebase before I can approve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6718
https://github.com/root-project/root/pull/6718:102,safety,compl,complicated,102,"Hi @hageboeck, thanks for this nice PR with a perfect commit history! It was nice to review since the complicated changes were local to the first commit. Unfortunately there is a merge conflict now, so I think you need to fix this with a final rebase before I can approve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6718
https://github.com/root-project/root/pull/6718:102,security,compl,complicated,102,"Hi @hageboeck, thanks for this nice PR with a perfect commit history! It was nice to review since the complicated changes were local to the first commit. Unfortunately there is a merge conflict now, so I think you need to fix this with a final rebase before I can approve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6718
https://github.com/root-project/root/pull/6718:85,testability,review,review,85,"Hi @hageboeck, thanks for this nice PR with a perfect commit history! It was nice to review since the complicated changes were local to the first commit. Unfortunately there is a merge conflict now, so I think you need to fix this with a final rebase before I can approve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6718
https://github.com/root-project/root/issues/6719:59,availability,slo,slower,59,"The user claims that processing the aforementioned line is slower w.r.t. ROOT 6.20.02. No run time measurements are provided, though. Requested to add an issue here, but this is still to be confirmed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:99,energy efficiency,measur,measurements,99,"The user claims that processing the aforementioned line is slower w.r.t. ROOT 6.20.02. No run time measurements are provided, though. Requested to add an issue here, but this is still to be confirmed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:94,performance,time,time,94,"The user claims that processing the aforementioned line is slower w.r.t. ROOT 6.20.02. No run time measurements are provided, though. Requested to add an issue here, but this is still to be confirmed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:59,reliability,slo,slower,59,"The user claims that processing the aforementioned line is slower w.r.t. ROOT 6.20.02. No run time measurements are provided, though. Requested to add an issue here, but this is still to be confirmed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:4,usability,user,user,4,"The user claims that processing the aforementioned line is slower w.r.t. ROOT 6.20.02. No run time measurements are provided, though. Requested to add an issue here, but this is still to be confirmed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:190,usability,confirm,confirmed,190,"The user claims that processing the aforementioned line is slower w.r.t. ROOT 6.20.02. No run time measurements are provided, though. Requested to add an issue here, but this is still to be confirmed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:471,energy efficiency,load,load,471,"Dear @cxwx, in absence of a reproducer, I will close the issue: if you think this should not be done please re-open it with a comment. However, let me try to propose a solution, even if a lot of guessing is done without knowing anything about the header file you want to include. Why don't you generate a dictionary and ""precompile""that header in the form of a pcm? Alternatively, you could refactor the code inside it and create a library and a very thin header to then load the library and include the header at startup. I hope this helps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:391,modifiability,refact,refactor,391,"Dear @cxwx, in absence of a reproducer, I will close the issue: if you think this should not be done please re-open it with a comment. However, let me try to propose a solution, even if a lot of guessing is done without knowing anything about the header file you want to include. Why don't you generate a dictionary and ""precompile""that header in the form of a pcm? Alternatively, you could refactor the code inside it and create a library and a very thin header to then load the library and include the header at startup. I hope this helps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:391,performance,refactor,refactor,391,"Dear @cxwx, in absence of a reproducer, I will close the issue: if you think this should not be done please re-open it with a comment. However, let me try to propose a solution, even if a lot of guessing is done without knowing anything about the header file you want to include. Why don't you generate a dictionary and ""precompile""that header in the form of a pcm? Alternatively, you could refactor the code inside it and create a library and a very thin header to then load the library and include the header at startup. I hope this helps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:471,performance,load,load,471,"Dear @cxwx, in absence of a reproducer, I will close the issue: if you think this should not be done please re-open it with a comment. However, let me try to propose a solution, even if a lot of guessing is done without knowing anything about the header file you want to include. Why don't you generate a dictionary and ""precompile""that header in the form of a pcm? Alternatively, you could refactor the code inside it and create a library and a very thin header to then load the library and include the header at startup. I hope this helps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:47,usability,close,close,47,"Dear @cxwx, in absence of a reproducer, I will close the issue: if you think this should not be done please re-open it with a comment. However, let me try to propose a solution, even if a lot of guessing is done without knowing anything about the header file you want to include. Why don't you generate a dictionary and ""precompile""that header in the form of a pcm? Alternatively, you could refactor the code inside it and create a library and a very thin header to then load the library and include the header at startup. I hope this helps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/issues/6719:535,usability,help,helps,535,"Dear @cxwx, in absence of a reproducer, I will close the issue: if you think this should not be done please re-open it with a comment. However, let me try to propose a solution, even if a lot of guessing is done without knowing anything about the header file you want to include. Why don't you generate a dictionary and ""precompile""that header in the form of a pcm? Alternatively, you could refactor the code inside it and create a library and a very thin header to then load the library and include the header at startup. I hope this helps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6719
https://github.com/root-project/root/pull/6720:211,deployability,depend,depending,211,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:557,energy efficiency,charg,charges,557,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:65,integrability,pub,public,65,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:72,integrability,repositor,repositories,72,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:122,integrability,repositor,repositories,122,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:211,integrability,depend,depending,211,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:600,integrability,repositor,repository,600,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:738,integrability,pub,public,738,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:72,interoperability,repositor,repositories,72,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:122,interoperability,repositor,repositories,122,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:600,interoperability,repositor,repository,600,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:211,modifiability,depend,depending,211,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:211,safety,depend,depending,211,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:324,safety,prevent,prevents,324,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:324,security,preven,prevents,324,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:211,testability,depend,depending,211,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:621,usability,workflow,workflow,621,"That's what's written here:. "". GitHub Actions usage is free for public repositories and self-hosted runners. For private repositories, each GitHub account receives a certain amount of free minutes and storage, depending on the product used with the account. By default, your account will have a spending limit of $0, which prevents additional usage of minutes or storage after you reach these limits. If you increase your spending limit above the default of $0, you will be billed for any minutes or storage beyond the limits, also called overages. GitHub charges usage to the account that owns the repository where the workflow is run. Any coupons on your account do not apply to GitHub Actions overages. "". IIUC, there is no quota for public repos but the wording is very convoluted so maybe there is another interpretation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:151,deployability,build,builds,151,OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:76,energy efficiency,CPU,CPU,76,OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:133,energy efficiency,reduc,reduce,133,OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:76,performance,CPU,CPU,76,OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:304,availability,slo,slow,304,> OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number? They should be all run in parallel so there should not be a delays for PRs (and we are pretty slow in processing PRs anyway). Why do you want less build coverage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:153,deployability,build,builds,153,> OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number? They should be all run in parallel so there should not be a delays for PRs (and we are pretty slow in processing PRs anyway). Why do you want less build coverage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:357,deployability,build,build,357,> OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number? They should be all run in parallel so there should not be a delays for PRs (and we are pretty slow in processing PRs anyway). Why do you want less build coverage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:78,energy efficiency,CPU,CPU,78,> OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number? They should be all run in parallel so there should not be a delays for PRs (and we are pretty slow in processing PRs anyway). Why do you want less build coverage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:135,energy efficiency,reduc,reduce,135,> OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number? They should be all run in parallel so there should not be a delays for PRs (and we are pretty slow in processing PRs anyway). Why do you want less build coverage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:78,performance,CPU,CPU,78,> OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number? They should be all run in parallel so there should not be a delays for PRs (and we are pretty slow in processing PRs anyway). Why do you want less build coverage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:236,performance,parallel,parallel,236,> OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number? They should be all run in parallel so there should not be a delays for PRs (and we are pretty slow in processing PRs anyway). Why do you want less build coverage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:304,reliability,slo,slow,304,> OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number? They should be all run in parallel so there should not be a delays for PRs (and we are pretty slow in processing PRs anyway). Why do you want less build coverage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:363,testability,coverag,coverage,363,> OK I see - the assumption is that GH Free gives open source repos unlimited CPU hours for Actions. Fine. Then I'd still recommend we reduce the set of builds to 6 or so? What do you find a reasonable number? They should be all run in parallel so there should not be a delays for PRs (and we are pretty slow in processing PRs anyway). Why do you want less build coverage?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:17,energy efficiency,reduc,reduced,17,@Axel-Naumann We reduced the testing matrix to 8 jobs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:29,safety,test,testing,29,@Axel-Naumann We reduced the testing matrix to 8 jobs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:29,testability,test,testing,29,@Axel-Naumann We reduced the testing matrix to 8 jobs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:151,availability,failur,failure,151,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:44,deployability,resourc,resources,44,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:151,deployability,fail,failure,151,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:189,deployability,build,builds,189,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:298,deployability,build,builds,298,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:44,energy efficiency,resources usag,resources usage,44,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:23,modifiability,concern,concern,23,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:44,performance,resourc,resources,44,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:151,performance,failur,failure,151,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:151,reliability,fail,failure,151,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:44,safety,resourc,resources,44,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:368,safety,test,tested,368,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:23,testability,concern,concern,23,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:44,testability,resourc,resources,44,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:368,testability,test,tested,368,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6720:330,usability,experien,experiences,330,"Great, thanks! My main concern - apart from resources usage, which we believe isn't an issue - is the near exponential explosion of the probability of failure due to random glitches. Eight builds should address that. Apologies for not mentioning the second reason for my hesitation for having many builds; we have fairly negative experiences with that from ROOT being tested on Jenkins...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6720
https://github.com/root-project/root/pull/6727:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6727
https://github.com/root-project/root/pull/6727:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6727
https://github.com/root-project/root/pull/6727:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6727
https://github.com/root-project/root/pull/6727:11,deployability,build,build,11,@phsft-bot build just on windows10/cxx14 with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6727
https://github.com/root-project/root/pull/6727:0,availability,Error,Errors,0,Errors are unrelated. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6727
https://github.com/root-project/root/pull/6727:0,performance,Error,Errors,0,Errors are unrelated. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6727
https://github.com/root-project/root/pull/6727:0,safety,Error,Errors,0,Errors are unrelated. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6727
https://github.com/root-project/root/pull/6727:0,usability,Error,Errors,0,Errors are unrelated. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6727
https://github.com/root-project/root/pull/6728:41,availability,failur,failures,41,"@pcanal , look like this has fixed CMSSW failures. CMSSW ROOT622 IBs (based on v6.22 patches branch + this PR) looks good now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:41,deployability,fail,failures,41,"@pcanal , look like this has fixed CMSSW failures. CMSSW ROOT622 IBs (based on v6.22 patches branch + this PR) looks good now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:85,deployability,patch,patches,85,"@pcanal , look like this has fixed CMSSW failures. CMSSW ROOT622 IBs (based on v6.22 patches branch + this PR) looks good now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:41,performance,failur,failures,41,"@pcanal , look like this has fixed CMSSW failures. CMSSW ROOT622 IBs (based on v6.22 patches branch + this PR) looks good now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:41,reliability,fail,failures,41,"@pcanal , look like this has fixed CMSSW failures. CMSSW ROOT622 IBs (based on v6.22 patches branch + this PR) looks good now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:85,safety,patch,patches,85,"@pcanal , look like this has fixed CMSSW failures. CMSSW ROOT622 IBs (based on v6.22 patches branch + this PR) looks good now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:85,security,patch,patches,85,"@pcanal , look like this has fixed CMSSW failures. CMSSW ROOT622 IBs (based on v6.22 patches branch + this PR) looks good now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:4,availability,failur,failure,4,The failure are unrelated.(or so it seems),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:4,deployability,fail,failure,4,The failure are unrelated.(or so it seems),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:4,performance,failur,failure,4,The failure are unrelated.(or so it seems),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6728:4,reliability,fail,failure,4,The failure are unrelated.(or so it seems),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6728
https://github.com/root-project/root/pull/6729:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:1,deployability,build,build,1,@build just on ROOT-performance-centos8-multicore/default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:20,performance,perform,performance-,20,@build just on ROOT-performance-centos8-multicore/default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:20,usability,perform,performance-,20,@build just on ROOT-performance-centos8-multicore/default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos8-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:0,safety,Test,Test,0,Test will be in an upcoming roottest PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:0,testability,Test,Test,0,Test will be in an upcoming roottest PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:5,availability,failur,failures,5,Test failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:5,deployability,fail,failures,5,Test failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:5,performance,failur,failures,5,Test failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:5,reliability,fail,failures,5,Test failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:0,safety,Test,Test,0,Test failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/pull/6729:0,testability,Test,Test,0,Test failures are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6729
https://github.com/root-project/root/issues/6730:140,modifiability,maintain,maintain,140,"When using `X11.UseXft: no` in $HOME/.rootrc , then all is back to normal. Very good! Could this become default again, then I don't have to maintain a local .rootrc file. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6730
https://github.com/root-project/root/issues/6730:140,safety,maintain,maintain,140,"When using `X11.UseXft: no` in $HOME/.rootrc , then all is back to normal. Very good! Could this become default again, then I don't have to maintain a local .rootrc file. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6730
https://github.com/root-project/root/issues/6730:142,modifiability,maintain,maintain,142,"> When using `X11.UseXft: no` in $HOME/.rootrc , then all is back to normal. Very good! Could this become default again, then I don't have to maintain a local .rootrc file. Thanks. Well, unfortunately no, it's most of the time more convenient to have Xft on, and might only cause trouble when using ssh connection with X11 forwarding",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6730
https://github.com/root-project/root/issues/6730:222,performance,time,time,222,"> When using `X11.UseXft: no` in $HOME/.rootrc , then all is back to normal. Very good! Could this become default again, then I don't have to maintain a local .rootrc file. Thanks. Well, unfortunately no, it's most of the time more convenient to have Xft on, and might only cause trouble when using ssh connection with X11 forwarding",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6730
https://github.com/root-project/root/issues/6730:142,safety,maintain,maintain,142,"> When using `X11.UseXft: no` in $HOME/.rootrc , then all is back to normal. Very good! Could this become default again, then I don't have to maintain a local .rootrc file. Thanks. Well, unfortunately no, it's most of the time more convenient to have Xft on, and might only cause trouble when using ssh connection with X11 forwarding",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6730
https://github.com/root-project/root/issues/6730:299,security,ssh,ssh,299,"> When using `X11.UseXft: no` in $HOME/.rootrc , then all is back to normal. Very good! Could this become default again, then I don't have to maintain a local .rootrc file. Thanks. Well, unfortunately no, it's most of the time more convenient to have Xft on, and might only cause trouble when using ssh connection with X11 forwarding",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6730
https://github.com/root-project/root/pull/6732:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6732
https://github.com/root-project/root/pull/6732:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6732
https://github.com/root-project/root/pull/6732:0,availability,Error,Errors,0,Errors are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6732
https://github.com/root-project/root/pull/6732:0,performance,Error,Errors,0,Errors are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6732
https://github.com/root-project/root/pull/6732:0,safety,Error,Errors,0,Errors are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6732
https://github.com/root-project/root/pull/6732:0,usability,Error,Errors,0,Errors are unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6732
https://github.com/root-project/root/issues/6734:384,deployability,version,versions,384,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:407,energy efficiency,current,current,407,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:87,integrability,buffer,buffers,87,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:384,integrability,version,versions,384,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:552,integrability,buffer,buffer,552,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:206,interoperability,compatib,compatibility,206,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:225,modifiability,concern,concern,225,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:384,modifiability,version,versions,384,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:461,performance,time,time,461,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:225,testability,concern,concern,225,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:69,usability,support,supporting,69,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/issues/6734:415,usability,behavi,behavior,415,"To add my opinion: I think this is quite a central ROOT feature, and supporting larger buffers will become imperative at some point anyway, so I don't see a strong reason to delay such changes. If backward compatibility is a concern, I think it would even be possible (or acceptable for ALICE) to create the file with a special flag or so, such that it cannot be opened with old ROOT versions. At least the current behavior seems very outdated to me. The first time I ran into this 1GB limit, it was actually the last thing I thought of to suspect the buffer size, in particular since the limit is 1 GB not 4 GB.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6734
https://github.com/root-project/root/pull/6738:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:32,deployability,patch,patch,32,"@couet , @agheata , we need the patch urgently - it is blocking for this year CMS plans.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:32,safety,patch,patch,32,"@couet , @agheata , we need the patch urgently - it is blocking for this year CMS plans.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:32,security,patch,patch,32,"@couet , @agheata , we need the patch urgently - it is blocking for this year CMS plans.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:82,testability,plan,plans,82,"@couet , @agheata , we need the patch urgently - it is blocking for this year CMS plans.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:95,availability,failur,failure,95,@mrodozov please fork also [roottest](https://github.com/root-project/roottest) to avoid build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:89,deployability,build,build,89,@mrodozov please fork also [roottest](https://github.com/root-project/roottest) to avoid build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:95,deployability,fail,failure,95,@mrodozov please fork also [roottest](https://github.com/root-project/roottest) to avoid build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:95,performance,failur,failure,95,@mrodozov please fork also [roottest](https://github.com/root-project/roottest) to avoid build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:95,reliability,fail,failure,95,@mrodozov please fork also [roottest](https://github.com/root-project/roottest) to avoid build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6738:83,safety,avoid,avoid,83,@mrodozov please fork also [roottest](https://github.com/root-project/roottest) to avoid build failure on `windows10/cxx14`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6738
https://github.com/root-project/root/pull/6739:56,availability,Error,Error,56,Windows and most of other platforms are fine - merging. Error on `mac1015/cxx17` has nothing to do with PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6739
https://github.com/root-project/root/pull/6739:26,interoperability,platform,platforms,26,Windows and most of other platforms are fine - merging. Error on `mac1015/cxx17` has nothing to do with PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6739
https://github.com/root-project/root/pull/6739:56,performance,Error,Error,56,Windows and most of other platforms are fine - merging. Error on `mac1015/cxx17` has nothing to do with PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6739
https://github.com/root-project/root/pull/6739:56,safety,Error,Error,56,Windows and most of other platforms are fine - merging. Error on `mac1015/cxx17` has nothing to do with PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6739
https://github.com/root-project/root/pull/6739:56,usability,Error,Error,56,Windows and most of other platforms are fine - merging. Error on `mac1015/cxx17` has nothing to do with PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6739
https://github.com/root-project/root/pull/6740:71,energy efficiency,reduc,reduce,71,"Hi @pcanal ,. this is quite a simple PR, would you have a look just to reduce the number of pull requests... Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:30,testability,simpl,simple,30,"Hi @pcanal ,. this is quite a simple PR, would you have a look just to reduce the number of pull requests... Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:30,usability,simpl,simple,30,"Hi @pcanal ,. this is quite a simple PR, would you have a look just to reduce the number of pull requests... Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:27,deployability,updat,updated,27,"Hi @pcanal ,. thanks! I've updated the `Print` function. The type conversion is not perfect there, it is an improvement to some extend. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:66,interoperability,convers,conversion,66,"Hi @pcanal ,. thanks! I've updated the `Print` function. The type conversion is not perfect there, it is an improvement to some extend. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:128,modifiability,exten,extend,128,"Hi @pcanal ,. thanks! I've updated the `Print` function. The type conversion is not perfect there, it is an improvement to some extend. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:27,safety,updat,updated,27,"Hi @pcanal ,. thanks! I've updated the `Print` function. The type conversion is not perfect there, it is an improvement to some extend. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:27,security,updat,updated,27,"Hi @pcanal ,. thanks! I've updated the `Print` function. The type conversion is not perfect there, it is an improvement to some extend. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:29,interoperability,format,format,29,Can you also check the Print format they looks off.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:22,availability,fault,fault,22,"Hi @pcanal ,. yes, my fault. ``5d`` -> ``5ld``. The others should be ok. Hopefully haven't overlooked any other places. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:22,energy efficiency,fault,fault,22,"Hi @pcanal ,. yes, my fault. ``5d`` -> ``5ld``. The others should be ok. Hopefully haven't overlooked any other places. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:22,performance,fault,fault,22,"Hi @pcanal ,. yes, my fault. ``5d`` -> ``5ld``. The others should be ok. Hopefully haven't overlooked any other places. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:22,reliability,fault,fault,22,"Hi @pcanal ,. yes, my fault. ``5d`` -> ``5ld``. The others should be ok. Hopefully haven't overlooked any other places. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:22,safety,fault,fault,22,"Hi @pcanal ,. yes, my fault. ``5d`` -> ``5ld``. The others should be ok. Hopefully haven't overlooked any other places. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:4,availability,failur,failures,4,The failures are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:4,deployability,fail,failures,4,The failures are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:4,performance,failur,failures,4,The failures are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/pull/6740:4,reliability,fail,failures,4,The failures are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6740
https://github.com/root-project/root/issues/6741:180,deployability,contain,contains,180,"The root cause is that, for generality, when reading from file we always read `TTrees` via `TChain`, and although the `TTree` object read from file has a friend, the `TChain` that contains it does not: . ```cpp . TChain c; . c.Add(""f.root/t1""); . c.LoadTree(0); . std::cout << c.GetListOfFriends() << '\n'; // prints 0 . std::cout << c.GetTree()->GetListOfFriends() << '\n'; // prints a valid address . ```. @pcanal is this behavior of TChain intentional? Could it instead return the list of friends of its only TTree in this scenario? EDIT: note an inconsistency: `chain.GetListOfFriends()` is null, but `chain.FindBranch(""t2.x"")` does return the friend's branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:249,energy efficiency,Load,LoadTree,249,"The root cause is that, for generality, when reading from file we always read `TTrees` via `TChain`, and although the `TTree` object read from file has a friend, the `TChain` that contains it does not: . ```cpp . TChain c; . c.Add(""f.root/t1""); . c.LoadTree(0); . std::cout << c.GetListOfFriends() << '\n'; // prints 0 . std::cout << c.GetTree()->GetListOfFriends() << '\n'; // prints a valid address . ```. @pcanal is this behavior of TChain intentional? Could it instead return the list of friends of its only TTree in this scenario? EDIT: note an inconsistency: `chain.GetListOfFriends()` is null, but `chain.FindBranch(""t2.x"")` does return the friend's branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:526,modifiability,scenario,scenario,526,"The root cause is that, for generality, when reading from file we always read `TTrees` via `TChain`, and although the `TTree` object read from file has a friend, the `TChain` that contains it does not: . ```cpp . TChain c; . c.Add(""f.root/t1""); . c.LoadTree(0); . std::cout << c.GetListOfFriends() << '\n'; // prints 0 . std::cout << c.GetTree()->GetListOfFriends() << '\n'; // prints a valid address . ```. @pcanal is this behavior of TChain intentional? Could it instead return the list of friends of its only TTree in this scenario? EDIT: note an inconsistency: `chain.GetListOfFriends()` is null, but `chain.FindBranch(""t2.x"")` does return the friend's branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:249,performance,Load,LoadTree,249,"The root cause is that, for generality, when reading from file we always read `TTrees` via `TChain`, and although the `TTree` object read from file has a friend, the `TChain` that contains it does not: . ```cpp . TChain c; . c.Add(""f.root/t1""); . c.LoadTree(0); . std::cout << c.GetListOfFriends() << '\n'; // prints 0 . std::cout << c.GetTree()->GetListOfFriends() << '\n'; // prints a valid address . ```. @pcanal is this behavior of TChain intentional? Could it instead return the list of friends of its only TTree in this scenario? EDIT: note an inconsistency: `chain.GetListOfFriends()` is null, but `chain.FindBranch(""t2.x"")` does return the friend's branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:192,reliability,doe,does,192,"The root cause is that, for generality, when reading from file we always read `TTrees` via `TChain`, and although the `TTree` object read from file has a friend, the `TChain` that contains it does not: . ```cpp . TChain c; . c.Add(""f.root/t1""); . c.LoadTree(0); . std::cout << c.GetListOfFriends() << '\n'; // prints 0 . std::cout << c.GetTree()->GetListOfFriends() << '\n'; // prints a valid address . ```. @pcanal is this behavior of TChain intentional? Could it instead return the list of friends of its only TTree in this scenario? EDIT: note an inconsistency: `chain.GetListOfFriends()` is null, but `chain.FindBranch(""t2.x"")` does return the friend's branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:632,reliability,doe,does,632,"The root cause is that, for generality, when reading from file we always read `TTrees` via `TChain`, and although the `TTree` object read from file has a friend, the `TChain` that contains it does not: . ```cpp . TChain c; . c.Add(""f.root/t1""); . c.LoadTree(0); . std::cout << c.GetListOfFriends() << '\n'; // prints 0 . std::cout << c.GetTree()->GetListOfFriends() << '\n'; // prints a valid address . ```. @pcanal is this behavior of TChain intentional? Could it instead return the list of friends of its only TTree in this scenario? EDIT: note an inconsistency: `chain.GetListOfFriends()` is null, but `chain.FindBranch(""t2.x"")` does return the friend's branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:387,safety,valid,valid,387,"The root cause is that, for generality, when reading from file we always read `TTrees` via `TChain`, and although the `TTree` object read from file has a friend, the `TChain` that contains it does not: . ```cpp . TChain c; . c.Add(""f.root/t1""); . c.LoadTree(0); . std::cout << c.GetListOfFriends() << '\n'; // prints 0 . std::cout << c.GetTree()->GetListOfFriends() << '\n'; // prints a valid address . ```. @pcanal is this behavior of TChain intentional? Could it instead return the list of friends of its only TTree in this scenario? EDIT: note an inconsistency: `chain.GetListOfFriends()` is null, but `chain.FindBranch(""t2.x"")` does return the friend's branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:424,usability,behavi,behavior,424,"The root cause is that, for generality, when reading from file we always read `TTrees` via `TChain`, and although the `TTree` object read from file has a friend, the `TChain` that contains it does not: . ```cpp . TChain c; . c.Add(""f.root/t1""); . c.LoadTree(0); . std::cout << c.GetListOfFriends() << '\n'; // prints 0 . std::cout << c.GetTree()->GetListOfFriends() << '\n'; // prints a valid address . ```. @pcanal is this behavior of TChain intentional? Could it instead return the list of friends of its only TTree in this scenario? EDIT: note an inconsistency: `chain.GetListOfFriends()` is null, but `chain.FindBranch(""t2.x"")` does return the friend's branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:157,deployability,infrastructur,infrastructure,157,"Yes this is the intentional behavior. Only the TTree list of friends is relevant per se because the friend could be from the TChain or from the TTree. (Only infrastructure code that might need to do something 'different' in case the friend in chain wide, should worry about the TChain's list of friend). > but chain.FindBranch(""t2.x"") does return the friend's . By definition the Branch is TTree specific so indeed it will find something.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:396,interoperability,specif,specific,396,"Yes this is the intentional behavior. Only the TTree list of friends is relevant per se because the friend could be from the TChain or from the TTree. (Only infrastructure code that might need to do something 'different' in case the friend in chain wide, should worry about the TChain's list of friend). > but chain.FindBranch(""t2.x"") does return the friend's . By definition the Branch is TTree specific so indeed it will find something.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:335,reliability,doe,does,335,"Yes this is the intentional behavior. Only the TTree list of friends is relevant per se because the friend could be from the TChain or from the TTree. (Only infrastructure code that might need to do something 'different' in case the friend in chain wide, should worry about the TChain's list of friend). > but chain.FindBranch(""t2.x"") does return the friend's . By definition the Branch is TTree specific so indeed it will find something.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:28,usability,behavi,behavior,28,"Yes this is the intentional behavior. Only the TTree list of friends is relevant per se because the friend could be from the TChain or from the TTree. (Only infrastructure code that might need to do something 'different' in case the friend in chain wide, should worry about the TChain's list of friend). > but chain.FindBranch(""t2.x"") does return the friend's . By definition the Branch is TTree specific so indeed it will find something.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:78,deployability,build,builds,78,"Thanks @pcanal , does this mean that the following line, in the RDF code that builds the list of all possible valid branch names, should be `t.GetTree()->GetListOfFriends()` instead of `t.GetListOfFriends()`? (`t` is almost always a `TChain`). https://github.com/root-project/root/blob/5961bdd1fbd2773b052ede308ed7c55040b809d2/tree/dataframe/src/RDFInterfaceUtils.cxx#L319",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:17,reliability,doe,does,17,"Thanks @pcanal , does this mean that the following line, in the RDF code that builds the list of all possible valid branch names, should be `t.GetTree()->GetListOfFriends()` instead of `t.GetListOfFriends()`? (`t` is almost always a `TChain`). https://github.com/root-project/root/blob/5961bdd1fbd2773b052ede308ed7c55040b809d2/tree/dataframe/src/RDFInterfaceUtils.cxx#L319",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:110,safety,valid,valid,110,"Thanks @pcanal , does this mean that the following line, in the RDF code that builds the list of all possible valid branch names, should be `t.GetTree()->GetListOfFriends()` instead of `t.GetListOfFriends()`? (`t` is almost always a `TChain`). https://github.com/root-project/root/blob/5961bdd1fbd2773b052ede308ed7c55040b809d2/tree/dataframe/src/RDFInterfaceUtils.cxx#L319",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:124,energy efficiency,Load,LoadTree,124,"> should be t.GetTree()->GetListOfFriends() instead of t.GetListOfFriends()? (t is almost always a TChain). Yes, as long as LoadTree have been already called. Note that this syntax will work for both TChain and TTree object.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:124,performance,Load,LoadTree,124,"> should be t.GetTree()->GetListOfFriends() instead of t.GetListOfFriends()? (t is almost always a TChain). Yes, as long as LoadTree have been already called. Note that this syntax will work for both TChain and TTree object.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6741:167,modifiability,scenario,scenario,167,"The RDF part should be fixed in https://github.com/root-project/root/compare/master...eguiraud:df_autofriends , but TTreeReader seems to also have a problem with this scenario (see issue linked above).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6741
https://github.com/root-project/root/issues/6746:117,usability,user,user-images,117,A WIP can be found [here](https://github.com/stwunsch/root/tree/df-tut-sys) using df106 as baseline:. ![sys](https://user-images.githubusercontent.com/6951222/98359428-82ca2a80-2028-11eb-8d47-1939fa03921f.png).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6746
https://github.com/root-project/root/issues/6746:14,deployability,continu,continue,14,Possibly also continue/finish work from https://github.com/root-project/root/pull/11200,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6746
https://github.com/root-project/root/pull/6747:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6747
https://github.com/root-project/root/pull/6747:0,availability,Failur,Failures,0,"Failures were caused by infrastructure, repaired. Merging despite that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6747
https://github.com/root-project/root/pull/6747:40,availability,repair,repaired,40,"Failures were caused by infrastructure, repaired. Merging despite that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6747
https://github.com/root-project/root/pull/6747:0,deployability,Fail,Failures,0,"Failures were caused by infrastructure, repaired. Merging despite that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6747
https://github.com/root-project/root/pull/6747:24,deployability,infrastructur,infrastructure,24,"Failures were caused by infrastructure, repaired. Merging despite that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6747
https://github.com/root-project/root/pull/6747:0,performance,Failur,Failures,0,"Failures were caused by infrastructure, repaired. Merging despite that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6747
https://github.com/root-project/root/pull/6747:0,reliability,Fail,Failures,0,"Failures were caused by infrastructure, repaired. Merging despite that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6747
https://github.com/root-project/root/pull/6747:40,reliability,repair,repaired,40,"Failures were caused by infrastructure, repaired. Merging despite that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6747
https://github.com/root-project/root/pull/6749:218,availability,redund,redundant,218,"Humm ... I don't see why those would help. In all the case the pattern seems to be similar to:. ```. while (obj) . { use obj; }. ```. being replace by. ```. while (obj) . if (obj) { use obj; }. ```. where the if seems redundant with the while, what am I missing? Note that:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. delete H;. L->Dump();//NPD. ```. If the TList is not registered (directly or indirectly) with the least of cleanup is (per C++ rules) undefined behavior seems the collection seems contains a reference to the collection. The right pattern is either:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. or . ```. TList* L= new TList();. gROOT->GetListOfCleanups()->Add(L);. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. What was the original problem that lead you to this reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:218,deployability,redundan,redundant,218,"Humm ... I don't see why those would help. In all the case the pattern seems to be similar to:. ```. while (obj) . { use obj; }. ```. being replace by. ```. while (obj) . if (obj) { use obj; }. ```. where the if seems redundant with the while, what am I missing? Note that:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. delete H;. L->Dump();//NPD. ```. If the TList is not registered (directly or indirectly) with the least of cleanup is (per C++ rules) undefined behavior seems the collection seems contains a reference to the collection. The right pattern is either:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. or . ```. TList* L= new TList();. gROOT->GetListOfCleanups()->Add(L);. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. What was the original problem that lead you to this reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:534,deployability,contain,contains,534,"Humm ... I don't see why those would help. In all the case the pattern seems to be similar to:. ```. while (obj) . { use obj; }. ```. being replace by. ```. while (obj) . if (obj) { use obj; }. ```. where the if seems redundant with the while, what am I missing? Note that:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. delete H;. L->Dump();//NPD. ```. If the TList is not registered (directly or indirectly) with the least of cleanup is (per C++ rules) undefined behavior seems the collection seems contains a reference to the collection. The right pattern is either:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. or . ```. TList* L= new TList();. gROOT->GetListOfCleanups()->Add(L);. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. What was the original problem that lead you to this reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:218,reliability,redundan,redundant,218,"Humm ... I don't see why those would help. In all the case the pattern seems to be similar to:. ```. while (obj) . { use obj; }. ```. being replace by. ```. while (obj) . if (obj) { use obj; }. ```. where the if seems redundant with the while, what am I missing? Note that:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. delete H;. L->Dump();//NPD. ```. If the TList is not registered (directly or indirectly) with the least of cleanup is (per C++ rules) undefined behavior seems the collection seems contains a reference to the collection. The right pattern is either:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. or . ```. TList* L= new TList();. gROOT->GetListOfCleanups()->Add(L);. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. What was the original problem that lead you to this reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:218,safety,redund,redundant,218,"Humm ... I don't see why those would help. In all the case the pattern seems to be similar to:. ```. while (obj) . { use obj; }. ```. being replace by. ```. while (obj) . if (obj) { use obj; }. ```. where the if seems redundant with the while, what am I missing? Note that:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. delete H;. L->Dump();//NPD. ```. If the TList is not registered (directly or indirectly) with the least of cleanup is (per C++ rules) undefined behavior seems the collection seems contains a reference to the collection. The right pattern is either:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. or . ```. TList* L= new TList();. gROOT->GetListOfCleanups()->Add(L);. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. What was the original problem that lead you to this reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:37,usability,help,help,37,"Humm ... I don't see why those would help. In all the case the pattern seems to be similar to:. ```. while (obj) . { use obj; }. ```. being replace by. ```. while (obj) . if (obj) { use obj; }. ```. where the if seems redundant with the while, what am I missing? Note that:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. delete H;. L->Dump();//NPD. ```. If the TList is not registered (directly or indirectly) with the least of cleanup is (per C++ rules) undefined behavior seems the collection seems contains a reference to the collection. The right pattern is either:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. or . ```. TList* L= new TList();. gROOT->GetListOfCleanups()->Add(L);. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. What was the original problem that lead you to this reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:498,usability,behavi,behavior,498,"Humm ... I don't see why those would help. In all the case the pattern seems to be similar to:. ```. while (obj) . { use obj; }. ```. being replace by. ```. while (obj) . if (obj) { use obj; }. ```. where the if seems redundant with the while, what am I missing? Note that:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. delete H;. L->Dump();//NPD. ```. If the TList is not registered (directly or indirectly) with the least of cleanup is (per C++ rules) undefined behavior seems the collection seems contains a reference to the collection. The right pattern is either:. ```. TList* L= new TList();. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. or . ```. TList* L= new TList();. gROOT->GetListOfCleanups()->Add(L);. TH1F* H= new TH1F();. L->Add(H);. L->Dump();//OK. L->Remove(H);. delete H;. L->Dump();//NPD. ```. What was the original problem that lead you to this reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:481,integrability,event,event,481,"Hi @pcanal ,. 1). > I don't see why those would help. ... being replace by. ```. while (obj) . if (obj) { use obj; }. ```. Oh. You are right. Shame on me. Then I have to find out why do I get these crashes in TCollection. . 2) But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? > What was the original problem that lead you to this reproducer? The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > The right pattern is either: ... Yes, but I have to debug what is already written. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:512,performance,time,time,512,"Hi @pcanal ,. 1). > I don't see why those would help. ... being replace by. ```. while (obj) . if (obj) { use obj; }. ```. Oh. You are right. Shame on me. Then I have to find out why do I get these crashes in TCollection. . 2) But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? > What was the original problem that lead you to this reproducer? The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > The right pattern is either: ... Yes, but I have to debug what is already written. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:598,performance,time,time,598,"Hi @pcanal ,. 1). > I don't see why those would help. ... being replace by. ```. while (obj) . if (obj) { use obj; }. ```. Oh. You are right. Shame on me. Then I have to find out why do I get these crashes in TCollection. . 2) But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? > What was the original problem that lead you to this reproducer? The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > The right pattern is either: ... Yes, but I have to debug what is already written. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:231,reliability,doe,does,231,"Hi @pcanal ,. 1). > I don't see why those would help. ... being replace by. ```. while (obj) . if (obj) { use obj; }. ```. Oh. You are right. Shame on me. Then I have to find out why do I get these crashes in TCollection. . 2) But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? > What was the original problem that lead you to this reproducer? The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > The right pattern is either: ... Yes, but I have to debug what is already written. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:375,safety,safe,safely,375,"Hi @pcanal ,. 1). > I don't see why those would help. ... being replace by. ```. while (obj) . if (obj) { use obj; }. ```. Oh. You are right. Shame on me. Then I have to find out why do I get these crashes in TCollection. . 2) But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? > What was the original problem that lead you to this reproducer? The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > The right pattern is either: ... Yes, but I have to debug what is already written. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:48,usability,help,help,48,"Hi @pcanal ,. 1). > I don't see why those would help. ... being replace by. ```. while (obj) . if (obj) { use obj; }. ```. Oh. You are right. Shame on me. Then I have to find out why do I get these crashes in TCollection. . 2) But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? > What was the original problem that lead you to this reproducer? The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > The right pattern is either: ... Yes, but I have to debug what is already written. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:507,deployability,updat,updated,507,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:536,deployability,contain,contained,536,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:614,deployability,updat,update,614,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:24,integrability,event,event,24,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:725,integrability,event,event,725,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:457,modifiability,variab,variable,457,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:55,performance,time,time,55,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:141,performance,time,time,141,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:153,reliability,doe,does,153,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:297,safety,safe,safely,297,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:507,safety,updat,updated,507,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:614,safety,updat,update,614,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:507,security,updat,updated,507,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:614,security,updat,update,614,"> The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them? That's correct. Unless you use the (newish) smart pointers **\*any\*** collection (i.e. also std::vector of pointers for example) or even any variable or data member that is a pointer must be updated whenever the pointee/contained objects is deleted (the list of cleanups is one mechanism to do the update indirectly). Since this problem (might) involve use of delete objects, I recommend that you running the event display under valgrind (```valgrind --suppressions=$ROOTSYS/etc/valgrind-root.supp name_of_executable .....```) which should be able to pin point where the object is deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:134,integrability,event,event,134,"Hi @pcanal ,. > *any* collection. Yes, after thinking a bit I've realized it as well. . > valgrind. It would be a next step after the event display will be able to proces a significant number of events and actions with them without segfaults and FPEs. > /etc/valgrind-root.supp . Great! Thank you for this information. This will be very useful. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:195,integrability,event,events,195,"Hi @pcanal ,. > *any* collection. Yes, after thinking a bit I've realized it as well. . > valgrind. It would be a next step after the event display will be able to proces a significant number of events and actions with them without segfaults and FPEs. > /etc/valgrind-root.supp . Great! Thank you for this information. This will be very useful. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6749:173,security,sign,significant,173,"Hi @pcanal ,. > *any* collection. Yes, after thinking a bit I've realized it as well. . > valgrind. It would be a next step after the event display will be able to proces a significant number of events and actions with them without segfaults and FPEs. > /etc/valgrind-root.supp . Great! Thank you for this information. This will be very useful. . Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6749
https://github.com/root-project/root/pull/6750:27,deployability,build,build,27,"Since we removed the Ninja build on Windows, the issue we need to solve right now is how to fix the failing Cling tests on Windows - https://github.com/reikdas/cling-1/runs/1353774432?check_suite_focus=true#step:7:9589. I tried to fix it via https://github.com/root-project/root/pull/6750/commits/21ffc04f200086da7c6127cccac3b4e18081eff0 but that did not work :( .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:100,deployability,fail,failing,100,"Since we removed the Ninja build on Windows, the issue we need to solve right now is how to fix the failing Cling tests on Windows - https://github.com/reikdas/cling-1/runs/1353774432?check_suite_focus=true#step:7:9589. I tried to fix it via https://github.com/root-project/root/pull/6750/commits/21ffc04f200086da7c6127cccac3b4e18081eff0 but that did not work :( .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:100,reliability,fail,failing,100,"Since we removed the Ninja build on Windows, the issue we need to solve right now is how to fix the failing Cling tests on Windows - https://github.com/reikdas/cling-1/runs/1353774432?check_suite_focus=true#step:7:9589. I tried to fix it via https://github.com/root-project/root/pull/6750/commits/21ffc04f200086da7c6127cccac3b4e18081eff0 but that did not work :( .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:114,safety,test,tests,114,"Since we removed the Ninja build on Windows, the issue we need to solve right now is how to fix the failing Cling tests on Windows - https://github.com/reikdas/cling-1/runs/1353774432?check_suite_focus=true#step:7:9589. I tried to fix it via https://github.com/root-project/root/pull/6750/commits/21ffc04f200086da7c6127cccac3b4e18081eff0 but that did not work :( .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:114,testability,test,tests,114,"Since we removed the Ninja build on Windows, the issue we need to solve right now is how to fix the failing Cling tests on Windows - https://github.com/reikdas/cling-1/runs/1353774432?check_suite_focus=true#step:7:9589. I tried to fix it via https://github.com/root-project/root/pull/6750/commits/21ffc04f200086da7c6127cccac3b4e18081eff0 but that did not work :( .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:16,deployability,build,build,16,"We have Windows build on the CI every time now, dunno why this PR is needed! In case I'm wrong, feel free to reopen it :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:38,performance,time,time,38,"We have Windows build on the CI every time now, dunno why this PR is needed! In case I'm wrong, feel free to reopen it :slightly_smiling_face:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:24,interoperability,specif,specific,24,This is about the Cling specific CI. @vgvassilev do you want to review this PR or to close it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:64,safety,review,review,64,This is about the Cling specific CI. @vgvassilev do you want to review this PR or to close it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:64,testability,review,review,64,This is about the Cling specific CI. @vgvassilev do you want to review this PR or to close it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6750:85,usability,close,close,85,This is about the Cling specific CI. @vgvassilev do you want to review this PR or to close it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6750
https://github.com/root-project/root/pull/6751:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6751
https://github.com/root-project/root/pull/6752:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6752
https://github.com/root-project/root/issues/6753:59,deployability,build,builds,59,"Hi @Axel-Naumann ,. do I understand correctly that Python2 builds need no change while we can/want to make this change for Python3 builds independently of the target platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6753
https://github.com/root-project/root/issues/6753:131,deployability,build,builds,131,"Hi @Axel-Naumann ,. do I understand correctly that Python2 builds need no change while we can/want to make this change for Python3 builds independently of the target platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6753
https://github.com/root-project/root/issues/6753:166,interoperability,platform,platform,166,"Hi @Axel-Naumann ,. do I understand correctly that Python2 builds need no change while we can/want to make this change for Python3 builds independently of the target platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6753
https://github.com/root-project/root/issues/6753:25,testability,understand,understand,25,"Hi @Axel-Naumann ,. do I understand correctly that Python2 builds need no change while we can/want to make this change for Python3 builds independently of the target platform?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6753
https://github.com/root-project/root/issues/6753:46,deployability,build,build,46,"This issue means that on macOS, people cannot build against the Xcode-provided Python3. I'd say that's fine for 6.24/00 - we should provide this ability at *some* point. So far I haven't see user complaints on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6753
https://github.com/root-project/root/issues/6753:196,safety,compl,complaints,196,"This issue means that on macOS, people cannot build against the Xcode-provided Python3. I'd say that's fine for 6.24/00 - we should provide this ability at *some* point. So far I haven't see user complaints on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6753
https://github.com/root-project/root/issues/6753:196,security,compl,complaints,196,"This issue means that on macOS, people cannot build against the Xcode-provided Python3. I'd say that's fine for 6.24/00 - we should provide this ability at *some* point. So far I haven't see user complaints on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6753
https://github.com/root-project/root/issues/6753:191,usability,user,user,191,"This issue means that on macOS, people cannot build against the Xcode-provided Python3. I'd say that's fine for 6.24/00 - we should provide this ability at *some* point. So far I haven't see user complaints on this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6753
https://github.com/root-project/root/issues/6753:30,usability,support,support,30,"Easy to do, now that we don't support Python 2 anymore!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6753
https://github.com/root-project/root/pull/6754:317,deployability,scale,scale,317,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:395,deployability,scale,scale,395,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:565,deployability,scale,scale,565,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:317,energy efficiency,scale,scale,317,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:395,energy efficiency,scale,scale,395,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:565,energy efficiency,scale,scale,565,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:317,modifiability,scal,scale,317,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:395,modifiability,scal,scale,395,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:565,modifiability,scal,scale,565,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:317,performance,scale,scale,317,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:395,performance,scale,scale,395,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:565,performance,scale,scale,565,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:117,safety,avoid,avoid,117,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6? The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to. ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case. But if the width by some miracle is 1e-6, then the value of `scale` could be big,. but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/pull/6754:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6754
https://github.com/root-project/root/issues/6755:254,energy efficiency,Draw,Draw,254,"![epsilon](https://user-images.githubusercontent.com/73939381/98112083-dc541d00-1ea1-11eb-8123-a9bd5939aba2.png). ```. (new TLatex(0.1, 0.1, #alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""))->Draw(). (new TLatex(0.1, 0.3, ""#epsilon""))->Draw(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:298,energy efficiency,Draw,Draw,298,"![epsilon](https://user-images.githubusercontent.com/73939381/98112083-dc541d00-1ea1-11eb-8123-a9bd5939aba2.png). ```. (new TLatex(0.1, 0.1, #alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""))->Draw(). (new TLatex(0.1, 0.3, ""#epsilon""))->Draw(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:19,usability,user,user-images,19,"![epsilon](https://user-images.githubusercontent.com/73939381/98112083-dc541d00-1ea1-11eb-8123-a9bd5939aba2.png). ```. (new TLatex(0.1, 0.1, #alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""))->Draw(). (new TLatex(0.1, 0.3, ""#epsilon""))->Draw(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:9,usability,behavi,behaviour,9,The same behaviour appears with `#oplus`. Using `\u2295` is a workaround.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:66,reliability,doe,doesn,66,I just tried. For me `#oplus` works fine with OpenGL and `\u2295` doesn't.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:958,availability,fault,fault,958,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:288,energy efficiency,Draw,DrawLatex,288,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:423,energy efficiency,Draw,DrawLatex,423,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:458,energy efficiency,Draw,DrawLatex,458,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:491,energy efficiency,Draw,DrawLatex,491,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:524,energy efficiency,Draw,DrawLatex,524,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:577,energy efficiency,Draw,DrawLatex,577,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:958,energy efficiency,fault,fault,958,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:958,performance,fault,fault,958,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:958,reliability,fault,fault,958,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:958,safety,fault,fault,958,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:223,security,session,session,223,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/issues/6755:206,usability,interact,interactive,206,"Hm, ok, here is more info then:. ### Environment. OS: Ubuntu 22.04.3 LTS. ROOT 6.30.2 from conda-forge (py311h320fe9a_0). ### To reproduce. 1. Create `~/.rootrc` and add `OpenGL.CanvasPreferGL: 1`. 2. Open interactive root session and enter line by line:. ```cxx. TCanvas c; TLatex l;. l.DrawLatex(0.1, 0.1, ""#alpha#beta#gamma#delta#zeta#eta#theta#iota#kappa#lambda#mu#nu#xi#pi#rho#sigma#tau#upsilon#phi#chi#psi#omega""). l.DrawLatex(0.1, 0.2, ""#epsilon""). l.DrawLatex(0.1, 0.3, ""#oplus""). l.DrawLatex(0.1, 0.4, ""\u2295""). l.DrawLatex(0.1, 0.5, ""Detault text for reference""). l.DrawLatex(0.1, 0.6, ""#nabla #leq #geq #exists #spade #oright #Box #prod #otimes #copyright #angle""). ```. ### Output. ![image](https://github.com/root-project/root/assets/28848011/919b5877-9588-43d6-8343-93900fc44f4b). So judging from the line at `y=0.6`, the bug affects even more characters than `#epsilon` and `#oplus` --- `#nambla`, `#copyright`, ... Occasionally segmentation fault happens when entering ""bad"" characters. ### Expected output. Reproduced without `OpenGL.CanvasPreferGL: 1`. ![image](https://github.com/root-project/root/assets/28848011/5a2cbd6f-a3b1-4f3f-8039-61fbe50d2593).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6755
https://github.com/root-project/root/pull/6757:11,deployability,build,build,11,@phsft-bot build just on mac10beta/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6757
https://github.com/root-project/root/pull/6757:11,deployability,build,build,11,@phsft-bot build just on mac10beta/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6757
https://github.com/root-project/root/pull/6757:11,deployability,build,build,11,@phsft-bot build just on mac10beta/cxx17,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6757
https://github.com/root-project/root/issues/6758:65,availability,error,error,65,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:185,availability,error,error,185,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:291,availability,error,error,291,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:400,availability,error,error,400,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:520,availability,error,error,520,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:625,availability,error,error,625,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:65,performance,error,error,65,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:185,performance,error,error,185,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:291,performance,error,error,291,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:400,performance,error,error,400,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:520,performance,error,error,520,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:625,performance,error,error,625,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:65,safety,error,error,65,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:185,safety,error,error,185,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:291,safety,error,error,291,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:400,safety,error,error,400,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:520,safety,error,error,520,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:625,safety,error,error,625,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:65,usability,error,error,65,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:185,usability,error,error,185,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:291,usability,error,error,291,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:400,usability,error,error,400,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:520,usability,error,error,520,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:625,usability,error,error,625,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:778,usability,close,closed,778,I cannot reproduce the issue any more:. ```cpp. frame.cxx:22:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:25:10: error: no member named '__control' in 'fenv_t'. fenv.__control &= ~new_excepts;. ~~~~ ^. frame.cxx:26:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr &= ~(new_excepts << 7);. ~~~~ ^. frame.cxx:41:24: error: no member named '__control' in 'fenv_t'. old_excepts = fenv.__control & FE_ALL_EXCEPT;. ~~~~ ^. frame.cxx:44:10: error: no member named '__control' in 'fenv_t'. fenv.__control |= new_excepts;. ~~~~ ^. frame.cxx:45:10: error: no member named '__mxcsr' in 'fenv_t'. fenv.__mxcsr |= new_excepts << 7;. ```. Perhaps was this also fixed upstream by Apple and the issue can be closed @couet ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:307,deployability,Version,Versions,307,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:416,deployability,Version,Versions,416,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:551,deployability,Version,Versions,551,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:694,deployability,Version,Versions,694,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:307,integrability,Version,Versions,307,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:416,integrability,Version,Versions,416,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:551,integrability,Version,Versions,551,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:694,integrability,Version,Versions,694,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:307,modifiability,Version,Versions,307,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:416,modifiability,Version,Versions,416,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:551,modifiability,Version,Versions,551,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:694,modifiability,Version,Versions,694,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:618,performance,content,contentView,618,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:145,safety,except,exception,145,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:789,usability,User,Users,789,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:935,usability,User,Users,935,"On my macbook I see that:. ```. % c++ $(root-config --cflags --glibs) -g -O1 frame.cxx -o frame.exe. % ./frame.exe. *** Break *** floating point exception. [/usr/lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:1159,usability,User,Users,1159,"lib/system/libsystem_platform.dylib] _sigtramp (no debug info). [<unknown binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) (no debug info). [/Users/couet/roottest/frame.exe] main /Users/couet/roottest/frame.cxx:81. [/usr/lib/dyl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:1380,usability,User,Users,1380,"wn binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) (no debug info). [/Users/couet/roottest/frame.exe] main /Users/couet/roottest/frame.cxx:81. [/usr/lib/dyld] start (no debug info). ```. May be Timur can say something about it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:1597,usability,User,Users,1597,"wn binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) (no debug info). [/Users/couet/roottest/frame.exe] main /Users/couet/roottest/frame.cxx:81. [/usr/lib/dyld] start (no debug info). ```. May be Timur can say something about it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:1753,usability,User,Users,1753,"wn binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) (no debug info). [/Users/couet/roottest/frame.exe] main /Users/couet/roottest/frame.cxx:81. [/usr/lib/dyld] start (no debug info). ```. May be Timur can say something about it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:1927,usability,User,Users,1927,"wn binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) (no debug info). [/Users/couet/roottest/frame.exe] main /Users/couet/roottest/frame.cxx:81. [/usr/lib/dyld] start (no debug info). ```. May be Timur can say something about it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:2076,usability,User,Users,2076,"wn binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) (no debug info). [/Users/couet/roottest/frame.exe] main /Users/couet/roottest/frame.cxx:81. [/usr/lib/dyld] start (no debug info). ```. May be Timur can say something about it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/issues/6758:2114,usability,User,Users,2114,"wn binary>] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] NSWindowResolvedScaleFactor (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _commonInitFrame:styleMask:backing:defer:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow _initContent:styleMask:backing:defer:contentView:] (no debug info). [/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit] -[NSWindow initWithContentRect:styleMask:backing:defer:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] -[QuartzWindow initWithContentRect:styleMask:backing:defer:windowAttributes:] (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] ROOT::MacOSX::X11::CreateTopLevelWindow(int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGCocoa.so] TGCocoa::CreateWindow(unsigned long, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGWindow::TGWindow(TGWindow const*, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, void*, SetWindowAttributes_t*, unsigned int) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGFrame::TGFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGCompositeFrame::TGCompositeFrame(TGWindow const*, unsigned int, unsigned int, unsigned int, unsigned long) (no debug info). [/Users/couet/git/couet-root-bin/lib/libGui.so] TGMainFrame::TGMainFrame(TGWindow const*, unsigned int, unsigned int, unsigned int) (no debug info). [/Users/couet/roottest/frame.exe] main /Users/couet/roottest/frame.cxx:81. [/usr/lib/dyld] start (no debug info). ```. May be Timur can say something about it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/6758
https://github.com/root-project/root/pull/6761:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6761:77,availability,operat,operator,77,"Actually investigating in more detail I think the reason that the assignment operator is private is because the base class MnApplication has a data member a const reference to the FCNBase object and it cannot be copied. . However, I think the code will be fine because the compiler should automatically delete the copy assignment operator.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6761:330,availability,operat,operator,330,"Actually investigating in more detail I think the reason that the assignment operator is private is because the base class MnApplication has a data member a const reference to the FCNBase object and it cannot be copied. . However, I think the code will be fine because the compiler should automatically delete the copy assignment operator.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6761:289,deployability,automat,automatically,289,"Actually investigating in more detail I think the reason that the assignment operator is private is because the base class MnApplication has a data member a const reference to the FCNBase object and it cannot be copied. . However, I think the code will be fine because the compiler should automatically delete the copy assignment operator.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6761:289,testability,automat,automatically,289,"Actually investigating in more detail I think the reason that the assignment operator is private is because the base class MnApplication has a data member a const reference to the FCNBase object and it cannot be copied. . However, I think the code will be fine because the compiler should automatically delete the copy assignment operator.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6761:154,availability,operat,operator,154,"@lmoneta Just for the record, since I was mistaken and @eguiraud was right, I am not against making the copy ctor explicitly defaulted and the assignment operator explicitly deleted (with some inline comment why)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6761:89,deployability,updat,update,89,"Hi, yes it is fine now. Let me run the CI again and then I will merge. Thank you for the update",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6761:89,safety,updat,update,89,"Hi, yes it is fine now. Let me run the CI again and then I will merge. Thank you for the update",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6761:89,security,updat,update,89,"Hi, yes it is fine now. Let me run the CI again and then I will merge. Thank you for the update",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6761:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6761
https://github.com/root-project/root/pull/6762:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:66,deployability,log,logging,66,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:74,deployability,patch,patch,74,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:109,deployability,fail,failing,109,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:49,integrability,messag,message,49,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:49,interoperability,messag,message,49,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:109,reliability,fail,failing,109,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:66,safety,log,logging,66,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:74,safety,patch,patch,74,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:117,safety,test,tests,117,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:66,security,log,logging,66,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:74,security,patch,patch,74,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:66,testability,log,logging,66,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:117,testability,test,tests,117,"@lmoneta Good point, I am happy to add a warning message once the logging patch is merged. I looked into the failing tests, these seem to be unrelated (something about Python).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:42,availability,failur,failure,42,"@HDembinski yes those are known unrelated failure, it's #6753",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:42,deployability,fail,failure,42,"@HDembinski yes those are known unrelated failure, it's #6753",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:42,performance,failur,failure,42,"@HDembinski yes those are known unrelated failure, it's #6753",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:42,reliability,fail,failure,42,"@HDembinski yes those are known unrelated failure, it's #6753",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:22,deployability,log,logging,22,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:30,deployability,patch,patch,30,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:61,integrability,messag,message,61,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:61,interoperability,messag,message,61,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:22,safety,log,logging,22,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:30,safety,patch,patch,30,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:22,security,log,logging,22,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:30,security,patch,patch,30,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:22,testability,log,logging,22,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:84,testability,assert,assert,84,"@lmoneta Now that the logging patch is in, I added a warning message to replace the assert. Good to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:17,availability,Error,Error,17,"Perhaps even an `Error` would be appropriate instead of a `Warn`. The code still works, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:17,performance,Error,Error,17,"Perhaps even an `Error` would be appropriate instead of a `Warn`. The code still works, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:17,safety,Error,Error,17,"Perhaps even an `Error` would be appropriate instead of a `Warn`. The code still works, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:17,usability,Error,Error,17,"Perhaps even an `Error` would be appropriate instead of a `Warn`. The code still works, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:37,safety,test,test,37,"For reference, the following iminuit test triggers this warning or the assert:. ```py. from iminuit import Minuit. m = Minuit(lambda a: -a, 0). m.migrad(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:37,testability,test,test,37,"For reference, the following iminuit test triggers this warning or the assert:. ```py. from iminuit import Minuit. m = Minuit(lambda a: -a, 0). m.migrad(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:71,testability,assert,assert,71,"For reference, the following iminuit test triggers this warning or the assert:. ```py. from iminuit import Minuit. m = Minuit(lambda a: -a, 0). m.migrad(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:180,availability,error,error,180,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:225,availability,state,states,225,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:279,availability,state,state,279,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:372,availability,Error,Error,372,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:516,deployability,log,logic,516,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:665,deployability,continu,continued,665,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:696,deployability,fail,fails,696,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:811,deployability,continu,continuing,811,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:225,integrability,state,states,225,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:279,integrability,state,state,279,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:322,integrability,Event,Eventually,322,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:449,modifiability,Variab,VariableMetricBuilder,449,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:180,performance,error,error,180,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:197,performance,time,time,197,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:372,performance,Error,Error,372,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:696,reliability,fail,fails,696,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:180,safety,error,error,180,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:295,safety,valid,valid,295,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:372,safety,Error,Error,372,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:516,safety,log,logic,516,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:723,safety,test,test,723,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:516,security,log,logic,516,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:115,testability,assert,assert,115,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:350,testability,assert,assert,350,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:516,testability,log,logic,516,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:723,testability,test,test,723,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:180,usability,error,error,180,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:372,usability,Error,Error,372,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:472,usability,Minim,Minimum,472,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:649,usability,minim,minimization,649,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:826,usability,minim,minimization,826,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:891,usability,stop,stop,891,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:1034,usability,minim,minimization,1034,"Hi, . Thank you Hans for your example, it was very useful for this case. . I have investigate this and I think the assert should be removed and there is no need of a warning or an error. The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. . However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. . Maybe we could add a Warning there before line 146, like. ```. if (!st.IsValid()) { . print.Warn(""Invalid Hessian - exit the minimization"");. break; . }. ```. Let me know what you think . Cheers. Lorenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:109,availability,state,states,109,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:163,availability,state,state,163,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:484,availability,Error,Error,484,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:656,deployability,log,logic,656,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:805,deployability,continu,continued,805,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:836,deployability,fail,fails,836,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:951,deployability,continu,continuing,951,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:109,integrability,state,states,109,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:163,integrability,state,state,163,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:347,integrability,interfac,interface,347,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:434,integrability,Event,Eventually,434,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:347,interoperability,interfac,interface,347,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:347,modifiability,interfac,interface,347,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:561,modifiability,Variab,VariableMetricBuilder,561,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:81,performance,time,time,81,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:484,performance,Error,Error,484,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:836,reliability,fail,fails,836,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:179,safety,valid,valid,179,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:484,safety,Error,Error,484,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:656,safety,log,logic,656,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:863,safety,test,test,863,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:656,security,log,logic,656,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:462,testability,assert,assert,462,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:656,testability,log,logic,656,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:863,testability,test,test,863,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:8,usability,close,closer,8,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:484,usability,Error,Error,484,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:584,usability,Minim,Minimum,584,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:789,usability,minim,minimization,789,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:966,usability,minim,minimization,966,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:1031,usability,stop,stop,1031,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:1184,usability,minim,minimization,1184,"I had a closer look in the code and can give a more detailed answer. > The first time one iterates the first states comes from MnSeed and I think in that case the state is always valid (but not 100% sure). I think you are right. BasicMinimumSeed has only one ctor that allows one to set values and that always sets the fValid to true. There is no interface to change it afterwards. We could also remove the flag, it has no purpose. > Eventually we could add the assert or (better) an Error but not at line 232, but at line 75, when we enter in the top function VariableMetricBuilder::Minimum. Ok, I implemented that. . > What we should maybe change is the logic around line 150. A covariance matrix is computed via MnHesse. This is done to check the edm. If the edm is still too large the minimization is continued. > However, if Hesse fails, (for example in the test above f(x) = -x, because the second-derivatives is zero) there is no real point in continuing the minimization. The correct edm will not make sense and one should stop iterating. > Maybe we could add a Warning there before line 146, like. > . > ```. > if (!st.IsValid()) { . > print.Warn(""Invalid Hessian - exit the minimization"");. > break; . > }. > ```. Ok, I also implemented that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:60,usability,help,helpful,60,@lmoneta Is this ready to be merged now? It would be really helpful to fix the crash I am getting in iminuit...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:92,deployability,updat,updating,92,"Yes, It is ready. Let me run the CI and afterwards I will merge it. Thank you very much for updating it! Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:92,safety,updat,updating,92,"Yes, It is ready. Let me run the CI and afterwards I will merge it. Thank you very much for updating it! Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:92,security,updat,updating,92,"Yes, It is ready. Let me run the CI and afterwards I will merge it. Thank you very much for updating it! Cheers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:11,deployability,build,build,11,@phsft-bot build with flags -Dminuit2=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:23,availability,error,error,23,"@lmoneta I changed the error to a warning, I hope we can merge now. :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:23,performance,error,error,23,"@lmoneta I changed the error to a warning, I hope we can merge now. :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
https://github.com/root-project/root/pull/6762:23,safety,error,error,23,"@lmoneta I changed the error to a warning, I hope we can merge now. :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/6762
