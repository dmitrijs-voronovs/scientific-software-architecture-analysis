id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/13644:69,testability,test,test,69,"> @dpiparo What perhaps is missing are some tests. Is it possible to test the new functionality? No idea how it can be tested. It changes existing drawing, but how it can be verified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:119,testability,test,tested,119,"> @dpiparo What perhaps is missing are some tests. Is it possible to test the new functionality? No idea how it can be tested. It changes existing drawing, but how it can be verified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:174,testability,verif,verified,174,"> @dpiparo What perhaps is missing are some tests. Is it possible to test the new functionality? No idea how it can be tested. It changes existing drawing, but how it can be verified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:3,safety,test,test,3,"> ""test the graphics"". For web-based graphics it is done here: https://github.com/linev/jsroot-test. Same in browser: https://root.cern/js/dev/examples.htm?more#run. It produces ~650 different images and compares every single line or/and pixel. Also now it includes interactive features testing - also inside `node.js`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:95,safety,test,test,95,"> ""test the graphics"". For web-based graphics it is done here: https://github.com/linev/jsroot-test. Same in browser: https://root.cern/js/dev/examples.htm?more#run. It produces ~650 different images and compares every single line or/and pixel. Also now it includes interactive features testing - also inside `node.js`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:287,safety,test,testing,287,"> ""test the graphics"". For web-based graphics it is done here: https://github.com/linev/jsroot-test. Same in browser: https://root.cern/js/dev/examples.htm?more#run. It produces ~650 different images and compares every single line or/and pixel. Also now it includes interactive features testing - also inside `node.js`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:3,testability,test,test,3,"> ""test the graphics"". For web-based graphics it is done here: https://github.com/linev/jsroot-test. Same in browser: https://root.cern/js/dev/examples.htm?more#run. It produces ~650 different images and compares every single line or/and pixel. Also now it includes interactive features testing - also inside `node.js`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:95,testability,test,test,95,"> ""test the graphics"". For web-based graphics it is done here: https://github.com/linev/jsroot-test. Same in browser: https://root.cern/js/dev/examples.htm?more#run. It produces ~650 different images and compares every single line or/and pixel. Also now it includes interactive features testing - also inside `node.js`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:287,testability,test,testing,287,"> ""test the graphics"". For web-based graphics it is done here: https://github.com/linev/jsroot-test. Same in browser: https://root.cern/js/dev/examples.htm?more#run. It produces ~650 different images and compares every single line or/and pixel. Also now it includes interactive features testing - also inside `node.js`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13644:266,usability,interact,interactive,266,"> ""test the graphics"". For web-based graphics it is done here: https://github.com/linev/jsroot-test. Same in browser: https://root.cern/js/dev/examples.htm?more#run. It produces ~650 different images and compares every single line or/and pixel. Also now it includes interactive features testing - also inside `node.js`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13644
https://github.com/root-project/root/pull/13648:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13648
https://github.com/root-project/root/pull/13648:139,integrability,filter,filter,139,"I just wanted to mention that once this PR is merged, we can close this issue https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10371?filter=allopenissues :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13648
https://github.com/root-project/root/pull/13648:61,usability,close,close,61,"I just wanted to mention that once this PR is merged, we can close this issue https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10371?filter=allopenissues :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13648
https://github.com/root-project/root/pull/13648:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13648
https://github.com/root-project/root/pull/13650:44,energy efficiency,draw,draw,44,"Should it be also done in `TLegend`? If one draw histogram with marker style 8, one also should do it when histogram referenced in legend",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13650
https://github.com/root-project/root/pull/13650:181,deployability,Build,BuildLegend,181,"Indeed the following macro does not show the right marker in the legend:. ```. {. auto h = new TH1D(""h"",""histogram"", 100,-1,1);. h->FillRandom(""gaus"",100000);. h->Draw(""P"");. gPad->BuildLegend();. }. ```. Maybe the best would be to make ""8"" the default marker for 1D histograms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13650
https://github.com/root-project/root/pull/13650:163,energy efficiency,Draw,Draw,163,"Indeed the following macro does not show the right marker in the legend:. ```. {. auto h = new TH1D(""h"",""histogram"", 100,-1,1);. h->FillRandom(""gaus"",100000);. h->Draw(""P"");. gPad->BuildLegend();. }. ```. Maybe the best would be to make ""8"" the default marker for 1D histograms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13650
https://github.com/root-project/root/pull/13650:27,reliability,doe,does,27,"Indeed the following macro does not show the right marker in the legend:. ```. {. auto h = new TH1D(""h"",""histogram"", 100,-1,1);. h->FillRandom(""gaus"",100000);. h->Draw(""P"");. gPad->BuildLegend();. }. ```. Maybe the best would be to make ""8"" the default marker for 1D histograms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13650
https://github.com/root-project/root/pull/13653:57,deployability,fail,fail,57,"@Axel-Naumann , this change is causing few unit tests to fail for CMSSW ( see https://github.com/cms-sw/cmsdist/pull/8734#issuecomment-1750036822 ). I guess we are missing `etc/gitinfo.txt` file. Is this file suppose to be generated during root build process ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13653
https://github.com/root-project/root/pull/13653:245,deployability,build,build,245,"@Axel-Naumann , this change is causing few unit tests to fail for CMSSW ( see https://github.com/cms-sw/cmsdist/pull/8734#issuecomment-1750036822 ). I guess we are missing `etc/gitinfo.txt` file. Is this file suppose to be generated during root build process ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13653
https://github.com/root-project/root/pull/13653:57,reliability,fail,fail,57,"@Axel-Naumann , this change is causing few unit tests to fail for CMSSW ( see https://github.com/cms-sw/cmsdist/pull/8734#issuecomment-1750036822 ). I guess we are missing `etc/gitinfo.txt` file. Is this file suppose to be generated during root build process ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13653
https://github.com/root-project/root/pull/13653:48,safety,test,tests,48,"@Axel-Naumann , this change is causing few unit tests to fail for CMSSW ( see https://github.com/cms-sw/cmsdist/pull/8734#issuecomment-1750036822 ). I guess we are missing `etc/gitinfo.txt` file. Is this file suppose to be generated during root build process ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13653
https://github.com/root-project/root/pull/13653:43,testability,unit,unit,43,"@Axel-Naumann , this change is causing few unit tests to fail for CMSSW ( see https://github.com/cms-sw/cmsdist/pull/8734#issuecomment-1750036822 ). I guess we are missing `etc/gitinfo.txt` file. Is this file suppose to be generated during root build process ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13653
https://github.com/root-project/root/pull/13653:48,testability,test,tests,48,"@Axel-Naumann , this change is causing few unit tests to fail for CMSSW ( see https://github.com/cms-sw/cmsdist/pull/8734#issuecomment-1750036822 ). I guess we are missing `etc/gitinfo.txt` file. Is this file suppose to be generated during root build process ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13653
https://github.com/root-project/root/pull/13654:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_BUILD_TYPE=RelWithDebInfo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13654
https://github.com/root-project/root/pull/13655:1118,deployability,manag,manageable,1118,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:781,energy efficiency,current,current,781,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:931,energy efficiency,load,load,931,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:1118,energy efficiency,manag,manageable,1118,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:307,integrability,sub,subsequent,307,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:232,interoperability,distribut,distributed,232,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:503,performance,memor,memory,503,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:789,performance,time,time,789,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:931,performance,load,load,931,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:1187,performance,memor,memory,1187,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:16,safety,compl,complement,16,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:430,safety,avoid,avoid,430,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:436,safety,compl,completely,436,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:492,safety,unsaf,unsafe,492,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:624,safety,safe,safe,624,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:1118,safety,manag,manageable,1118,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:1145,safety,safe,safety,1145,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:16,security,compl,complement,16,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:436,security,compl,completely,436,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:757,security,hash,hashing,757,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:960,security,hash,hash,960,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:1029,security,hash,hash,1029,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:399,testability,understand,understand,399,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:503,usability,memor,memory,503,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/pull/13655:1187,usability,memor,memory,1187,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective. It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:. - first task: compile macro and load library. - second task: hash macro code, and, if already compiled, no-op. - ... - n-th task: hash macro code, and, if already compiled, no-op. This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13655
https://github.com/root-project/root/issues/13656:107,availability,error,error,107,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:274,availability,error,error,274,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:50,deployability,stack,stack,50,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:128,deployability,fail,failed,128,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:198,integrability,filter,filter,198,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:366,integrability,Filter,Filter,366,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:410,integrability,filter,filter,410,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:76,interoperability,format,formatted,76,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:107,performance,error,error,107,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:274,performance,error,error,274,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:128,reliability,fail,failed,128,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:389,reliability,doe,does,389,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:436,reliability,doe,does,436,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:107,safety,error,error,107,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:274,safety,error,error,274,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:417,security,sign,signature,417,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:56,testability,trace,trace,56,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:107,usability,error,error,107,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:274,usability,error,error,274,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:292,usability,clear,clear,292,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:602,usability,help,help,602,"Dear @xkzl ,. Thank you for your report. From the stack trace you provided (formatted on two lines):. ```. error: static_assert failed due to requirement 'std::is_convertible<void, bool>::value' . ""filter expression returns a type that is not convertible to bool"". ```. The error seems quite clear to me. You have some function or expression passed to a call to `df.Filter` somewhere that does not respect the filter signature, i.e. it does not return `bool`. Let me know if you find out where this is happening. Otherwise, you can post here the full program you are trying to compile and I can try to help you. Cheers,. Vincenzo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:15,deployability,stack,stack,15,"I dont see any stack here, but ""/Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/InterfaceUtils.hxx"". Is it possible to have root returning some more lines to know which line in my code is causing the issue ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:90,integrability,Interfac,InterfaceUtils,90,"I dont see any stack here, but ""/Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/InterfaceUtils.hxx"". Is it possible to have root returning some more lines to know which line in my code is causing the issue ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:90,interoperability,Interfac,InterfaceUtils,90,"I dont see any stack here, but ""/Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/InterfaceUtils.hxx"". Is it possible to have root returning some more lines to know which line in my code is causing the issue ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:90,modifiability,Interfac,InterfaceUtils,90,"I dont see any stack here, but ""/Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/InterfaceUtils.hxx"". Is it possible to have root returning some more lines to know which line in my code is causing the issue ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:33,usability,User,Users,33,"I dont see any stack here, but ""/Users/marcomeyer/Software/root/20230831/include/ROOT/RDF/InterfaceUtils.hxx"". Is it possible to have root returning some more lines to know which line in my code is causing the issue ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:240,performance,cach,caching-and-performance-compared-to-pandas,240,"Hi @xkzl, . I'm sorry for a very late reply on this, but I would like to ask if you found the issue already? . Regarding increased verbosity, you could do something similar to what is described here:https://root-forum.cern.ch/t/rdataframes-caching-and-performance-compared-to-pandas/47450/4?u=mczurylo. Cheers, . Marta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:252,usability,perform,performance-compared-to-pandas,252,"Hi @xkzl, . I'm sorry for a very late reply on this, but I would like to ask if you found the issue already? . Regarding increased verbosity, you could do something similar to what is described here:https://root-forum.cern.ch/t/rdataframes-caching-and-performance-compared-to-pandas/47450/4?u=mczurylo. Cheers, . Marta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:100,safety,input,input,100,Yes I found the origin without debugger but I got the issue fixed ! Thank you @martamaja10 for your input. I will still have a look to it for educational purpose :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:100,usability,input,input,100,Yes I found the origin without debugger but I got the issue fixed ! Thank you @martamaja10 for your input. I will still have a look to it for educational purpose :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13656:22,usability,close,close,22,"Great to hear, I will close the issue then!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13656
https://github.com/root-project/root/issues/13659:469,integrability,sub,sub-directories,469,"The code is in `$ROOTSYS/main/python/cmdLineUtils.py` at line 1394. The function retrieving the list of objects to be printed is:. ```. def _keyListExtended(rootFile,pathSplitList):. keyList,dirList = keyClassSpliter(rootFile,pathSplitList). for pathSplit in dirList: keyList.extend(getKeyList(rootFile,pathSplit)). keyList = [key for key in keyList if not isDirectoryKey(key)]. keyListSort(keyList). return keyList. ```. Somehow it should be extended in order to scan sub-directories.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13659
https://github.com/root-project/root/issues/13659:276,modifiability,exten,extend,276,"The code is in `$ROOTSYS/main/python/cmdLineUtils.py` at line 1394. The function retrieving the list of objects to be printed is:. ```. def _keyListExtended(rootFile,pathSplitList):. keyList,dirList = keyClassSpliter(rootFile,pathSplitList). for pathSplit in dirList: keyList.extend(getKeyList(rootFile,pathSplit)). keyList = [key for key in keyList if not isDirectoryKey(key)]. keyListSort(keyList). return keyList. ```. Somehow it should be extended in order to scan sub-directories.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13659
https://github.com/root-project/root/issues/13659:443,modifiability,exten,extended,443,"The code is in `$ROOTSYS/main/python/cmdLineUtils.py` at line 1394. The function retrieving the list of objects to be printed is:. ```. def _keyListExtended(rootFile,pathSplitList):. keyList,dirList = keyClassSpliter(rootFile,pathSplitList). for pathSplit in dirList: keyList.extend(getKeyList(rootFile,pathSplit)). keyList = [key for key in keyList if not isDirectoryKey(key)]. keyListSort(keyList). return keyList. ```. Somehow it should be extended in order to scan sub-directories.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13659
https://github.com/root-project/root/pull/13660:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2004/python3, ROOT-debian10-i386/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13660
https://github.com/root-project/root/pull/13660:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2004-clang/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13660
https://github.com/root-project/root/pull/13664:4,deployability,observ,observations,4,"Two observations:. - clang-format: I prefer not to change the structure of the code, to respect the previous formatting. - Timescales: this should be in release for 6.30",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13664
https://github.com/root-project/root/pull/13664:153,deployability,releas,release,153,"Two observations:. - clang-format: I prefer not to change the structure of the code, to respect the previous formatting. - Timescales: this should be in release for 6.30",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13664
https://github.com/root-project/root/pull/13664:27,interoperability,format,format,27,"Two observations:. - clang-format: I prefer not to change the structure of the code, to respect the previous formatting. - Timescales: this should be in release for 6.30",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13664
https://github.com/root-project/root/pull/13664:109,interoperability,format,formatting,109,"Two observations:. - clang-format: I prefer not to change the structure of the code, to respect the previous formatting. - Timescales: this should be in release for 6.30",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13664
https://github.com/root-project/root/pull/13664:123,performance,Time,Timescales,123,"Two observations:. - clang-format: I prefer not to change the structure of the code, to respect the previous formatting. - Timescales: this should be in release for 6.30",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13664
https://github.com/root-project/root/pull/13664:4,testability,observ,observations,4,"Two observations:. - clang-format: I prefer not to change the structure of the code, to respect the previous formatting. - Timescales: this should be in release for 6.30",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13664
https://github.com/root-project/root/pull/13664:37,usability,prefer,prefer,37,"Two observations:. - clang-format: I prefer not to change the structure of the code, to respect the previous formatting. - Timescales: this should be in release for 6.30",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13664
https://github.com/root-project/root/pull/13665:33,integrability,messag,messages,33,Just fixing a typo in the commit messages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13665
https://github.com/root-project/root/pull/13665:33,interoperability,messag,messages,33,Just fixing a typo in the commit messages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13665
https://github.com/root-project/root/issues/13667:737,availability,operat,operator,737,"I agree, this looks like a miscompilation:. ```. #7 0x00007ffff76a90d8 in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6. #8 0x00007ffff769d524 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6. #9 0x00007ffff773fc2a in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (). from /lib/x86_64-linux-gnu/libstdc++.so.6. #10 0x00007ffec1a4fed0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:1571. #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator= (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:805. ```. I.e. up to `assign (__str="""", this=0x7fffffff8b10)` things look healthy, but at the transition to the `libstdc++.so.6` things get broken. Sorry for the noise; should this resurface again elsewhere I will reopen this report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13667
https://github.com/root-project/root/issues/13667:896,availability,heal,healthy,896,"I agree, this looks like a miscompilation:. ```. #7 0x00007ffff76a90d8 in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6. #8 0x00007ffff769d524 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6. #9 0x00007ffff773fc2a in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (). from /lib/x86_64-linux-gnu/libstdc++.so.6. #10 0x00007ffec1a4fed0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:1571. #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator= (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:805. ```. I.e. up to `assign (__str="""", this=0x7fffffff8b10)` things look healthy, but at the transition to the `libstdc++.so.6` things get broken. Sorry for the noise; should this resurface again elsewhere I will reopen this report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13667
https://github.com/root-project/root/issues/13667:293,energy efficiency,alloc,allocator,293,"I agree, this looks like a miscompilation:. ```. #7 0x00007ffff76a90d8 in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6. #8 0x00007ffff769d524 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6. #9 0x00007ffff773fc2a in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (). from /lib/x86_64-linux-gnu/libstdc++.so.6. #10 0x00007ffec1a4fed0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:1571. #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator= (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:805. ```. I.e. up to `assign (__str="""", this=0x7fffffff8b10)` things look healthy, but at the transition to the `libstdc++.so.6` things get broken. Sorry for the noise; should this resurface again elsewhere I will reopen this report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13667
https://github.com/root-project/root/issues/13667:384,energy efficiency,alloc,allocator,384,"I agree, this looks like a miscompilation:. ```. #7 0x00007ffff76a90d8 in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6. #8 0x00007ffff769d524 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6. #9 0x00007ffff773fc2a in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (). from /lib/x86_64-linux-gnu/libstdc++.so.6. #10 0x00007ffec1a4fed0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:1571. #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator= (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:805. ```. I.e. up to `assign (__str="""", this=0x7fffffff8b10)` things look healthy, but at the transition to the `libstdc++.so.6` things get broken. Sorry for the noise; should this resurface again elsewhere I will reopen this report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13667
https://github.com/root-project/root/issues/13667:545,energy efficiency,alloc,allocator,545,"I agree, this looks like a miscompilation:. ```. #7 0x00007ffff76a90d8 in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6. #8 0x00007ffff769d524 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6. #9 0x00007ffff773fc2a in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (). from /lib/x86_64-linux-gnu/libstdc++.so.6. #10 0x00007ffec1a4fed0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:1571. #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator= (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:805. ```. I.e. up to `assign (__str="""", this=0x7fffffff8b10)` things look healthy, but at the transition to the `libstdc++.so.6` things get broken. Sorry for the noise; should this resurface again elsewhere I will reopen this report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13667
https://github.com/root-project/root/issues/13667:718,energy efficiency,alloc,allocator,718,"I agree, this looks like a miscompilation:. ```. #7 0x00007ffff76a90d8 in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6. #8 0x00007ffff769d524 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6. #9 0x00007ffff773fc2a in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (). from /lib/x86_64-linux-gnu/libstdc++.so.6. #10 0x00007ffec1a4fed0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:1571. #11 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator= (__str="""", this=0x7fffffff8b10) at /usr/include/c++/12/bits/basic_string.h:805. ```. I.e. up to `assign (__str="""", this=0x7fffffff8b10)` things look healthy, but at the transition to the `libstdc++.so.6` things get broken. Sorry for the noise; should this resurface again elsewhere I will reopen this report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13667
https://github.com/root-project/root/issues/13667:30,availability,operat,operation,30,I run exactly same `valgrind` operation and do not get any warning here. But issue was important - I found and fix other problem. See #13670,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13667
https://github.com/root-project/root/pull/13670:162,usability,support,support,162,> I think we want to redraw the canvas when SetGrayscale_ is called ? I mean web case. `Paint` should not called then. By the way - I have to implement grayscale support in JSROOT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13670
https://github.com/root-project/root/issues/13672:971,deployability,Updat,Update,971,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:61,energy efficiency,model,model,61,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:201,energy efficiency,Draw,Drawing,201,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:408,energy efficiency,Draw,Draw,408,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:552,energy efficiency,Draw,Draw,552,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:565,energy efficiency,Draw,Draw,565,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:713,energy efficiency,Draw,Draw,713,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:817,energy efficiency,Draw,Draw,817,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:834,energy efficiency,Draw,Draw,834,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:953,energy efficiency,Draw,Draw,953,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:984,energy efficiency,Draw,Draw,984,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:971,safety,Updat,Update,971,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:61,security,model,model,61,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:971,security,Updat,Update,971,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:1010,usability,statu,status,1010,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:1164,usability,statu,status,1164,"I found that the following code also has this issue, but the model cannot fully display it. ```. from ROOT import TF2, TCanvas, TPad, TPaveText, gROOT, gStyle. %jsroot on. c1 = TCanvas(""c1"", ""Surfaces Drawing Options"", 200, 10, 700, 900). c1.SetFillColor(42). gStyle.SetFrameFillColor(42). title = TPaveText(0.2, 0.96, 0.8, 0.995). title.SetFillColor(33). title.AddText(""Examples of Surface options""). title.Draw(). pad1 = TPad(""pad1"", ""Gouraud shading"", 0.03, 0.50, 0.98, 0.95, 21). pad2 = TPad(""pad2"", ""Color mesh"", 0.03, 0.02, 0.98, 0.48, 21). pad1.Draw(). pad2.Draw(). # We generate a 2-D function. f2 = TF2(""f2"", ""x**2 + y**2 - x**3 -8*x*y**4"", -1, 1.2, -1.5, 1.5). f2.SetContour(48). f2.SetFillColor(45). # Draw this function in pad1 with Gouraud shading option. pad1.cd(). pad1.SetPhi(-80). pad1.SetLogz(). f2.Draw(""surf4""). # Draw this function in pad2 with color mesh option. pad2.cd(). pad2.SetTheta(25). pad2.SetPhi(-110). pad2.SetLogz(). f2.Draw(""surf1""). c1.Update(). c1.Draw(). ```. Below is the status of on. <img width=""413"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/aa7c65f5-a1c4-4186-8890-30be80901a07"">. Below is the status of off. <img width=""422"" alt=""image"" src=""https://github.com/root-project/root/assets/73058062/4aff91ad-bba5-4af9-a6de-544651785c99"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/issues/13672:0,usability,Support,Support,0,Support of `TProfile3D` will be add by #13706. Problem with `TF2` was already fixed in master. . Now it works and produces following output in `jupyter lab`:. ![canvas](https://github.com/root-project/root/assets/4936580/c3a37776-cbd3-4d49-92bd-727bdb54bf08).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13672
https://github.com/root-project/root/pull/13673:0,availability,Failur,Failures,0,Failures seem unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13673
https://github.com/root-project/root/pull/13673:0,deployability,Fail,Failures,0,Failures seem unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13673
https://github.com/root-project/root/pull/13673:0,performance,Failur,Failures,0,Failures seem unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13673
https://github.com/root-project/root/pull/13673:0,reliability,Fail,Failures,0,Failures seem unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13673
https://github.com/root-project/root/pull/13674:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2204/nortcxxmod, ROOT-ubuntu2004-clang/default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2204/nortcxxmod, ROOT-ubuntu2004-clang/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2204/nortcxxmod, ROOT-ubuntu2004-clang/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:0,availability,Failur,Failures,0,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:0,deployability,Fail,Failures,0,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:76,deployability,modul,module,76,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:240,deployability,depend,dependency,240,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:342,deployability,build,building,342,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:56,energy efficiency,load,loading,56,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:225,energy efficiency,load,loaded,225,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:214,integrability,compon,component,214,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:240,integrability,depend,dependency,240,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:214,interoperability,compon,component,214,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:76,modifiability,modul,module,76,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:214,modifiability,compon,component,214,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:240,modifiability,depend,dependency,240,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:0,performance,Failur,Failures,0,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:56,performance,load,loading,56,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:225,performance,load,loaded,225,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:0,reliability,Fail,Failures,0,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:76,safety,modul,module,76,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:240,safety,depend,dependency,240,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:321,safety,test,testing,321,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:240,testability,depend,dependency,240,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:321,testability,test,testing,321,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. . See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. . Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu2004-clang/default with flags -Ddataframe=Off -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/pull/13674:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2204/nortcxxmod, ROOT-ubuntu2004-clang/default with flags -DCTEST_TEST_EXCLUDE_NONE=On -Ddataframe=Off",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13674
https://github.com/root-project/root/issues/13678:148,safety,compl,complicated,148,"Many thanks! I found and fix problem when producing screenshot of such canvas. Fix inside #13703. With difference in fill patterns steps it is more complicated. With jsroot I cannot make very small steps for all kinds of such patterns. But anyway, I will try to provide fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13678
https://github.com/root-project/root/issues/13678:148,security,compl,complicated,148,"Many thanks! I found and fix problem when producing screenshot of such canvas. Fix inside #13703. With difference in fill patterns steps it is more complicated. With jsroot I cannot make very small steps for all kinds of such patterns. But anyway, I will try to provide fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13678
https://github.com/root-project/root/pull/13683:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13683
https://github.com/root-project/root/pull/13683:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13683
https://github.com/root-project/root/pull/13688:42,testability,simpl,simply,42,It is already in mathmore. The license is simply not FOSS (read it carefully if you care).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:42,usability,simpl,simply,42,It is already in mathmore. The license is simply not FOSS (read it carefully if you care).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:44,testability,simpl,simply,44,"> It is already in mathmore. The license is simply not FOSS (read it carefully if you care). Where? The header and source ""seems"" to be saying GPL.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:44,usability,simpl,simply,44,"> It is already in mathmore. The license is simply not FOSS (read it carefully if you care). Where? The header and source ""seems"" to be saying GPL.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:102,availability,avail,available,102,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:507,availability,avail,available,507,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:327,integrability,compon,components,327,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:256,interoperability,distribut,distribute,256,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:327,interoperability,compon,components,327,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:327,modifiability,compon,components,327,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:102,reliability,availab,available,102,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:507,reliability,availab,available,507,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:784,reliability,doe,doesn,784,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:102,safety,avail,available,102,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:507,safety,avail,available,507,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:102,security,availab,available,102,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:507,security,availab,available,507,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:854,security,access,access,854,"Also, check this out:. https://codecogs.com/library/maths/special/bessel/kelvin.php. > Source code is available when you buy a [Commercial](https://codecogs.com/pages/licences/com.php) licence. And then in the commercial license it says:. > You **cannot** distribute source code behind the CodeCogs Software. By the way, other components of codecogs have different license options, for example [this one](https://www.codecogs.com/library/engineering/fluid_mechanics/waves/dispersion.php):. > Source code is available when you agree to a [GP Licence](https://www.codecogs.com/pages/licences/gpl.php) or buy a [Commercial Licence](https://www.codecogs.com/pages/licences/com.php). Maybe the Kelvin functions were also possible to be used with the GPL in the past, but at least now this doesn't seem to be possible, as only the commercial license gives you access to the source code. With this, I would also come to the conclusion that that the code needs to be removed ASAP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:0,availability,Failur,Failures,0,Failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:0,deployability,Fail,Failures,0,Failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:0,performance,Failur,Failures,0,Failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/pull/13688:0,reliability,Fail,Failures,0,Failures seem unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13688
https://github.com/root-project/root/issues/13691:144,deployability,modul,modulename,144,"Btw, I also found weird that the TDirectory destructor, by getting `gROOT` via `TROOT::GetROOT`, ends up calling `TCling::RegisterModule` with `modulename=0x7f770e9c96a9 ""libNet""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:144,modifiability,modul,modulename,144,"Btw, I also found weird that the TDirectory destructor, by getting `gROOT` via `TROOT::GetROOT`, ends up calling `TCling::RegisterModule` with `modulename=0x7f770e9c96a9 ""libNet""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:144,safety,modul,modulename,144,"Btw, I also found weird that the TDirectory destructor, by getting `gROOT` via `TROOT::GetROOT`, ends up calling `TCling::RegisterModule` with `modulename=0x7f770e9c96a9 ""libNet""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:252,energy efficiency,load,loading,252,"> Btw, I also found weird that the TDirectory destructor, by getting gROOT .... ends up calling . This is because it is the very first access to `gROOT` in this process and thus it triggers the initialization of the global `TROOT` object including the loading of various library related information (for all loaded library).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:308,energy efficiency,load,loaded,308,"> Btw, I also found weird that the TDirectory destructor, by getting gROOT .... ends up calling . This is because it is the very first access to `gROOT` in this process and thus it triggers the initialization of the global `TROOT` object including the loading of various library related information (for all loaded library).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:252,performance,load,loading,252,"> Btw, I also found weird that the TDirectory destructor, by getting gROOT .... ends up calling . This is because it is the very first access to `gROOT` in this process and thus it triggers the initialization of the global `TROOT` object including the loading of various library related information (for all loaded library).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:308,performance,load,loaded,308,"> Btw, I also found weird that the TDirectory destructor, by getting gROOT .... ends up calling . This is because it is the very first access to `gROOT` in this process and thus it triggers the initialization of the global `TROOT` object including the loading of various library related information (for all loaded library).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:135,security,access,access,135,"> Btw, I also found weird that the TDirectory destructor, by getting gROOT .... ends up calling . This is because it is the very first access to `gROOT` in this process and thus it triggers the initialization of the global `TROOT` object including the loading of various library related information (for all loaded library).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:66,reliability,doe,doesn,66,"> Note that if the equivalent is run via root mymacro.C the crash doesn't happen. In this case, `gROOT` is initialized before the `TDirectoryFile` is created and deleted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:89,deployability,stack,stacktrace,89,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:694,deployability,modul,module,694,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:230,energy efficiency,Load,LoadPCM,230,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:418,energy efficiency,core,core,418,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:468,energy efficiency,Load,LoadPCM,468,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:588,energy efficiency,core,core,588,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:834,energy efficiency,core,core,834,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:1022,energy efficiency,Load,Loading,1022,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:694,modifiability,modul,module,694,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:230,performance,Load,LoadPCM,230,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:468,performance,Load,LoadPCM,468,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:1022,performance,Load,Loading,1022,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:876,reliability,Pra,Practically,876,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/issues/13691:694,safety,modul,module,694,"Attaching the relevant insights gathered while working on the linked PR. One part of the stacktrace included in the issue description of which I did not immediately realise the relevance is. ```. #28 0x00007f770426a669 in TCling::LoadPCM (this=0x19ecfe0, pcmFileNameFullPath=""/home/vpadulan/programs/rootproject/rootinstall/master-8b7aa4957a-debug/lib/libNet_rdict.pcm"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:1850. ```. `TCling::LoadPCM` is called in [this section](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299-L2307) of `TCling::RegisterModule`, which in turn happens only if the module being registered is not in the [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946) set. Practically, this means that the segfault is only visible if the reproducer is compiled linking to some library that is not included in that set. Loading the corresponding PCM then finally calls into `TDirectory::RecursiveRemove` triggering the segfault as seen in the description.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13691
https://github.com/root-project/root/pull/13692:33,safety,test,test,33,I would definitively have a unit test for this fix if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:28,testability,unit,unit,28,I would definitively have a unit test for this fix if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:33,testability,test,test,33,I would definitively have a unit test for this fix if possible.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:162,energy efficiency,core,core,162,"Hello,. Some context perhaps before: I think @pcanal is referring to this line https://github.com/root-project/root/blob/3acc0e601bd74ffd876c755069e8e989d922521c/core/base/src/TROOT.cxx#L590 and https://github.com/root-project/root/blob/3acc0e601bd74ffd876c755069e8e989d922521c/core/base/inc/TROOT.h#L406 (the latter being a feature which is not widely known). I find both solutions being discussed good, but, for what is worth, I have a preference for . ```. TDirectory::~TDirectory(). {. if (!ROOT::Internal::gROOTLocal) {. delete fList;. return; //when called by TROOT destructor. }. ```. Anyway, great to have already 2 solutions for this issue, I am confident we can fix it fast!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:278,energy efficiency,core,core,278,"Hello,. Some context perhaps before: I think @pcanal is referring to this line https://github.com/root-project/root/blob/3acc0e601bd74ffd876c755069e8e989d922521c/core/base/src/TROOT.cxx#L590 and https://github.com/root-project/root/blob/3acc0e601bd74ffd876c755069e8e989d922521c/core/base/inc/TROOT.h#L406 (the latter being a feature which is not widely known). I find both solutions being discussed good, but, for what is worth, I have a preference for . ```. TDirectory::~TDirectory(). {. if (!ROOT::Internal::gROOTLocal) {. delete fList;. return; //when called by TROOT destructor. }. ```. Anyway, great to have already 2 solutions for this issue, I am confident we can fix it fast!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:13,testability,context,context,13,"Hello,. Some context perhaps before: I think @pcanal is referring to this line https://github.com/root-project/root/blob/3acc0e601bd74ffd876c755069e8e989d922521c/core/base/src/TROOT.cxx#L590 and https://github.com/root-project/root/blob/3acc0e601bd74ffd876c755069e8e989d922521c/core/base/inc/TROOT.h#L406 (the latter being a feature which is not widely known). I find both solutions being discussed good, but, for what is worth, I have a preference for . ```. TDirectory::~TDirectory(). {. if (!ROOT::Internal::gROOTLocal) {. delete fList;. return; //when called by TROOT destructor. }. ```. Anyway, great to have already 2 solutions for this issue, I am confident we can fix it fast!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:438,usability,prefer,preference,438,"Hello,. Some context perhaps before: I think @pcanal is referring to this line https://github.com/root-project/root/blob/3acc0e601bd74ffd876c755069e8e989d922521c/core/base/src/TROOT.cxx#L590 and https://github.com/root-project/root/blob/3acc0e601bd74ffd876c755069e8e989d922521c/core/base/inc/TROOT.h#L406 (the latter being a feature which is not widely known). I find both solutions being discussed good, but, for what is worth, I have a preference for . ```. TDirectory::~TDirectory(). {. if (!ROOT::Internal::gROOTLocal) {. delete fList;. return; //when called by TROOT destructor. }. ```. Anyway, great to have already 2 solutions for this issue, I am confident we can fix it fast!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:78,safety,TEST,TEST,78,"For the unittest, the reproducer of the linked issue is not enough, i.e. ```. TEST(TDirectoryFile, DestructorDoesNotSegfault). {. TDirectoryFile f{""f"", ""f""};. }. ```. Most probably because in the ctest run gROOT is already initialized. I'll think about something else, ideas welcome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:8,testability,unit,unittest,8,"For the unittest, the reproducer of the linked issue is not enough, i.e. ```. TEST(TDirectoryFile, DestructorDoesNotSegfault). {. TDirectoryFile f{""f"", ""f""};. }. ```. Most probably because in the ctest run gROOT is already initialized. I'll think about something else, ideas welcome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:78,testability,TEST,TEST,78,"For the unittest, the reproducer of the linked issue is not enough, i.e. ```. TEST(TDirectoryFile, DestructorDoesNotSegfault). {. TDirectoryFile f{""f"", ""f""};. }. ```. Most probably because in the ctest run gROOT is already initialized. I'll think about something else, ideas welcome.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:79,usability,prefer,preference,79,"> I find both solutions being discussed good, but, for what is worth, I have a preference for. I think we should apply/keep both fixes as the change in `RecursiveRemove` protect against other potential 'unexpected' use of a `TDirectoryFile` when not fully initialized.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:66,energy efficiency,current,current,66,"> Put the bare/exact original example rather than using gtest. My current iteration is the following. ```. // CMakeLists.txt. [...]. ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO). ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx. #include ""TDirectoryFile.h"". int main(). {. TDirectoryFile f{""f"", ""f""};. }. ```. Which still doesn't trigger the segfault when run as. ```. ctest -VV -R test-tdirectoryfile. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:203,energy efficiency,Core,Core,203,"> Put the bare/exact original example rather than using gtest. My current iteration is the following. ```. // CMakeLists.txt. [...]. ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO). ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx. #include ""TDirectoryFile.h"". int main(). {. TDirectoryFile f{""f"", ""f""};. }. ```. Which still doesn't trigger the segfault when run as. ```. ctest -VV -R test-tdirectoryfile. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:399,reliability,doe,doesn,399,"> Put the bare/exact original example rather than using gtest. My current iteration is the following. ```. // CMakeLists.txt. [...]. ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO). ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx. #include ""TDirectoryFile.h"". int main(). {. TDirectoryFile f{""f"", ""f""};. }. ```. Which still doesn't trigger the segfault when run as. ```. ctest -VV -R test-tdirectoryfile. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:228,safety,test,test-tdirectoryfile,228,"> Put the bare/exact original example rather than using gtest. My current iteration is the following. ```. // CMakeLists.txt. [...]. ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO). ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx. #include ""TDirectoryFile.h"". int main(). {. TDirectoryFile f{""f"", ""f""};. }. ```. Which still doesn't trigger the segfault when run as. ```. ctest -VV -R test-tdirectoryfile. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:459,safety,test,test-tdirectoryfile,459,"> Put the bare/exact original example rather than using gtest. My current iteration is the following. ```. // CMakeLists.txt. [...]. ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO). ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx. #include ""TDirectoryFile.h"". int main(). {. TDirectoryFile f{""f"", ""f""};. }. ```. Which still doesn't trigger the segfault when run as. ```. ctest -VV -R test-tdirectoryfile. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:228,testability,test,test-tdirectoryfile,228,"> Put the bare/exact original example rather than using gtest. My current iteration is the following. ```. // CMakeLists.txt. [...]. ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO). ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx. #include ""TDirectoryFile.h"". int main(). {. TDirectoryFile f{""f"", ""f""};. }. ```. Which still doesn't trigger the segfault when run as. ```. ctest -VV -R test-tdirectoryfile. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:459,testability,test,test-tdirectoryfile,459,"> Put the bare/exact original example rather than using gtest. My current iteration is the following. ```. // CMakeLists.txt. [...]. ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO). ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx. #include ""TDirectoryFile.h"". int main(). {. TDirectoryFile f{""f"", ""f""};. }. ```. Which still doesn't trigger the segfault when run as. ```. ctest -VV -R test-tdirectoryfile. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:248,usability,COMMAND,COMMAND,248,"> Put the bare/exact original example rather than using gtest. My current iteration is the following. ```. // CMakeLists.txt. [...]. ROOT_EXECUTABLE(TDirectoryFileTests TDirectoryFileTests.cxx LIBRARIES Core RIO). ROOT_ADD_TEST(test-tdirectoryfile COMMAND TDirectoryFileTests). // TDirectoryFileTests.cxx. #include ""TDirectoryFile.h"". int main(). {. TDirectoryFile f{""f"", ""f""};. }. ```. Which still doesn't trigger the segfault when run as. ```. ctest -VV -R test-tdirectoryfile. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:5,energy efficiency,current,current,5,> My current iteration is the following. Can you debug the produced executable to see why it does not trigger the problem (I.e. why when it reaches the TDirectoryFile destructor gROOT is already set),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:93,reliability,doe,does,93,> My current iteration is the following. Can you debug the produced executable to see why it does not trigger the problem (I.e. why when it reaches the TDirectoryFile destructor gROOT is already set),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:280,availability,state,statement,280,"> Can you debug the produced executable to see why it does not trigger the problem (I.e. why when it reaches the TDirectoryFile destructor gROOT is already set). It seems that `TROOT::getROOT` is called in either case. But, when the executable compiled with cmake reaches this if statement in [`TCling::RegisterModule`](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299), it's always false. Thus, `TCling::LoadPCM` is never called and a new `TFile` is never created at https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1879. Finally, `TDirectory::RecursiveRemove` is never called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:403,energy efficiency,core,core,403,"> Can you debug the produced executable to see why it does not trigger the problem (I.e. why when it reaches the TDirectoryFile destructor gROOT is already set). It seems that `TROOT::getROOT` is called in either case. But, when the executable compiled with cmake reaches this if statement in [`TCling::RegisterModule`](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299), it's always false. Thus, `TCling::LoadPCM` is never called and a new `TFile` is never created at https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1879. Finally, `TDirectory::RecursiveRemove` is never called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:475,energy efficiency,Load,LoadPCM,475,"> Can you debug the produced executable to see why it does not trigger the problem (I.e. why when it reaches the TDirectoryFile destructor gROOT is already set). It seems that `TROOT::getROOT` is called in either case. But, when the executable compiled with cmake reaches this if statement in [`TCling::RegisterModule`](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299), it's always false. Thus, `TCling::LoadPCM` is never called and a new `TFile` is never created at https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1879. Finally, `TDirectory::RecursiveRemove` is never called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:621,energy efficiency,core,core,621,"> Can you debug the produced executable to see why it does not trigger the problem (I.e. why when it reaches the TDirectoryFile destructor gROOT is already set). It seems that `TROOT::getROOT` is called in either case. But, when the executable compiled with cmake reaches this if statement in [`TCling::RegisterModule`](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299), it's always false. Thus, `TCling::LoadPCM` is never called and a new `TFile` is never created at https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1879. Finally, `TDirectory::RecursiveRemove` is never called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:280,integrability,state,statement,280,"> Can you debug the produced executable to see why it does not trigger the problem (I.e. why when it reaches the TDirectoryFile destructor gROOT is already set). It seems that `TROOT::getROOT` is called in either case. But, when the executable compiled with cmake reaches this if statement in [`TCling::RegisterModule`](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299), it's always false. Thus, `TCling::LoadPCM` is never called and a new `TFile` is never created at https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1879. Finally, `TDirectory::RecursiveRemove` is never called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:475,performance,Load,LoadPCM,475,"> Can you debug the produced executable to see why it does not trigger the problem (I.e. why when it reaches the TDirectoryFile destructor gROOT is already set). It seems that `TROOT::getROOT` is called in either case. But, when the executable compiled with cmake reaches this if statement in [`TCling::RegisterModule`](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299), it's always false. Thus, `TCling::LoadPCM` is never called and a new `TFile` is never created at https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1879. Finally, `TDirectory::RecursiveRemove` is never called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:54,reliability,doe,does,54,"> Can you debug the produced executable to see why it does not trigger the problem (I.e. why when it reaches the TDirectoryFile destructor gROOT is already set). It seems that `TROOT::getROOT` is called in either case. But, when the executable compiled with cmake reaches this if statement in [`TCling::RegisterModule`](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L2299), it's always false. Thus, `TCling::LoadPCM` is never called and a new `TFile` is never created at https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1879. Finally, `TDirectory::RecursiveRemove` is never called.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:295,energy efficiency,core,core,295,"Ok, got it. The reproducer from the linked issue is compiled via. ```. g++ -g -o repro.out repro.cpp `root-config --cflags --libs. ```. Which includes linking to some libraries that are not in [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946). That's why `LoadPCM` is triggered in the first place. If I compile the reproducer with. ```. g++ -o repro.out repro.cpp -I[...] -L[...] -lCore -lRIO. ```. Then I don't get the segfault either. So, knowing this, where should I place this test? I guess somewhere that can link to `RIO` but also some other library like `libNet` or `libROOTDataFrame`. Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:345,energy efficiency,Load,LoadPCM,345,"Ok, got it. The reproducer from the linked issue is compiled via. ```. g++ -g -o repro.out repro.cpp `root-config --cflags --libs. ```. Which includes linking to some libraries that are not in [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946). That's why `LoadPCM` is triggered in the first place. If I compile the reproducer with. ```. g++ -o repro.out repro.cpp -I[...] -L[...] -lCore -lRIO. ```. Then I don't get the segfault either. So, knowing this, where should I place this test? I guess somewhere that can link to `RIO` but also some other library like `libNet` or `libROOTDataFrame`. Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:754,interoperability,platform,platforms,754,"Ok, got it. The reproducer from the linked issue is compiled via. ```. g++ -g -o repro.out repro.cpp `root-config --cflags --libs. ```. Which includes linking to some libraries that are not in [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946). That's why `LoadPCM` is triggered in the first place. If I compile the reproducer with. ```. g++ -o repro.out repro.cpp -I[...] -L[...] -lCore -lRIO. ```. Then I don't get the segfault either. So, knowing this, where should I place this test? I guess somewhere that can link to `RIO` but also some other library like `libNet` or `libROOTDataFrame`. Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:345,performance,Load,LoadPCM,345,"Ok, got it. The reproducer from the linked issue is compiled via. ```. g++ -g -o repro.out repro.cpp `root-config --cflags --libs. ```. Which includes linking to some libraries that are not in [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946). That's why `LoadPCM` is triggered in the first place. If I compile the reproducer with. ```. g++ -o repro.out repro.cpp -I[...] -L[...] -lCore -lRIO. ```. Then I don't get the segfault either. So, knowing this, where should I place this test? I guess somewhere that can link to `RIO` but also some other library like `libNet` or `libROOTDataFrame`. Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:570,safety,test,test,570,"Ok, got it. The reproducer from the linked issue is compiled via. ```. g++ -g -o repro.out repro.cpp `root-config --cflags --libs. ```. Which includes linking to some libraries that are not in [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946). That's why `LoadPCM` is triggered in the first place. If I compile the reproducer with. ```. g++ -o repro.out repro.cpp -I[...] -L[...] -lCore -lRIO. ```. Then I don't get the segfault either. So, knowing this, where should I place this test? I guess somewhere that can link to `RIO` but also some other library like `libNet` or `libROOTDataFrame`. Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:570,testability,test,test,570,"Ok, got it. The reproducer from the linked issue is compiled via. ```. g++ -g -o repro.out repro.cpp `root-config --cflags --libs. ```. Which includes linking to some libraries that are not in [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946). That's why `LoadPCM` is triggered in the first place. If I compile the reproducer with. ```. g++ -o repro.out repro.cpp -I[...] -L[...] -lCore -lRIO. ```. Then I don't get the segfault either. So, knowing this, where should I place this test? I guess somewhere that can link to `RIO` but also some other library like `libNet` or `libROOTDataFrame`. Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:791,testability,coverag,coverage,791,"Ok, got it. The reproducer from the linked issue is compiled via. ```. g++ -g -o repro.out repro.cpp `root-config --cflags --libs. ```. Which includes linking to some libraries that are not in [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946). That's why `LoadPCM` is triggered in the first place. If I compile the reproducer with. ```. g++ -o repro.out repro.cpp -I[...] -L[...] -lCore -lRIO. ```. Then I don't get the segfault either. So, knowing this, where should I place this test? I guess somewhere that can link to `RIO` but also some other library like `libNet` or `libROOTDataFrame`. Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:682,usability,Prefer,Preferably,682,"Ok, got it. The reproducer from the linked issue is compiled via. ```. g++ -g -o repro.out repro.cpp `root-config --cflags --libs. ```. Which includes linking to some libraries that are not in [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946). That's why `LoadPCM` is triggered in the first place. If I compile the reproducer with. ```. g++ -o repro.out repro.cpp -I[...] -L[...] -lCore -lRIO. ```. Then I don't get the segfault either. So, knowing this, where should I place this test? I guess somewhere that can link to `RIO` but also some other library like `libNet` or `libROOTDataFrame`. Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:74,interoperability,platform,platforms,74,> Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage. `-lHist` seems to be a good candidate. Adding it to the compiler options triggers the segfault. I could put the reproducer in `hist/test`. How does it sound @pcanal ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:264,reliability,doe,does,264,> Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage. `-lHist` seems to be a good candidate. Adding it to the compiler options triggers the segfault. I could put the reproducer in `hist/test`. How does it sound @pcanal ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:253,safety,test,test,253,> Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage. `-lHist` seems to be a good candidate. Adding it to the compiler options triggers the segfault. I could put the reproducer in `hist/test`. How does it sound @pcanal ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:111,testability,coverag,coverage,111,> Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage. `-lHist` seems to be a good candidate. Adding it to the compiler options triggers the segfault. I could put the reproducer in `hist/test`. How does it sound @pcanal ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:253,testability,test,test,253,> Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage. `-lHist` seems to be a good candidate. Adding it to the compiler options triggers the segfault. I could put the reproducer in `hist/test`. How does it sound @pcanal ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:2,usability,Prefer,Preferably,2,> Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage. `-lHist` seems to be a good candidate. Adding it to the compiler options triggers the segfault. I could put the reproducer in `hist/test`. How does it sound @pcanal ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:61,deployability,fail,failing,61,PR https://github.com/root-project/root/pull/13723 shows the failing test without the patches applied in this PR. @pcanal could you give another review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:86,deployability,patch,patches,86,PR https://github.com/root-project/root/pull/13723 shows the failing test without the patches applied in this PR. @pcanal could you give another review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:61,reliability,fail,failing,61,PR https://github.com/root-project/root/pull/13723 shows the failing test without the patches applied in this PR. @pcanal could you give another review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:69,safety,test,test,69,PR https://github.com/root-project/root/pull/13723 shows the failing test without the patches applied in this PR. @pcanal could you give another review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:86,safety,patch,patches,86,PR https://github.com/root-project/root/pull/13723 shows the failing test without the patches applied in this PR. @pcanal could you give another review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:145,safety,review,review,145,PR https://github.com/root-project/root/pull/13723 shows the failing test without the patches applied in this PR. @pcanal could you give another review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:86,security,patch,patches,86,PR https://github.com/root-project/root/pull/13723 shows the failing test without the patches applied in this PR. @pcanal could you give another review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:69,testability,test,test,69,PR https://github.com/root-project/root/pull/13723 shows the failing test without the patches applied in this PR. @pcanal could you give another review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/pull/13692:145,testability,review,review,145,PR https://github.com/root-project/root/pull/13723 shows the failing test without the patches applied in this PR. @pcanal could you give another review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13692
https://github.com/root-project/root/issues/13693:2,integrability,sub,submit,2,I submit PR #13703. . It addresses all issues found by @jblomer . Plus I found and fix one more - bar widths. Here one can compare two screenshots:. ![original](https://github.com/root-project/root/assets/4936580/b7ed291a-c35b-45fb-ad1a-14847d1f8b40). ![jsroot](https://github.com/root-project/root/assets/4936580/4ccad612-0e4c-454a-83b1-2c8441fc58f9).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13693
https://github.com/root-project/root/issues/13694:154,deployability,build,building,154,"Thanks for the really thorough description and all the help @cozzyd. I can confirm the issue running on Ubuntu 18.04.5 with python 3.11.5 + ROOT 6.28/06, building with gcc 7.5.0. (Where I ran across this in the first place.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:55,usability,help,help,55,"Thanks for the really thorough description and all the help @cozzyd. I can confirm the issue running on Ubuntu 18.04.5 with python 3.11.5 + ROOT 6.28/06, building with gcc 7.5.0. (Where I ran across this in the first place.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:75,usability,confirm,confirm,75,"Thanks for the really thorough description and all the help @cozzyd. I can confirm the issue running on Ubuntu 18.04.5 with python 3.11.5 + ROOT 6.28/06, building with gcc 7.5.0. (Where I ran across this in the first place.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:221,deployability,build,build,221,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:483,deployability,log,logic,483,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:202,integrability,configur,configure,202,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:202,modifiability,configur,configure,202,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:292,safety,test,testing,292,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:453,safety,test,tests,453,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:483,safety,log,logic,483,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:564,safety,compl,completely,564,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:202,security,configur,configure,202,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:483,security,log,logic,483,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:564,security,compl,completely,564,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:128,testability,assert,assertion,128,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:292,testability,test,testing,292,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:453,testability,test,tests,453,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:483,testability,log,logic,483,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:186,usability,command,command,186,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:266,usability,close,close,266,"Hi @cozzyd and thanks for the report! I built ROOT 6.28.06 on Fedora 38 with Python 3.11.5 and GCC 13.2.1. I cannot trigger the assertion as reported. Could you also tell the full cmake command used to configure the ROOT build? This way I can make sure that I am as close as possible to your testing environment. As for the solution you propose, in principle it makes sense, and if I could reproduce the problem I would at least give it a try on our CI tests. OTOH, I don't see this logic in upstream cppyy, so probably in the long term we should try to remove it completely if possible. Cheers,. Vincenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:79,deployability,build,building,79,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:216,deployability,build,build,216,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:260,deployability,fail,failing,260,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:375,deployability,build,building,375,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:681,deployability,fail,fails,681,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:704,deployability,build,builddir,704,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:713,deployability,build,build,713,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:719,deployability,BUILD,BUILD,719,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:816,deployability,fail,failed,816,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:410,modifiability,pac,packaged,410,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:260,reliability,fail,failing,260,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:681,reliability,fail,fails,681,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:816,reliability,fail,failed,816,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:564,safety,test,test,564,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:602,safety,test,test,602,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:636,safety,test,test,636,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:672,safety,test,test,672,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:898,safety,test,tests,898,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:159,testability,assert,assertions,159,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:250,testability,assert,assertion,250,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:510,testability,assert,assertions,510,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:564,testability,test,test,564,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:602,testability,test,test,602,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:636,testability,test,test,636,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:672,testability,test,test,672,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:784,testability,Assert,Assertion,784,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:898,testability,test,tests,898,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```. $ cat test.py . import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""). $ python3 test.py # succeeds. $ python3-debug test.py #fails. python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed. *** Break *** abort . .... ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,. -Cosmin. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:190,deployability,build,build,190,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3? I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:228,deployability,build,building,228,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3? I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:359,deployability,updat,updates,359,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3? I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:44,safety,test,tests,44,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3? I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:359,safety,updat,updates,359,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3? I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:359,security,updat,updates,359,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3? I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:44,testability,test,tests,44,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3? I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:181,usability,user,users,181,"> So it might be worth trying to run the CI tests with python3-debug rather than or in addition to python3? I am really unsure about this. I would say that it is extremely rare for users to build Python manually, even more than building ROOT manually. Still, thanks for giving us the full picture so now we can properly debug this issue. I will get back with updates",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:241,availability,cluster,clusters,241,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:946,availability,down,down,946,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:21,deployability,build,building,21,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:241,deployability,cluster,clusters,241,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:793,deployability,releas,release,793,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:801,deployability,build,builds,801,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:813,deployability,fail,failing,813,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:871,integrability,sub,subtly,871,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:150,interoperability,distribut,distribution,150,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:163,modifiability,pac,packages,163,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:531,reliability,doe,does,531,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:813,reliability,fail,failing,813,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:205,safety,test,testing,205,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:970,safety,compl,complicated,970,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:283,security,privil,privileges,283,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:970,security,compl,complicated,970,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:205,testability,test,testing,205,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:458,testability,assert,assertions,458,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:561,testability,assert,assertion,561,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:692,testability,assert,assertions,692,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:727,testability,assert,assertions,727,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:256,usability,user,users,256,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:884,usability,behavi,behavior,884,"Hi Vicenzo,. I agree building your own python is perhaps somewhat uncommon (and it is especially nonsensical to do it on Fedora, which has up to date distribution packages for both ROOT and python). I was testing an environment intended for clusters where users would not have admin privileges but may generally benefit from improvements in newer python than included, and cppyy must be built with the python you're using for it to work. . I don't think the assertions were necessarily meant to be enabled here, and disabling them does ""fix"" this issue (as the assertion isn't checked), but I think that's potentially somewhat besides the point. While it's very rare to run a python that has assertions enabled, presumably the assertions are there for a reason, even if they're not checked in release builds. The failing invariant could be harmless, or it may be causing subtly wrong behavior in the GC that could cause seemingly random problems down the road in a more complicated script. On the other hand, it also looks like things change again in python 3.12...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:20,deployability,upgrad,upgraded,20,"Hi @cozzyd, we just upgraded the CPyCppyy version in PyROOT to the current CPyCppyy `master`, and many issues with Python 3.11 were fixed there. Probably also this one. Can you check if with ROOT `master` things work fine for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:42,deployability,version,version,42,"Hi @cozzyd, we just upgraded the CPyCppyy version in PyROOT to the current CPyCppyy `master`, and many issues with Python 3.11 were fixed there. Probably also this one. Can you check if with ROOT `master` things work fine for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:67,energy efficiency,current,current,67,"Hi @cozzyd, we just upgraded the CPyCppyy version in PyROOT to the current CPyCppyy `master`, and many issues with Python 3.11 were fixed there. Probably also this one. Can you check if with ROOT `master` things work fine for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:42,integrability,version,version,42,"Hi @cozzyd, we just upgraded the CPyCppyy version in PyROOT to the current CPyCppyy `master`, and many issues with Python 3.11 were fixed there. Probably also this one. Can you check if with ROOT `master` things work fine for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:20,modifiability,upgrad,upgraded,20,"Hi @cozzyd, we just upgraded the CPyCppyy version in PyROOT to the current CPyCppyy `master`, and many issues with Python 3.11 were fixed there. Probably also this one. Can you check if with ROOT `master` things work fine for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:42,modifiability,version,version,42,"Hi @cozzyd, we just upgraded the CPyCppyy version in PyROOT to the current CPyCppyy `master`, and many issues with Python 3.11 were fixed there. Probably also this one. Can you check if with ROOT `master` things work fine for you? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:99,deployability,upgrad,upgrade,99,"Closing this issue because the thread was inactive, and problem was very likely fixed by the cppyy upgrade. @cozzyd, if you ever have time to check this again, and if the problem is still there with ROOT master, feel free to re-open this issue or create a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:99,modifiability,upgrad,upgrade,99,"Closing this issue because the thread was inactive, and problem was very likely fixed by the cppyy upgrade. @cozzyd, if you ever have time to check this again, and if the problem is still there with ROOT master, feel free to re-open this issue or create a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:134,performance,time,time,134,"Closing this issue because the thread was inactive, and problem was very likely fixed by the cppyy upgrade. @cozzyd, if you ever have time to check this again, and if the problem is still there with ROOT master, feel free to re-open this issue or create a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:29,energy efficiency,current,current,29,"I did find time to test that current ROOT with current python3.12-debug has no problems, but I didn't specifically check with python3.11-debug. I'm fine with closing the issue, since I suspect it is fixed as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:47,energy efficiency,current,current,47,"I did find time to test that current ROOT with current python3.12-debug has no problems, but I didn't specifically check with python3.11-debug. I'm fine with closing the issue, since I suspect it is fixed as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:102,interoperability,specif,specifically,102,"I did find time to test that current ROOT with current python3.12-debug has no problems, but I didn't specifically check with python3.11-debug. I'm fine with closing the issue, since I suspect it is fixed as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:11,performance,time,time,11,"I did find time to test that current ROOT with current python3.12-debug has no problems, but I didn't specifically check with python3.11-debug. I'm fine with closing the issue, since I suspect it is fixed as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:19,safety,test,test,19,"I did find time to test that current ROOT with current python3.12-debug has no problems, but I didn't specifically check with python3.11-debug. I'm fine with closing the issue, since I suspect it is fixed as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13694:19,testability,test,test,19,"I did find time to test that current ROOT with current python3.12-debug has no problems, but I didn't specifically check with python3.11-debug. I'm fine with closing the issue, since I suspect it is fixed as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13694
https://github.com/root-project/root/issues/13697:59,availability,error,errors,59,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:135,availability,error,errors,135,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:264,availability,error,error,264,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:59,performance,error,errors,59,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:135,performance,error,errors,135,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:264,performance,error,error,264,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:212,reliability,doe,does,212,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:59,safety,error,errors,59,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:135,safety,error,errors,135,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:150,safety,test,test,150,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:264,safety,error,error,264,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:150,testability,test,test,150,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:59,usability,error,errors,59,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:135,usability,error,errors,135,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:264,usability,error,error,264,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:326,usability,support,supported,326,"The problem is that one of the histogram is having all bin errors equal to zero. Is this intentional ? . If not please add the correct errors and the test will work correctly. . In that case the toy option (`X`) does not work and it returns a zero probability. An error should be probably produced, but this could be probably supported. I can provide a fix for this. . Thank you for the report",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:141,availability,error,error,141,"Hi, thanks for the reply, indeed, in this case the histograms do have 0 uncertainties. I was just surprised by the 0 probability. I think an error message would help, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:147,integrability,messag,message,147,"Hi, thanks for the reply, indeed, in this case the histograms do have 0 uncertainties. I was just surprised by the 0 probability. I think an error message would help, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:147,interoperability,messag,message,147,"Hi, thanks for the reply, indeed, in this case the histograms do have 0 uncertainties. I was just surprised by the 0 probability. I think an error message would help, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:141,performance,error,error,141,"Hi, thanks for the reply, indeed, in this case the histograms do have 0 uncertainties. I was just surprised by the 0 probability. I think an error message would help, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:141,safety,error,error,141,"Hi, thanks for the reply, indeed, in this case the histograms do have 0 uncertainties. I was just surprised by the 0 probability. I think an error message would help, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:141,usability,error,error,141,"Hi, thanks for the reply, indeed, in this case the histograms do have 0 uncertainties. I was just surprised by the 0 probability. I think an error message would help, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/issues/13697:161,usability,help,help,161,"Hi, thanks for the reply, indeed, in this case the histograms do have 0 uncertainties. I was just surprised by the 0 probability. I think an error message would help, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13697
https://github.com/root-project/root/pull/13699:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2004/python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13699
https://github.com/root-project/root/pull/13700:11,deployability,build,build,11,"@phsft-bot build also on mac13/cxx20, mac13arm/cxx20",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:13,availability,failur,failures,13,The numerous failures are fixed by this PR https://github.com/root-project/root/pull/13696,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:13,deployability,fail,failures,13,The numerous failures are fixed by this PR https://github.com/root-project/root/pull/13696,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:13,performance,failur,failures,13,The numerous failures are fixed by this PR https://github.com/root-project/root/pull/13696,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:13,reliability,fail,failures,13,The numerous failures are fixed by this PR https://github.com/root-project/root/pull/13696,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:207,availability,failur,failures,207,FWIW there were build problems in the incremental GitHub Actions CI (because I forgot to set the right label); they are gone in a clean build triggered by the merge to `master` and we are left with the test failures. Let's see how the nightlies go and then I will backport tomorrow.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:16,deployability,build,build,16,FWIW there were build problems in the incremental GitHub Actions CI (because I forgot to set the right label); they are gone in a clean build triggered by the merge to `master` and we are left with the test failures. Let's see how the nightlies go and then I will backport tomorrow.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:136,deployability,build,build,136,FWIW there were build problems in the incremental GitHub Actions CI (because I forgot to set the right label); they are gone in a clean build triggered by the merge to `master` and we are left with the test failures. Let's see how the nightlies go and then I will backport tomorrow.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:207,deployability,fail,failures,207,FWIW there were build problems in the incremental GitHub Actions CI (because I forgot to set the right label); they are gone in a clean build triggered by the merge to `master` and we are left with the test failures. Let's see how the nightlies go and then I will backport tomorrow.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:207,performance,failur,failures,207,FWIW there were build problems in the incremental GitHub Actions CI (because I forgot to set the right label); they are gone in a clean build triggered by the merge to `master` and we are left with the test failures. Let's see how the nightlies go and then I will backport tomorrow.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:207,reliability,fail,failures,207,FWIW there were build problems in the incremental GitHub Actions CI (because I forgot to set the right label); they are gone in a clean build triggered by the merge to `master` and we are left with the test failures. Let's see how the nightlies go and then I will backport tomorrow.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:202,safety,test,test,202,FWIW there were build problems in the incremental GitHub Actions CI (because I forgot to set the right label); they are gone in a clean build triggered by the merge to `master` and we are left with the test failures. Let's see how the nightlies go and then I will backport tomorrow.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13700:202,testability,test,test,202,FWIW there were build problems in the incremental GitHub Actions CI (because I forgot to set the right label); they are gone in a clean build triggered by the merge to `master` and we are left with the test failures. Let's see how the nightlies go and then I will backport tomorrow.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13700
https://github.com/root-project/root/pull/13704:0,availability,Failur,Failures,0,"Failures seem unrelated, and much of this will only be ""tested"" once it's merged...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13704
https://github.com/root-project/root/pull/13704:0,deployability,Fail,Failures,0,"Failures seem unrelated, and much of this will only be ""tested"" once it's merged...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13704
https://github.com/root-project/root/pull/13704:0,performance,Failur,Failures,0,"Failures seem unrelated, and much of this will only be ""tested"" once it's merged...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13704
https://github.com/root-project/root/pull/13704:0,reliability,Fail,Failures,0,"Failures seem unrelated, and much of this will only be ""tested"" once it's merged...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13704
https://github.com/root-project/root/pull/13704:56,safety,test,tested,56,"Failures seem unrelated, and much of this will only be ""tested"" once it's merged...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13704
https://github.com/root-project/root/pull/13704:56,testability,test,tested,56,"Failures seem unrelated, and much of this will only be ""tested"" once it's merged...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13704
https://github.com/root-project/root/pull/13705:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13705
https://github.com/root-project/root/pull/13705:4,availability,failur,failures,4,The failures seem unrelated. Pretty cool!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13705
https://github.com/root-project/root/pull/13705:4,deployability,fail,failures,4,The failures seem unrelated. Pretty cool!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13705
https://github.com/root-project/root/pull/13705:36,energy efficiency,cool,cool,36,The failures seem unrelated. Pretty cool!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13705
https://github.com/root-project/root/pull/13705:4,performance,failur,failures,4,The failures seem unrelated. Pretty cool!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13705
https://github.com/root-project/root/pull/13705:4,reliability,fail,failures,4,The failures seem unrelated. Pretty cool!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13705
https://github.com/root-project/root/pull/13706:126,availability,error,errors,126,@linev . When will this be released? I feel it's quite important. I have seen the compilation information and there are still errors on some platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13706
https://github.com/root-project/root/pull/13706:27,deployability,releas,released,27,@linev . When will this be released? I feel it's quite important. I have seen the compilation information and there are still errors on some platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13706
https://github.com/root-project/root/pull/13706:141,interoperability,platform,platforms,141,@linev . When will this be released? I feel it's quite important. I have seen the compilation information and there are still errors on some platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13706
https://github.com/root-project/root/pull/13706:126,performance,error,errors,126,@linev . When will this be released? I feel it's quite important. I have seen the compilation information and there are still errors on some platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13706
https://github.com/root-project/root/pull/13706:126,safety,error,errors,126,@linev . When will this be released? I feel it's quite important. I have seen the compilation information and there are still errors on some platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13706
https://github.com/root-project/root/pull/13706:126,usability,error,errors,126,@linev . When will this be released? I feel it's quite important. I have seen the compilation information and there are still errors on some platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13706
https://github.com/root-project/root/issues/13707:42,reliability,doe,does,42,"Generic comments about axis ticks.:. ROOT does not guarantee number of labels for the axis. And JSROOT uses different algorithm, which can produce different position for the labels. Like in the first example: ROOT makes 0, 0.2, 0.4, 0.8, 1 (5 divisions). JSROOT produced 0, 0.1, 0.2, 0.3, ..., 1 (10 divisions). By default settings `TAxis` should produce 10 divisions. . One can change it with `helper->GetYaxis()->SetNdivisions(508)` to get same results on web and plain ROOT. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:395,usability,help,helper,395,"Generic comments about axis ticks.:. ROOT does not guarantee number of labels for the axis. And JSROOT uses different algorithm, which can produce different position for the labels. Like in the first example: ROOT makes 0, 0.2, 0.4, 0.8, 1 (5 divisions). JSROOT produced 0, 0.1, 0.2, 0.3, ..., 1 (10 divisions). By default settings `TAxis` should produce 10 divisions. . One can change it with `helper->GetYaxis()->SetNdivisions(508)` to get same results on web and plain ROOT. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:89,energy efficiency,draw,drawn,89,"With histogram title is more complicated. . If ""AXIS"" option is specified - title is not drawn by ROOT. . Mean it is deviation from the ROOT functionality. I will fix it in JSROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:64,interoperability,specif,specified,64,"With histogram title is more complicated. . If ""AXIS"" option is specified - title is not drawn by ROOT. . Mean it is deviation from the ROOT functionality. I will fix it in JSROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:29,safety,compl,complicated,29,"With histogram title is more complicated. . If ""AXIS"" option is specified - title is not drawn by ROOT. . Mean it is deviation from the ROOT functionality. I will fix it in JSROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:29,security,compl,complicated,29,"With histogram title is more complicated. . If ""AXIS"" option is specified - title is not drawn by ROOT. . Mean it is deviation from the ROOT functionality. I will fix it in JSROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:6,energy efficiency,draw,drawing,6,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:53,energy efficiency,draw,drawing,53,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:111,energy efficiency,draw,drawing,111,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:144,energy efficiency,Draw,Draw,144,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:172,energy efficiency,Draw,Draw,172,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:247,energy efficiency,draw,drawing,247,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:102,testability,simpl,simplify,102,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:255,testability,emul,emulation,255,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:44,usability,support,supports,44,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:102,usability,simpl,simplify,102,"About drawing with two axes. . Web graphics supports drawing of axes on both sides. Therefore one can simplify drawing just doing:. ```. graph->Draw(""APL"");. graphPerCore->Draw(""PLX+Y+"");. ```. No need for extra transparent pads, no need for axis drawing emulation. I attach macro and produced output. Also see `graph->GetXaxis()->SetNdivisions(nodes.size());` - as many divisions are required. [scaling_new.C.txt](https://github.com/root-project/root/files/12724374/scaling_new.C.txt). [scaling_new.pdf](https://github.com/root-project/root/files/12724375/scaling_new.pdf).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:47,energy efficiency,draw,drawn,47,"To finalize:. 1. Histogram title should not be drawn with ""AXIS"" draw option, will be fixed in next PR. One can draw such histogram just with empty draw option to get title drawn. 2. There is grid drawing problem in the ROOT, should be addressed by @couet . 3. Number of axis labels is defined by `TAttAxis::SetNdivisions()` call and may differ between ROOT and web graphics. Although web graphic makes exactly configured number of divisions - when possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:65,energy efficiency,draw,draw,65,"To finalize:. 1. Histogram title should not be drawn with ""AXIS"" draw option, will be fixed in next PR. One can draw such histogram just with empty draw option to get title drawn. 2. There is grid drawing problem in the ROOT, should be addressed by @couet . 3. Number of axis labels is defined by `TAttAxis::SetNdivisions()` call and may differ between ROOT and web graphics. Although web graphic makes exactly configured number of divisions - when possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:112,energy efficiency,draw,draw,112,"To finalize:. 1. Histogram title should not be drawn with ""AXIS"" draw option, will be fixed in next PR. One can draw such histogram just with empty draw option to get title drawn. 2. There is grid drawing problem in the ROOT, should be addressed by @couet . 3. Number of axis labels is defined by `TAttAxis::SetNdivisions()` call and may differ between ROOT and web graphics. Although web graphic makes exactly configured number of divisions - when possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:148,energy efficiency,draw,draw,148,"To finalize:. 1. Histogram title should not be drawn with ""AXIS"" draw option, will be fixed in next PR. One can draw such histogram just with empty draw option to get title drawn. 2. There is grid drawing problem in the ROOT, should be addressed by @couet . 3. Number of axis labels is defined by `TAttAxis::SetNdivisions()` call and may differ between ROOT and web graphics. Although web graphic makes exactly configured number of divisions - when possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:173,energy efficiency,draw,drawn,173,"To finalize:. 1. Histogram title should not be drawn with ""AXIS"" draw option, will be fixed in next PR. One can draw such histogram just with empty draw option to get title drawn. 2. There is grid drawing problem in the ROOT, should be addressed by @couet . 3. Number of axis labels is defined by `TAttAxis::SetNdivisions()` call and may differ between ROOT and web graphics. Although web graphic makes exactly configured number of divisions - when possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:197,energy efficiency,draw,drawing,197,"To finalize:. 1. Histogram title should not be drawn with ""AXIS"" draw option, will be fixed in next PR. One can draw such histogram just with empty draw option to get title drawn. 2. There is grid drawing problem in the ROOT, should be addressed by @couet . 3. Number of axis labels is defined by `TAttAxis::SetNdivisions()` call and may differ between ROOT and web graphics. Although web graphic makes exactly configured number of divisions - when possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:411,integrability,configur,configured,411,"To finalize:. 1. Histogram title should not be drawn with ""AXIS"" draw option, will be fixed in next PR. One can draw such histogram just with empty draw option to get title drawn. 2. There is grid drawing problem in the ROOT, should be addressed by @couet . 3. Number of axis labels is defined by `TAttAxis::SetNdivisions()` call and may differ between ROOT and web graphics. Although web graphic makes exactly configured number of divisions - when possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:411,modifiability,configur,configured,411,"To finalize:. 1. Histogram title should not be drawn with ""AXIS"" draw option, will be fixed in next PR. One can draw such histogram just with empty draw option to get title drawn. 2. There is grid drawing problem in the ROOT, should be addressed by @couet . 3. Number of axis labels is defined by `TAttAxis::SetNdivisions()` call and may differ between ROOT and web graphics. Although web graphic makes exactly configured number of divisions - when possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13707:411,security,configur,configured,411,"To finalize:. 1. Histogram title should not be drawn with ""AXIS"" draw option, will be fixed in next PR. One can draw such histogram just with empty draw option to get title drawn. 2. There is grid drawing problem in the ROOT, should be addressed by @couet . 3. Number of axis labels is defined by `TAttAxis::SetNdivisions()` call and may differ between ROOT and web graphics. Although web graphic makes exactly configured number of divisions - when possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13707
https://github.com/root-project/root/issues/13708:73,usability,minim,minimal,73,"Hi, thanks for reporting. Before we consider this a bug, could you add a minimal reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:332,deployability,Updat,Update,332,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:547,deployability,Updat,Update,547,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:575,deployability,Updat,Update,575,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:532,energy efficiency,Draw,Draw,532,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:589,energy efficiency,Draw,DrawIntegral,589,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:332,safety,Updat,Update,332,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:547,safety,Updat,Update,547,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:575,safety,Updat,Update,575,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:332,security,Updat,Update,332,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:547,security,Updat,Update,547,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:575,security,Updat,Update,575,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:28,testability,simpl,simple,28,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:191,testability,context,context,191,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:28,usability,simpl,simple,28,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:168,usability,interact,interactively,168,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:199,usability,menu,menu,199,"I get the crash also with a simple C macro (extracted from your code) executed at the ROOT prompt. Reading the doc it looks like this functionality is meant to be used interactively from the context menu. Which means you need the graphics to be ready on the canvas. Therefore, to make it work in a ROOT script, you will need a few ""Update()"" to make sure the graphics id ready. Here is the working script:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. gPad->Update();. c->cd(2);. gPad->Update();. f->DrawIntegral();. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:308,energy efficiency,Draw,Draw,308,"Indeed, to be complete, the real functionality you are using is[ this one](https://root.cern/doc/master/classTGraph.html#a6f557cc5d68e7328ef578c2b2d839c8d). and the macro should be:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. c->cd(2);. auto g = new TGraph(f,""i"");. g->Draw(""al"");. }. ```. DrawIntrgral is really meant to be used ONLY from the context menu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:360,energy efficiency,Draw,Draw,360,"Indeed, to be complete, the real functionality you are using is[ this one](https://root.cern/doc/master/classTGraph.html#a6f557cc5d68e7328ef578c2b2d839c8d). and the macro should be:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. c->cd(2);. auto g = new TGraph(f,""i"");. g->Draw(""al"");. }. ```. DrawIntrgral is really meant to be used ONLY from the context menu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:381,energy efficiency,Draw,DrawIntrgral,381,"Indeed, to be complete, the real functionality you are using is[ this one](https://root.cern/doc/master/classTGraph.html#a6f557cc5d68e7328ef578c2b2d839c8d). and the macro should be:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. c->cd(2);. auto g = new TGraph(f,""i"");. g->Draw(""al"");. }. ```. DrawIntrgral is really meant to be used ONLY from the context menu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:14,safety,compl,complete,14,"Indeed, to be complete, the real functionality you are using is[ this one](https://root.cern/doc/master/classTGraph.html#a6f557cc5d68e7328ef578c2b2d839c8d). and the macro should be:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. c->cd(2);. auto g = new TGraph(f,""i"");. g->Draw(""al"");. }. ```. DrawIntrgral is really meant to be used ONLY from the context menu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:14,security,compl,complete,14,"Indeed, to be complete, the real functionality you are using is[ this one](https://root.cern/doc/master/classTGraph.html#a6f557cc5d68e7328ef578c2b2d839c8d). and the macro should be:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. c->cd(2);. auto g = new TGraph(f,""i"");. g->Draw(""al"");. }. ```. DrawIntrgral is really meant to be used ONLY from the context menu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:435,testability,context,context,435,"Indeed, to be complete, the real functionality you are using is[ this one](https://root.cern/doc/master/classTGraph.html#a6f557cc5d68e7328ef578c2b2d839c8d). and the macro should be:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. c->cd(2);. auto g = new TGraph(f,""i"");. g->Draw(""al"");. }. ```. DrawIntrgral is really meant to be used ONLY from the context menu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:443,usability,menu,menu,443,"Indeed, to be complete, the real functionality you are using is[ this one](https://root.cern/doc/master/classTGraph.html#a6f557cc5d68e7328ef578c2b2d839c8d). and the macro should be:. ```. {. auto *c = new TCanvas(""c4"", """", 720, 1024);. c->Divide(1, 2);. auto f = new TF1(""lin"", ""x"", -10, 10);. c->cd(1);. f->Draw();. c->cd(2);. auto g = new TGraph(f,""i"");. g->Draw(""al"");. }. ```. DrawIntrgral is really meant to be used ONLY from the context menu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:144,interoperability,specif,specific,144,It would be good to have some warning here or extension of the initial use case. I am mainly running compiled root in these days.. Is there any specific reasons why it is only meant to be used in interactive in the first place while the fix looks so simple ? @couet,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:46,modifiability,extens,extension,46,It would be good to have some warning here or extension of the initial use case. I am mainly running compiled root in these days.. Is there any specific reasons why it is only meant to be used in interactive in the first place while the fix looks so simple ? @couet,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:250,testability,simpl,simple,250,It would be good to have some warning here or extension of the initial use case. I am mainly running compiled root in these days.. Is there any specific reasons why it is only meant to be used in interactive in the first place while the fix looks so simple ? @couet,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:196,usability,interact,interactive,196,It would be good to have some warning here or extension of the initial use case. I am mainly running compiled root in these days.. Is there any specific reasons why it is only meant to be used in interactive in the first place while the fix looks so simple ? @couet,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:250,usability,simpl,simple,250,It would be good to have some warning here or extension of the initial use case. I am mainly running compiled root in these days.. Is there any specific reasons why it is only meant to be used in interactive in the first place while the fix looks so simple ? @couet,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:196,deployability,Updat,Update,196,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:143,energy efficiency,draw,drawn,143,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:317,energy efficiency,Draw,DrawIntegral,317,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:286,reliability,doe,does,286,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:196,safety,Updat,Update,196,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:196,security,Updat,Update,196,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:373,testability,simpl,simpler,373,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:373,usability,simpl,simpler,373,[The way it is implemented](https://root.cern.ch/doc/master/TF1_8cxx_source.html#l01408) makes it mandatory to have an active pad with the TF1 drawn in it. That's why you need to add these `gPad->Update()` if you really want to use this function (see my first example). My second reply does exactly the same thing as DrawIntegral without the `GetSelectedPad()`. That's the simpler/better way when you run compiled ROOT like you.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:94,testability,plan,planned,94,"Just my 2 cents: the GitHub issues that were not actual issues should maybe be closed as ""not planned""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13708:79,usability,close,closed,79,"Just my 2 cents: the GitHub issues that were not actual issues should maybe be closed as ""not planned""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13708
https://github.com/root-project/root/issues/13709:26,modifiability,paramet,parameters,26,"Your formula has only two parameters (f0 and beta), but you try to name 4 parameters. Try this instead and name parameters according to the numbers:. `TString formulaStr = ""[0] + ([1]-[0])/[2]*x"";`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:74,modifiability,paramet,parameters,74,"Your formula has only two parameters (f0 and beta), but you try to name 4 parameters. Try this instead and name parameters according to the numbers:. `TString formulaStr = ""[0] + ([1]-[0])/[2]*x"";`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:112,modifiability,paramet,parameters,112,"Your formula has only two parameters (f0 and beta), but you try to name 4 parameters. Try this instead and name parameters according to the numbers:. `TString formulaStr = ""[0] + ([1]-[0])/[2]*x"";`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:79,modifiability,paramet,parameters,79,"@ferdymercury as I mentioned I have a dynamic implementation involving these 4 parameters, but the string is not matching. This is not the point. Please consider this example............ if you prefer. ```. {. TString formulaStr = ""[f0] + [beta]*x"";. TF1 *formula = new TF1(""formula1"", formulaStr);. formula->SetParName (0, ""beta"");. formula->SetParameter(0, 0);. formula->SetParName (1, ""t0"");. formula->SetParameter(1, 0);. std::cout << formulaStr << std::endl;. std::cout << formula->GetFormula()->GetExpFormula() << std::endl;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:194,usability,prefer,prefer,194,"@ferdymercury as I mentioned I have a dynamic implementation involving these 4 parameters, but the string is not matching. This is not the point. Please consider this example............ if you prefer. ```. {. TString formulaStr = ""[f0] + [beta]*x"";. TF1 *formula = new TF1(""formula1"", formulaStr);. formula->SetParName (0, ""beta"");. formula->SetParameter(0, 0);. formula->SetParName (1, ""t0"");. formula->SetParameter(1, 0);. std::cout << formulaStr << std::endl;. std::cout << formula->GetFormula()->GetExpFormula() << std::endl;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:50,modifiability,extens,extension,50,"Also, I don't see why f0 is turning into t0. . By extension, it would make much more sense to assign based on name in this case and therefore attribute the attribute value correspondingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:32,modifiability,paramet,parameter,32,"Ok, I got it now. The point is: parameter names are sorted alphabetically. Not by the order of appearance in the formula. ```. TF1 *formula = new TF1(""formula1"", ""[b]+[a]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. versus. ```. TF1 *formula = new TF1(""formula1"", ""[a]+[b]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. So in you original formula, beta will be parameter 0, and f0 will be parameter 1. If you change parameter 1 to t0, you will get:. `[t0]+[beta]*x`. It happens probably here: https://root.cern.ch/doc/master/TFormula_8cxx_source.html#l01811. Maybe it would be helpful to add a note in the doxygen docu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:503,modifiability,paramet,parameter,503,"Ok, I got it now. The point is: parameter names are sorted alphabetically. Not by the order of appearance in the formula. ```. TF1 *formula = new TF1(""formula1"", ""[b]+[a]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. versus. ```. TF1 *formula = new TF1(""formula1"", ""[a]+[b]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. So in you original formula, beta will be parameter 0, and f0 will be parameter 1. If you change parameter 1 to t0, you will get:. `[t0]+[beta]*x`. It happens probably here: https://root.cern.ch/doc/master/TFormula_8cxx_source.html#l01811. Maybe it would be helpful to add a note in the doxygen docu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:531,modifiability,paramet,parameter,531,"Ok, I got it now. The point is: parameter names are sorted alphabetically. Not by the order of appearance in the formula. ```. TF1 *formula = new TF1(""formula1"", ""[b]+[a]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. versus. ```. TF1 *formula = new TF1(""formula1"", ""[a]+[b]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. So in you original formula, beta will be parameter 0, and f0 will be parameter 1. If you change parameter 1 to t0, you will get:. `[t0]+[beta]*x`. It happens probably here: https://root.cern.ch/doc/master/TFormula_8cxx_source.html#l01811. Maybe it would be helpful to add a note in the doxygen docu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:558,modifiability,paramet,parameter,558,"Ok, I got it now. The point is: parameter names are sorted alphabetically. Not by the order of appearance in the formula. ```. TF1 *formula = new TF1(""formula1"", ""[b]+[a]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. versus. ```. TF1 *formula = new TF1(""formula1"", ""[a]+[b]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. So in you original formula, beta will be parameter 0, and f0 will be parameter 1. If you change parameter 1 to t0, you will get:. `[t0]+[beta]*x`. It happens probably here: https://root.cern.ch/doc/master/TFormula_8cxx_source.html#l01811. Maybe it would be helpful to add a note in the doxygen docu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:719,usability,help,helpful,719,"Ok, I got it now. The point is: parameter names are sorted alphabetically. Not by the order of appearance in the formula. ```. TF1 *formula = new TF1(""formula1"", ""[b]+[a]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. versus. ```. TF1 *formula = new TF1(""formula1"", ""[a]+[b]*x"");. root [1] formula->GetParName(0). (const char *) ""a"". root [2] formula->GetParName(1). (const char *) ""b"". ```. So in you original formula, beta will be parameter 0, and f0 will be parameter 1. If you change parameter 1 to t0, you will get:. `[t0]+[beta]*x`. It happens probably here: https://root.cern.ch/doc/master/TFormula_8cxx_source.html#l01811. Maybe it would be helpful to add a note in the doxygen docu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:94,testability,plan,planned,94,"Just my 2 cents: the GitHub issues that were not actual issues should maybe be closed as ""not planned""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/issues/13709:79,usability,close,closed,79,"Just my 2 cents: the GitHub issues that were not actual issues should maybe be closed as ""not planned""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13709
https://github.com/root-project/root/pull/13711:49,availability,servic,services,49,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:144,availability,failur,failures,144,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:13,deployability,fail,failed,13,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:20,deployability,instal,installations,20,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:49,deployability,servic,services,49,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:144,deployability,fail,failures,144,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:49,integrability,servic,services,49,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:49,modifiability,servic,services,49,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:144,performance,failur,failures,144,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:13,reliability,fail,failed,13,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:144,reliability,fail,failures,144,see here for failed installations https://lcgapp-services.cern.ch/cdash/index.php?project=LCGSoft&date=2023-09-23. Edit: use dated link to show failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/pull/13711:23,deployability,instal,install,23,Thanks! We are able to install ROOT head again.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13711
https://github.com/root-project/root/issues/13713:86,deployability,stack,stack,86,"I have made good experience with the developers of [xsimd](https://github.com/xtensor-stack/xsimd). I have also been using `std::experimental::simd` for a few years, but that is limited to libstdc++. `std::simd` will likely hit C++26, since we finished its design at the last WG21 meeting (see status [here](https://github.com/cplusplus/papers/issues/670)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13713
https://github.com/root-project/root/issues/13713:17,usability,experien,experience,17,"I have made good experience with the developers of [xsimd](https://github.com/xtensor-stack/xsimd). I have also been using `std::experimental::simd` for a few years, but that is limited to libstdc++. `std::simd` will likely hit C++26, since we finished its design at the last WG21 meeting (see status [here](https://github.com/cplusplus/papers/issues/670)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13713
https://github.com/root-project/root/issues/13713:294,usability,statu,status,294,"I have made good experience with the developers of [xsimd](https://github.com/xtensor-stack/xsimd). I have also been using `std::experimental::simd` for a few years, but that is limited to libstdc++. `std::simd` will likely hit C++26, since we finished its design at the last WG21 meeting (see status [here](https://github.com/cplusplus/papers/issues/670)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13713
https://github.com/root-project/root/issues/13713:37,usability,close,closed,37,Thanks Bernhard. I think this can be closed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13713
https://github.com/root-project/root/issues/13713:22,usability,close,closed,22,"> I think this can be closed. So, what's the migration strategy?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13713
https://github.com/root-project/root/pull/13717:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13717
https://github.com/root-project/root/pull/13717:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13717
https://github.com/root-project/root/pull/13717:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13717
https://github.com/root-project/root/pull/13718:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2004-clang/default, ROOT-ubuntu2204/nortcxxmod, mac13arm/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/pull/13718:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2004-clang/default, ROOT-ubuntu2204/nortcxxmod, mac13arm/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/pull/13718:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2004-clang/default, ROOT-ubuntu2204/nortcxxmod, mac13arm/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/pull/13718:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2004-clang/default, ROOT-ubuntu2204/nortcxxmod, mac13arm/default with flags -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/pull/13718:112,availability,failur,failures,112,For the CI this worked quite well. I would be in favour of merging this because the changes will avoid constant failures related to PyKeras on Mac builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/pull/13718:112,deployability,fail,failures,112,For the CI this worked quite well. I would be in favour of merging this because the changes will avoid constant failures related to PyKeras on Mac builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/pull/13718:147,deployability,build,builds,147,For the CI this worked quite well. I would be in favour of merging this because the changes will avoid constant failures related to PyKeras on Mac builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/pull/13718:112,performance,failur,failures,112,For the CI this worked quite well. I would be in favour of merging this because the changes will avoid constant failures related to PyKeras on Mac builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/pull/13718:112,reliability,fail,failures,112,For the CI this worked quite well. I would be in favour of merging this because the changes will avoid constant failures related to PyKeras on Mac builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/pull/13718:97,safety,avoid,avoid,97,For the CI this worked quite well. I would be in favour of merging this because the changes will avoid constant failures related to PyKeras on Mac builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13718
https://github.com/root-project/root/issues/13719:378,availability,down,down,378,Problem is not only labels offset itself in the axis. . It is very small - just 0.005 and therefore labels are very close to axis. And ROOT adds extra offset to labels that they not touching axis line even when `offset == 0`. I have to add such extras to web graphic. . But main problem was significant difference in labels size for X axis. Only now I found that `TGaxis` scale down labels size by factor 0.66666 - for custom labels. This was not handled by web canvas. . Once it is there - position and size of X axis labels will be ok.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13719
https://github.com/root-project/root/issues/13719:372,deployability,scale,scale,372,Problem is not only labels offset itself in the axis. . It is very small - just 0.005 and therefore labels are very close to axis. And ROOT adds extra offset to labels that they not touching axis line even when `offset == 0`. I have to add such extras to web graphic. . But main problem was significant difference in labels size for X axis. Only now I found that `TGaxis` scale down labels size by factor 0.66666 - for custom labels. This was not handled by web canvas. . Once it is there - position and size of X axis labels will be ok.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13719
https://github.com/root-project/root/issues/13719:372,energy efficiency,scale,scale,372,Problem is not only labels offset itself in the axis. . It is very small - just 0.005 and therefore labels are very close to axis. And ROOT adds extra offset to labels that they not touching axis line even when `offset == 0`. I have to add such extras to web graphic. . But main problem was significant difference in labels size for X axis. Only now I found that `TGaxis` scale down labels size by factor 0.66666 - for custom labels. This was not handled by web canvas. . Once it is there - position and size of X axis labels will be ok.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13719
https://github.com/root-project/root/issues/13719:372,modifiability,scal,scale,372,Problem is not only labels offset itself in the axis. . It is very small - just 0.005 and therefore labels are very close to axis. And ROOT adds extra offset to labels that they not touching axis line even when `offset == 0`. I have to add such extras to web graphic. . But main problem was significant difference in labels size for X axis. Only now I found that `TGaxis` scale down labels size by factor 0.66666 - for custom labels. This was not handled by web canvas. . Once it is there - position and size of X axis labels will be ok.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13719
https://github.com/root-project/root/issues/13719:372,performance,scale,scale,372,Problem is not only labels offset itself in the axis. . It is very small - just 0.005 and therefore labels are very close to axis. And ROOT adds extra offset to labels that they not touching axis line even when `offset == 0`. I have to add such extras to web graphic. . But main problem was significant difference in labels size for X axis. Only now I found that `TGaxis` scale down labels size by factor 0.66666 - for custom labels. This was not handled by web canvas. . Once it is there - position and size of X axis labels will be ok.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13719
https://github.com/root-project/root/issues/13719:291,security,sign,significant,291,Problem is not only labels offset itself in the axis. . It is very small - just 0.005 and therefore labels are very close to axis. And ROOT adds extra offset to labels that they not touching axis line even when `offset == 0`. I have to add such extras to web graphic. . But main problem was significant difference in labels size for X axis. Only now I found that `TGaxis` scale down labels size by factor 0.66666 - for custom labels. This was not handled by web canvas. . Once it is there - position and size of X axis labels will be ok.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13719
https://github.com/root-project/root/issues/13719:116,usability,close,close,116,Problem is not only labels offset itself in the axis. . It is very small - just 0.005 and therefore labels are very close to axis. And ROOT adds extra offset to labels that they not touching axis line even when `offset == 0`. I have to add such extras to web graphic. . But main problem was significant difference in labels size for X axis. Only now I found that `TGaxis` scale down labels size by factor 0.66666 - for custom labels. This was not handled by web canvas. . Once it is there - position and size of X axis labels will be ok.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13719
https://github.com/root-project/root/issues/13719:419,usability,custom,custom,419,Problem is not only labels offset itself in the axis. . It is very small - just 0.005 and therefore labels are very close to axis. And ROOT adds extra offset to labels that they not touching axis line even when `offset == 0`. I have to add such extras to web graphic. . But main problem was significant difference in labels size for X axis. Only now I found that `TGaxis` scale down labels size by factor 0.66666 - for custom labels. This was not handled by web canvas. . Once it is there - position and size of X axis labels will be ok.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13719
https://github.com/root-project/root/pull/13720:38,deployability,build,build,38,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:70,deployability,fail,fail,70,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:153,deployability,version,version,153,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:231,deployability,build,build,231,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:153,integrability,version,version,153,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:153,modifiability,version,version,153,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:70,reliability,fail,fail,70,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:217,reliability,doe,does,217,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:97,safety,test,tests,97,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:97,testability,test,tests,97,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:164,testability,simpl,simply,164,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13720:164,usability,simpl,simply,164,"This is an interesting situation. The build on mac12arm/cxx20 did not fail, it's ""unstable"". All tests pass but there are warnings triggered by TBB. The version is simply too old (2019). On Mac13, cxx17 or cxx20, TBB does not even build. A PR is coming to propose a fix.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13720
https://github.com/root-project/root/pull/13724:24,deployability,updat,updating,24,Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:24,safety,updat,updating,24,Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:24,security,updat,updating,24,Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:26,deployability,updat,updating,26,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:104,deployability,continu,continuity,104,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:231,deployability,version,version,231,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:314,deployability,configurat,configuration,314,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:231,integrability,version,version,231,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:314,integrability,configur,configuration,314,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:206,modifiability,maintain,maintaining,206,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:231,modifiability,version,version,231,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:314,modifiability,configur,configuration,314,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:26,safety,updat,updating,26,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:206,safety,maintain,maintaining,206,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:26,security,updat,updating,26,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:314,security,configur,configuration,314,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:298,testability,simpl,simplifying,298,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:265,usability,person,personally,265,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:298,usability,simpl,simplifying,298,"> Sorry - I'm missing why updating builtin tbb unconditionally is off the table? Is it? Not really, for continuity this was a first proposal, also linked to some discussions in the LIM. The overall cost of maintaining just one TBB version would be much lower and I personally would be in favour of simplifying the configuration, if possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:53,deployability,updat,update,53,Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:71,deployability,version,version,71,Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:82,energy efficiency,current,currently,82,Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:71,integrability,version,version,71,Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:71,modifiability,version,version,71,Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:53,safety,updat,update,53,Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:53,security,updat,update,53,Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:55,deployability,updat,update,55,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:73,deployability,version,version,73,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:151,deployability,updat,updated,151,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:328,deployability,version,version,328,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:84,energy efficiency,current,currently,84,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:73,integrability,version,version,73,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:328,integrability,version,version,328,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:73,modifiability,version,version,73,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:328,modifiability,version,version,328,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:231,performance,perform,performance,231,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:55,safety,updat,update,55,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:151,safety,updat,updated,151,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:55,security,updat,update,55,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:151,security,updat,updated,151,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:231,usability,perform,performance,231,> Thanks. Could you maybe check with the CI whether an update to the tbb version we currently use in master is working well? Thanks for the comment. I updated the PR to do this. It's also important to note that there is no runtime performance change for major benchmarks such as RDF's in the master branch when changing the TBB version (it happened in May 2023).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:120,deployability,build,builds,120,"Now that the code has been thoroughly tested, the changes have been re-expressed as cherry-picks for the final round of builds before the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:38,safety,test,tested,38,"Now that the code has been thoroughly tested, the changes have been re-expressed as cherry-picks for the final round of builds before the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:38,testability,test,tested,38,"Now that the code has been thoroughly tested, the changes have been re-expressed as cherry-picks for the final round of builds before the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/pull/13724:0,usability,Close,Closes,0,Closes #7063.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13724
https://github.com/root-project/root/issues/13729:48,usability,close,closed,48,@guitargeek @lmoneta just checking: can this be closed?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13729
https://github.com/root-project/root/issues/13730:123,availability,error,error,123,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:148,availability,operat,operator,148,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:351,availability,operat,operator,351,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:442,availability,operat,operator,442,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:529,availability,operat,operator,529,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:597,availability,operat,operator,597,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:670,availability,operat,operator,670,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:735,availability,operat,operator,735,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:801,availability,operat,operator,801,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:872,availability,operat,operator,872,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:942,availability,operat,operator,942,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:1016,availability,operat,operator,1016,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:1091,availability,operat,operator,1091,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:1171,availability,operat,operator,1171,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:123,performance,error,error,123,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:123,safety,error,error,123,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:2,usability,confirm,confirm,2,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:123,usability,error,error,123,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:252,usability,User,Users,252,"I confirm. On Mac we get:. ```. root [0] 2.*TComplex(2,2). (TComplex) (4,4i). root [1] 2*TComplex(2,2). ROOT_prompt_1:1:2: error: use of overloaded operator '*' is ambiguous (with operand types 'int' and 'TComplex'). 2*TComplex(2,2). ~^~~~~~~~~~~~~~. /Users/couet/git/couet-root-bin/include/TComplex.h:88:20: note: candidate function. friend TComplex operator *(Double_t d, const TComplex & c). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, float). 2*TComplex(2,2). ^. ROOT_prompt_1:1:2: note: built-in candidate operator*(int, double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long double). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, __int128). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned int). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned long long). ROOT_prompt_1:1:2: note: built-in candidate operator*(int, unsigned __int128). root [2] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:75,safety,compl,complex,75,"For my own curiosity, what is the advantage of using `TComplex` over `std::complex`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:75,security,compl,complex,75,"For my own curiosity, what is the advantage of using `TComplex` over `std::complex`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:39,integrability,interfac,interfaces,39,"Probably compatibility with other ROOT interfaces. But indeed I don't think we need to support this `TComplex` class that much. I have opened a PR to address this issue though, so it can be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:9,interoperability,compatib,compatibility,9,"Probably compatibility with other ROOT interfaces. But indeed I don't think we need to support this `TComplex` class that much. I have opened a PR to address this issue though, so it can be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:39,interoperability,interfac,interfaces,39,"Probably compatibility with other ROOT interfaces. But indeed I don't think we need to support this `TComplex` class that much. I have opened a PR to address this issue though, so it can be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:39,modifiability,interfac,interfaces,39,"Probably compatibility with other ROOT interfaces. But indeed I don't think we need to support this `TComplex` class that much. I have opened a PR to address this issue though, so it can be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:87,usability,support,support,87,"Probably compatibility with other ROOT interfaces. But indeed I don't think we need to support this `TComplex` class that much. I have opened a PR to address this issue though, so it can be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:190,usability,close,closed,190,"Probably compatibility with other ROOT interfaces. But indeed I don't think we need to support this `TComplex` class that much. I have opened a PR to address this issue though, so it can be closed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:91,availability,operat,operator,91,Alternatively and / or additionally it might make a lot of sense to remove the lines. ```. operator Float_t () const {return static_cast<Float_t>(fRe);}. operator Int_t () const {return static_cast<Int_t>(fRe);}. ```. and keep only the conversion to double.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:154,availability,operat,operator,154,Alternatively and / or additionally it might make a lot of sense to remove the lines. ```. operator Float_t () const {return static_cast<Float_t>(fRe);}. operator Int_t () const {return static_cast<Int_t>(fRe);}. ```. and keep only the conversion to double.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:236,interoperability,convers,conversion,236,Alternatively and / or additionally it might make a lot of sense to remove the lines. ```. operator Float_t () const {return static_cast<Float_t>(fRe);}. operator Int_t () const {return static_cast<Int_t>(fRe);}. ```. and keep only the conversion to double.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13730:68,interoperability,convers,conversions,68,I agree that this should be considered in the future. Implicit type conversions always come back to bite you at some point and should be forbidden :slightly_smiling_face:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13730
https://github.com/root-project/root/issues/13731:121,deployability,contain,containing,121,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:305,deployability,build,build,305,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:463,deployability,Stack,Stack,463,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:502,deployability,modul,modules,502,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:653,deployability,contain,contained,653,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:502,modifiability,modul,modules,502,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:179,safety,test,test,179,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:328,safety,test,test,328,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:502,safety,modul,modules,502,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:560,safety,test,test,560,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:437,security,token,token,437,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:179,testability,test,test,179,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:328,testability,test,test,328,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:560,testability,test,test,560,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:63,usability,support,support,63,"We can escape all special characters, but which ones should we support? Because we might have problems with `${ROOTSYS}` containing those characters. I tried with `master.[c++17](test)` (escaping these characters: `[ ] + . ( )`, but then I got many warnings like:. ```. CMake Warning (dev) at C:/root-dev/build/x64/master.c++17(test)/ROOTConfig.cmake:67:. Syntax Warning in cmake code at column 63. Argument not separated from preceding token by whitespace. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). test/CMakeLists.txt:18 (find_package). ```. And also:. ```. CMake Warning:. Value of ROOTSYS contained a newline; truncating. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:79,reliability,pra,practically,79,"I propose a possible fix in the linked PR, based on existing CMake discussion, practically we escape every character, CMake is happy to accept `\a` as `a` :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:81,reliability,pra,practically,81,"> I propose a possible fix in the linked PR, based on existing CMake discussion, practically we escape every character, CMake is happy to accept `\a` as `a` :). Right, but accepting any character will not help, see my previous comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:205,usability,help,help,205,"> I propose a possible fix in the linked PR, based on existing CMake discussion, practically we escape every character, CMake is happy to accept `\a` as `a` :). Right, but accepting any character will not help, see my previous comment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:18,availability,error,errors,18,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:619,availability,error,error,619,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:81,deployability,build,build,81,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:183,deployability,FAIL,FAILED,183,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:18,performance,error,errors,18,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:619,performance,error,error,619,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:183,reliability,FAIL,FAILED,183,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:18,safety,error,errors,18,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:279,safety,test,test,279,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:379,safety,test,test,379,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:557,safety,test,test,557,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:619,safety,error,error,619,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:739,safety,test,test,739,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:917,safety,test,test,917,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:641,security,token,token,641,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:279,testability,test,test,279,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:379,testability,test,test,379,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:557,testability,test,test,557,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:739,testability,test,test,739,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:917,testability,test,test,917,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:18,usability,error,errors,18,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:619,usability,error,error,619,"I don't get those errors with the linked PR. But I get different ones during the build. ```. [16/7002] Copying /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C. FAILED: tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C . cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C. /bin/sh: -c: line 1: syntax error near unexpected token `('. /bin/sh: -c: line 1: `cd ""/home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)"" && /usr/bin/cmake -E copy_if_different /home/vpadulan/Programs/rootproject/rootsrc/tutorials/graphics/crown.C /home/vpadulan/Programs/rootproject/rootbuild/master.[c++17](test)/tutorials/graphics/crown.C'. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:119,deployability,build,build,119,"That's my point. We should not allow any special character, or we have to properly handle them through the whole CMake build system, also with the tests and roottest...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:147,safety,test,tests,147,"That's my point. We should not allow any special character, or we have to properly handle them through the whole CMake build system, also with the tests and roottest...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:147,testability,test,tests,147,"That's my point. We should not allow any special character, or we have to properly handle them through the whole CMake build system, also with the tests and roottest...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:145,availability,state,state,145,"I agree, also doing some more research led me to [this](https://gitlab.kitware.com/cmake/cmake/-/issues/16207). The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:213,deployability,build,build,213,"I agree, also doing some more research led me to [this](https://gitlab.kitware.com/cmake/cmake/-/issues/16207). The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:145,integrability,state,state,145,"I agree, also doing some more research led me to [this](https://gitlab.kitware.com/cmake/cmake/-/issues/16207). The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:122,modifiability,maintain,maintainers,122,"I agree, also doing some more research led me to [this](https://gitlab.kitware.com/cmake/cmake/-/issues/16207). The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:122,safety,maintain,maintainers,122,"I agree, also doing some more research led me to [this](https://gitlab.kitware.com/cmake/cmake/-/issues/16207). The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:88,deployability,build,building,88,"Or test what can be used. The `master.c++17` seems OK so far, at least on Windows (it's building right now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:3,safety,test,test,3,"Or test what can be used. The `master.c++17` seems OK so far, at least on Windows (it's building right now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:3,testability,test,test,3,"Or test what can be used. The `master.c++17` seems OK so far, at least on Windows (it's building right now)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:162,availability,Error,Error,162,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:252,availability,Error,Error,252,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:342,availability,Error,Error,342,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:432,availability,Error,Error,432,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:522,availability,Error,Error,522,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:612,availability,Error,Error,612,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:162,performance,Error,Error,162,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:252,performance,Error,Error,252,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:342,performance,Error,Error,342,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:432,performance,Error,Error,432,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:522,performance,Error,Error,522,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:612,performance,Error,Error,612,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:162,safety,Error,Error,162,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:252,safety,Error,Error,252,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:342,safety,Error,Error,342,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:432,safety,Error,Error,432,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:522,safety,Error,Error,522,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:612,safety,Error,Error,612,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:162,usability,Error,Error,162,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:252,usability,Error,Error,252,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:342,usability,Error,Error,342,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:432,usability,Error,Error,432,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:522,usability,Error,Error,522,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:612,usability,Error,Error,612,"BTW, even after fixing `RootMacros.cmake`, there are still a lot of those warnings:. ```. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. RegularExpression::compile(): Nested *?+. RegularExpression::compile(): Error in compile. ```. coming from somewhere else (trying to figure out)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:35,availability,state,state,35,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:418,availability,error,error,418,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:103,deployability,build,build,103,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:313,deployability,contain,contains,313,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:35,integrability,state,state,35,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:424,integrability,messag,message,424,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:424,interoperability,messag,message,424,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:12,modifiability,maintain,maintainers,12,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:418,performance,error,error,418,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:12,safety,maintain,maintainers,12,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:418,safety,error,error,418,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:599,safety,compl,complains,599,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:599,security,compl,complains,599,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:418,usability,error,error,418,"> The CMake maintainers themselves state that the best workaround for ""cmake not working properly when build directories include special characters"" is ""do not use those special characters"". So probably we should not do anything about this. I think at this point we should explicitly reject if the directory name contains unsupported characters. Not doing anything is in my opinion not an option as it still result in error message but with 2 deadly flaws: it floods the screen with zillions of repetitions and requires to (after finding the ""right"" location) the line of CMake to figure out why it complains.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:81,deployability,contain,contain,81,"@pcanal it would be nice if the cmake invocation stopped immediately if the path contain ""wrong"" characters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/issues/13731:49,usability,stop,stopped,49,"@pcanal it would be nice if the cmake invocation stopped immediately if the path contain ""wrong"" characters.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13731
https://github.com/root-project/root/pull/13733:401,integrability,FILTER,FILTER,401,"Well, I'm trying this solution:. ```. set(CMAKE_SOURCE_DIR_ESCAPED ${CMAKE_SOURCE_DIR}). set(CMAKE_BINARY_DIR_ESCAPED ${CMAKE_BINARY_DIR}). set(special_chars [ ] + ( )). foreach(char ${special_chars}). string(REPLACE ${char} ""\\${char}"" CMAKE_SOURCE_DIR_ESCAPED ${CMAKE_SOURCE_DIR_ESCAPED}). string(REPLACE ${char} ""\\${char}"" CMAKE_BINARY_DIR_ESCAPED ${CMAKE_BINARY_DIR_ESCAPED}). endforeach(). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_SOURCE_DIR_ESCAPED}""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/ginclude""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/externals""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/builtins""). ```. (but note my comment on https://github.com/root-project/root/issues/13731), I think we can only escape the `+` without having to change the way `${ROOTSYS}` is used",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:468,integrability,FILTER,FILTER,468,"Well, I'm trying this solution:. ```. set(CMAKE_SOURCE_DIR_ESCAPED ${CMAKE_SOURCE_DIR}). set(CMAKE_BINARY_DIR_ESCAPED ${CMAKE_BINARY_DIR}). set(special_chars [ ] + ( )). foreach(char ${special_chars}). string(REPLACE ${char} ""\\${char}"" CMAKE_SOURCE_DIR_ESCAPED ${CMAKE_SOURCE_DIR_ESCAPED}). string(REPLACE ${char} ""\\${char}"" CMAKE_BINARY_DIR_ESCAPED ${CMAKE_BINARY_DIR_ESCAPED}). endforeach(). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_SOURCE_DIR_ESCAPED}""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/ginclude""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/externals""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/builtins""). ```. (but note my comment on https://github.com/root-project/root/issues/13731), I think we can only escape the `+` without having to change the way `${ROOTSYS}` is used",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:544,integrability,FILTER,FILTER,544,"Well, I'm trying this solution:. ```. set(CMAKE_SOURCE_DIR_ESCAPED ${CMAKE_SOURCE_DIR}). set(CMAKE_BINARY_DIR_ESCAPED ${CMAKE_BINARY_DIR}). set(special_chars [ ] + ( )). foreach(char ${special_chars}). string(REPLACE ${char} ""\\${char}"" CMAKE_SOURCE_DIR_ESCAPED ${CMAKE_SOURCE_DIR_ESCAPED}). string(REPLACE ${char} ""\\${char}"" CMAKE_BINARY_DIR_ESCAPED ${CMAKE_BINARY_DIR_ESCAPED}). endforeach(). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_SOURCE_DIR_ESCAPED}""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/ginclude""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/externals""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/builtins""). ```. (but note my comment on https://github.com/root-project/root/issues/13731), I think we can only escape the `+` without having to change the way `${ROOTSYS}` is used",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:621,integrability,FILTER,FILTER,621,"Well, I'm trying this solution:. ```. set(CMAKE_SOURCE_DIR_ESCAPED ${CMAKE_SOURCE_DIR}). set(CMAKE_BINARY_DIR_ESCAPED ${CMAKE_BINARY_DIR}). set(special_chars [ ] + ( )). foreach(char ${special_chars}). string(REPLACE ${char} ""\\${char}"" CMAKE_SOURCE_DIR_ESCAPED ${CMAKE_SOURCE_DIR_ESCAPED}). string(REPLACE ${char} ""\\${char}"" CMAKE_BINARY_DIR_ESCAPED ${CMAKE_BINARY_DIR_ESCAPED}). endforeach(). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_SOURCE_DIR_ESCAPED}""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/ginclude""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/externals""). list(FILTER incdirs EXCLUDE REGEX ""^${CMAKE_BINARY_DIR_ESCAPED}/builtins""). ```. (but note my comment on https://github.com/root-project/root/issues/13731), I think we can only escape the `+` without having to change the way `${ROOTSYS}` is used",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:170,availability,error,error,170,"Closing this PR as we understood that there is no proper way to treat special characters in build directories in cmake. Possibly, a different PR with a patch to throw an error if special characters are used will be open",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:92,deployability,build,build,92,"Closing this PR as we understood that there is no proper way to treat special characters in build directories in cmake. Possibly, a different PR with a patch to throw an error if special characters are used will be open",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:152,deployability,patch,patch,152,"Closing this PR as we understood that there is no proper way to treat special characters in build directories in cmake. Possibly, a different PR with a patch to throw an error if special characters are used will be open",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:170,performance,error,error,170,"Closing this PR as we understood that there is no proper way to treat special characters in build directories in cmake. Possibly, a different PR with a patch to throw an error if special characters are used will be open",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:152,safety,patch,patch,152,"Closing this PR as we understood that there is no proper way to treat special characters in build directories in cmake. Possibly, a different PR with a patch to throw an error if special characters are used will be open",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:170,safety,error,error,170,"Closing this PR as we understood that there is no proper way to treat special characters in build directories in cmake. Possibly, a different PR with a patch to throw an error if special characters are used will be open",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:152,security,patch,patch,152,"Closing this PR as we understood that there is no proper way to treat special characters in build directories in cmake. Possibly, a different PR with a patch to throw an error if special characters are used will be open",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/pull/13733:170,usability,error,error,170,"Closing this PR as we understood that there is no proper way to treat special characters in build directories in cmake. Possibly, a different PR with a patch to throw an error if special characters are used will be open",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13733
https://github.com/root-project/root/issues/13734:104,deployability,patch,patches,104,"For some reason, the library needs to have the RPath also pointing to $ROOTSYS/lib. For example, if one patches the binary after linking with . ```. install_name_tool foo_C.so -add_rpath $ROOTSYS/lib. ```. then, the command work w/o loading libRint by hand, i.e. the link to the lib is honoured (thanks to @vepadulano for the debugging session that led to this post!).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13734
https://github.com/root-project/root/issues/13734:233,energy efficiency,load,loading,233,"For some reason, the library needs to have the RPath also pointing to $ROOTSYS/lib. For example, if one patches the binary after linking with . ```. install_name_tool foo_C.so -add_rpath $ROOTSYS/lib. ```. then, the command work w/o loading libRint by hand, i.e. the link to the lib is honoured (thanks to @vepadulano for the debugging session that led to this post!).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13734
https://github.com/root-project/root/issues/13734:233,performance,load,loading,233,"For some reason, the library needs to have the RPath also pointing to $ROOTSYS/lib. For example, if one patches the binary after linking with . ```. install_name_tool foo_C.so -add_rpath $ROOTSYS/lib. ```. then, the command work w/o loading libRint by hand, i.e. the link to the lib is honoured (thanks to @vepadulano for the debugging session that led to this post!).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13734
https://github.com/root-project/root/issues/13734:104,safety,patch,patches,104,"For some reason, the library needs to have the RPath also pointing to $ROOTSYS/lib. For example, if one patches the binary after linking with . ```. install_name_tool foo_C.so -add_rpath $ROOTSYS/lib. ```. then, the command work w/o loading libRint by hand, i.e. the link to the lib is honoured (thanks to @vepadulano for the debugging session that led to this post!).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13734
https://github.com/root-project/root/issues/13734:104,security,patch,patches,104,"For some reason, the library needs to have the RPath also pointing to $ROOTSYS/lib. For example, if one patches the binary after linking with . ```. install_name_tool foo_C.so -add_rpath $ROOTSYS/lib. ```. then, the command work w/o loading libRint by hand, i.e. the link to the lib is honoured (thanks to @vepadulano for the debugging session that led to this post!).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13734
https://github.com/root-project/root/issues/13734:336,security,session,session,336,"For some reason, the library needs to have the RPath also pointing to $ROOTSYS/lib. For example, if one patches the binary after linking with . ```. install_name_tool foo_C.so -add_rpath $ROOTSYS/lib. ```. then, the command work w/o loading libRint by hand, i.e. the link to the lib is honoured (thanks to @vepadulano for the debugging session that led to this post!).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13734
https://github.com/root-project/root/issues/13734:216,usability,command,command,216,"For some reason, the library needs to have the RPath also pointing to $ROOTSYS/lib. For example, if one patches the binary after linking with . ```. install_name_tool foo_C.so -add_rpath $ROOTSYS/lib. ```. then, the command work w/o loading libRint by hand, i.e. the link to the lib is honoured (thanks to @vepadulano for the debugging session that led to this post!).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13734
https://github.com/root-project/root/issues/13734:74,usability,command,command,74,So the equivalent to this `-add_rpath` is likely missing from the `ACLiC` command line. In the original setup are `LD_LIBRARY_PATH` and `DYLD_LIBRARY_PATH` properly set?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13734
https://github.com/root-project/root/pull/13736:12,availability,failur,failure,12,mac11/noimt failure is unrelated. (@dpiparo is looking into it.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:12,deployability,fail,failure,12,mac11/noimt failure is unrelated. (@dpiparo is looking into it.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:12,performance,failur,failure,12,mac11/noimt failure is unrelated. (@dpiparo is looking into it.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:12,reliability,fail,failure,12,mac11/noimt failure is unrelated. (@dpiparo is looking into it.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:28,deployability,log,log,28,You didn't apply the commit log suggestion... Let me just squash these two such that I get a chance to rewrite log :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:111,deployability,log,log,111,You didn't apply the commit log suggestion... Let me just squash these two such that I get a chance to rewrite log :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:28,safety,log,log,28,You didn't apply the commit log suggestion... Let me just squash these two such that I get a chance to rewrite log :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:111,safety,log,log,111,You didn't apply the commit log suggestion... Let me just squash these two such that I get a chance to rewrite log :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:28,security,log,log,28,You didn't apply the commit log suggestion... Let me just squash these two such that I get a chance to rewrite log :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:111,security,log,log,111,You didn't apply the commit log suggestion... Let me just squash these two such that I get a chance to rewrite log :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:28,testability,log,log,28,You didn't apply the commit log suggestion... Let me just squash these two such that I get a chance to rewrite log :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13736:111,testability,log,log,111,You didn't apply the commit log suggestion... Let me just squash these two such that I get a chance to rewrite log :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13736
https://github.com/root-project/root/pull/13737:11,deployability,build,build,11,@phsft-bot build also on macbeta/cxx20,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:70,energy efficiency,sustainab,sustainable,70,"Hi, thanks for the quick fix :+1:. I'm not sure if this is really the sustainable solution though. As you see in the [root-config script](https://github.com/root-project/root/blob/master/config/root-config.in#L399), there are also other platforms that might use `-rpath`. Is there maybe a way to get these `root-config --auxlibs` directly into the ACLiC command, without hardcoding the flags again behind various preprocessor guards for different platforms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:237,interoperability,platform,platforms,237,"Hi, thanks for the quick fix :+1:. I'm not sure if this is really the sustainable solution though. As you see in the [root-config script](https://github.com/root-project/root/blob/master/config/root-config.in#L399), there are also other platforms that might use `-rpath`. Is there maybe a way to get these `root-config --auxlibs` directly into the ACLiC command, without hardcoding the flags again behind various preprocessor guards for different platforms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:447,interoperability,platform,platforms,447,"Hi, thanks for the quick fix :+1:. I'm not sure if this is really the sustainable solution though. As you see in the [root-config script](https://github.com/root-project/root/blob/master/config/root-config.in#L399), there are also other platforms that might use `-rpath`. Is there maybe a way to get these `root-config --auxlibs` directly into the ACLiC command, without hardcoding the flags again behind various preprocessor guards for different platforms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:371,security,hardcod,hardcoding,371,"Hi, thanks for the quick fix :+1:. I'm not sure if this is really the sustainable solution though. As you see in the [root-config script](https://github.com/root-project/root/blob/master/config/root-config.in#L399), there are also other platforms that might use `-rpath`. Is there maybe a way to get these `root-config --auxlibs` directly into the ACLiC command, without hardcoding the flags again behind various preprocessor guards for different platforms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:354,usability,command,command,354,"Hi, thanks for the quick fix :+1:. I'm not sure if this is really the sustainable solution though. As you see in the [root-config script](https://github.com/root-project/root/blob/master/config/root-config.in#L399), there are also other platforms that might use `-rpath`. Is there maybe a way to get these `root-config --auxlibs` directly into the ACLiC command, without hardcoding the flags again behind various preprocessor guards for different platforms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:175,interoperability,platform,platforms,175,"> Is there maybe a way to get these root-config --auxlibs directly into the ACLiC command, without hardcoding the flags again behind various preprocessor guards for different platforms? I do believe that is the right question to ask! Unfortunately, I have no idea about the answer :/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:99,security,hardcod,hardcoding,99,"> Is there maybe a way to get these root-config --auxlibs directly into the ACLiC command, without hardcoding the flags again behind various preprocessor guards for different platforms? I do believe that is the right question to ask! Unfortunately, I have no idea about the answer :/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:82,usability,command,command,82,"> Is there maybe a way to get these root-config --auxlibs directly into the ACLiC command, without hardcoding the flags again behind various preprocessor guards for different platforms? I do believe that is the right question to ask! Unfortunately, I have no idea about the answer :/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:84,deployability,updat,update,84,"The source of information for `ACLiC` is the generated `compiledata.h`. We need the update the generation (done via CMake) to include `-Wl,-rpath,$ROOTSYS/lib` when needed (instead of changing `CompileMacro` itself).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:84,safety,updat,update,84,"The source of information for `ACLiC` is the generated `compiledata.h`. We need the update the generation (done via CMake) to include `-Wl,-rpath,$ROOTSYS/lib` when needed (instead of changing `CompileMacro` itself).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:84,security,updat,update,84,"The source of information for `ACLiC` is the generated `compiledata.h`. We need the update the generation (done via CMake) to include `-Wl,-rpath,$ROOTSYS/lib` when needed (instead of changing `CompileMacro` itself).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13737:11,deployability,build,build,11,@phsft-bot build also on macbeta/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13737
https://github.com/root-project/root/pull/13739:279,deployability,depend,depending,279,"Commenting here what I discussed with @dpiparo offline. This looks alright, but I think that rather than fixing this here, it might be better to fix it in the builtins themselves, so that not only it works for `libCore`, but also other libraries if needed (think another builtin depending on xxhash, like maybe lzma). Ideally, code outside of `builtins/` should never have to test for `builtin_foo`, but just use the target `foo::foo` and the builtin, when enabled, should take care of properly setting up the target properties so that it works in all cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:279,integrability,depend,depending,279,"Commenting here what I discussed with @dpiparo offline. This looks alright, but I think that rather than fixing this here, it might be better to fix it in the builtins themselves, so that not only it works for `libCore`, but also other libraries if needed (think another builtin depending on xxhash, like maybe lzma). Ideally, code outside of `builtins/` should never have to test for `builtin_foo`, but just use the target `foo::foo` and the builtin, when enabled, should take care of properly setting up the target properties so that it works in all cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:279,modifiability,depend,depending,279,"Commenting here what I discussed with @dpiparo offline. This looks alright, but I think that rather than fixing this here, it might be better to fix it in the builtins themselves, so that not only it works for `libCore`, but also other libraries if needed (think another builtin depending on xxhash, like maybe lzma). Ideally, code outside of `builtins/` should never have to test for `builtin_foo`, but just use the target `foo::foo` and the builtin, when enabled, should take care of properly setting up the target properties so that it works in all cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:279,safety,depend,depending,279,"Commenting here what I discussed with @dpiparo offline. This looks alright, but I think that rather than fixing this here, it might be better to fix it in the builtins themselves, so that not only it works for `libCore`, but also other libraries if needed (think another builtin depending on xxhash, like maybe lzma). Ideally, code outside of `builtins/` should never have to test for `builtin_foo`, but just use the target `foo::foo` and the builtin, when enabled, should take care of properly setting up the target properties so that it works in all cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:376,safety,test,test,376,"Commenting here what I discussed with @dpiparo offline. This looks alright, but I think that rather than fixing this here, it might be better to fix it in the builtins themselves, so that not only it works for `libCore`, but also other libraries if needed (think another builtin depending on xxhash, like maybe lzma). Ideally, code outside of `builtins/` should never have to test for `builtin_foo`, but just use the target `foo::foo` and the builtin, when enabled, should take care of properly setting up the target properties so that it works in all cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:279,testability,depend,depending,279,"Commenting here what I discussed with @dpiparo offline. This looks alright, but I think that rather than fixing this here, it might be better to fix it in the builtins themselves, so that not only it works for `libCore`, but also other libraries if needed (think another builtin depending on xxhash, like maybe lzma). Ideally, code outside of `builtins/` should never have to test for `builtin_foo`, but just use the target `foo::foo` and the builtin, when enabled, should take care of properly setting up the target properties so that it works in all cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:376,testability,test,test,376,"Commenting here what I discussed with @dpiparo offline. This looks alright, but I think that rather than fixing this here, it might be better to fix it in the builtins themselves, so that not only it works for `libCore`, but also other libraries if needed (think another builtin depending on xxhash, like maybe lzma). Ideally, code outside of `builtins/` should never have to test for `builtin_foo`, but just use the target `foo::foo` and the builtin, when enabled, should take care of properly setting up the target properties so that it works in all cases.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:82,deployability,fail,failed,82,"Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:175,deployability,build,build,175,"Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:132,interoperability,specif,specify,132,"Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:82,reliability,fail,failed,82,"Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:73,energy efficiency,current,current,73,"This seems to be an issue affecting many projectes at the moment. If the current solution seems ""too dirty"" and another one is not found, we can silence the warning with `-Xlinker -no_warn_duplicate_libraries`. I could even argue that explicitly linking xxhash when linking lz4 is not needed since we are talking about static libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:84,deployability,fail,failed,84,"> Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target? If you need to link or add header directories just during the build, try to use [`$<BUILD_INTERFACE:...>`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:BUILD_INTERFACE) generator expression from CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:177,deployability,build,build,177,"> Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target? If you need to link or add header directories just during the build, try to use [`$<BUILD_INTERFACE:...>`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:BUILD_INTERFACE) generator expression from CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:301,deployability,build,build,301,"> Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target? If you need to link or add header directories just during the build, try to use [`$<BUILD_INTERFACE:...>`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:BUILD_INTERFACE) generator expression from CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:134,interoperability,specif,specify,134,"> Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target? If you need to link or add header directories just during the build, try to use [`$<BUILD_INTERFACE:...>`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:BUILD_INTERFACE) generator expression from CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:84,reliability,fail,failed,84,"> Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target? If you need to link or add header directories just during the build, try to use [`$<BUILD_INTERFACE:...>`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:BUILD_INTERFACE) generator expression from CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:370,usability,help,help,370,"> Hi @amadio . I tried to find a solution inside the /builtins directory, however I failed to do so. Do you know if it is possible to specify the need to link against xxhash to build lz4 but not propagating the flag to the libCore target? If you need to link or add header directories just during the build, try to use [`$<BUILD_INTERFACE:...>`](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#genex:BUILD_INTERFACE) generator expression from CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:441,integrability,INTERFAC,INTERFACE,441,"My suggestion to try to fix this issue is the following:. ```diff. --- a/builtins/lz4/CMakeLists.txt. +++ b/builtins/lz4/CMakeLists.txt. @@ -44,7 +44,7 @@ set(LZ4_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """" FORCE). add_library(lz4 STATIC ${LZ4_PUBLIC_HEADERS} ${LZ4_PRIVATE_HEADERS} ${LZ4_SOURCES}). set_target_properties(lz4 PROPERTIES C_VISIBILITY_PRESET hidden POSITION_INDEPENDENT_CODE ON). target_include_directories(lz4 INTERFACE $<BUILD_INTERFACE:${LZ4_INCLUDE_DIR}>). -target_link_libraries(lz4 PRIVATE xxHash::xxHash). +target_include_directories(lz4 PRIVATE $<BUILD_INTERFACE:${xxHash_INCLUDE_DIR}>). . add_library(LZ4::LZ4 ALIAS lz4). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:441,interoperability,INTERFAC,INTERFACE,441,"My suggestion to try to fix this issue is the following:. ```diff. --- a/builtins/lz4/CMakeLists.txt. +++ b/builtins/lz4/CMakeLists.txt. @@ -44,7 +44,7 @@ set(LZ4_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """" FORCE). add_library(lz4 STATIC ${LZ4_PUBLIC_HEADERS} ${LZ4_PRIVATE_HEADERS} ${LZ4_SOURCES}). set_target_properties(lz4 PROPERTIES C_VISIBILITY_PRESET hidden POSITION_INDEPENDENT_CODE ON). target_include_directories(lz4 INTERFACE $<BUILD_INTERFACE:${LZ4_INCLUDE_DIR}>). -target_link_libraries(lz4 PRIVATE xxHash::xxHash). +target_include_directories(lz4 PRIVATE $<BUILD_INTERFACE:${xxHash_INCLUDE_DIR}>). . add_library(LZ4::LZ4 ALIAS lz4). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:441,modifiability,INTERFAC,INTERFACE,441,"My suggestion to try to fix this issue is the following:. ```diff. --- a/builtins/lz4/CMakeLists.txt. +++ b/builtins/lz4/CMakeLists.txt. @@ -44,7 +44,7 @@ set(LZ4_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """" FORCE). add_library(lz4 STATIC ${LZ4_PUBLIC_HEADERS} ${LZ4_PRIVATE_HEADERS} ${LZ4_SOURCES}). set_target_properties(lz4 PROPERTIES C_VISIBILITY_PRESET hidden POSITION_INDEPENDENT_CODE ON). target_include_directories(lz4 INTERFACE $<BUILD_INTERFACE:${LZ4_INCLUDE_DIR}>). -target_link_libraries(lz4 PRIVATE xxHash::xxHash). +target_include_directories(lz4 PRIVATE $<BUILD_INTERFACE:${xxHash_INCLUDE_DIR}>). . add_library(LZ4::LZ4 ALIAS lz4). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:204,performance,CACH,CACHE,204,"My suggestion to try to fix this issue is the following:. ```diff. --- a/builtins/lz4/CMakeLists.txt. +++ b/builtins/lz4/CMakeLists.txt. @@ -44,7 +44,7 @@ set(LZ4_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """" FORCE). add_library(lz4 STATIC ${LZ4_PUBLIC_HEADERS} ${LZ4_PRIVATE_HEADERS} ${LZ4_SOURCES}). set_target_properties(lz4 PROPERTIES C_VISIBILITY_PRESET hidden POSITION_INDEPENDENT_CODE ON). target_include_directories(lz4 INTERFACE $<BUILD_INTERFACE:${LZ4_INCLUDE_DIR}>). -target_link_libraries(lz4 PRIVATE xxHash::xxHash). +target_include_directories(lz4 PRIVATE $<BUILD_INTERFACE:${xxHash_INCLUDE_DIR}>). . add_library(LZ4::LZ4 ALIAS lz4). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:86,reliability,doe,does,86,"< My suggestion to try to fix this issue is the following:. On my local machine, this does not seem to help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:103,usability,help,help,103,"< My suggestion to try to fix this issue is the following:. On my local machine, this does not seem to help.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:94,reliability,doe,does,94,"> < My suggestion to try to fix this issue is the following:. > . > On my local machine, this does not seem to help. The same fix is also needed for zstd, but then it should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:111,usability,help,help,111,"> < My suggestion to try to fix this issue is the following:. > . > On my local machine, this does not seem to help. The same fix is also needed for zstd, but then it should work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:40,availability,failur,failures,40,The CI seems happy except some expected failures. I would like to see what happens on Windows and then I think we are ready to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:40,deployability,fail,failures,40,The CI seems happy except some expected failures. I would like to see what happens on Windows and then I think we are ready to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:40,performance,failur,failures,40,The CI seems happy except some expected failures. I would like to see what happens on Windows and then I think we are ready to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:40,reliability,fail,failures,40,The CI seems happy except some expected failures. I would like to see what happens on Windows and then I think we are ready to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/pull/13739:19,safety,except,except,19,The CI seems happy except some expected failures. I would like to see what happens on Windows and then I think we are ready to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13739
https://github.com/root-project/root/issues/13744:30,safety,input,input,30,"I can reproduce problem with `input()` also on my Linux, . And I see that MacOS handled differently. I will provide PR soon to see if small changes could help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:30,usability,input,input,30,"I can reproduce problem with `input()` also on my Linux, . And I see that MacOS handled differently. I will provide PR soon to see if small changes could help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:154,usability,help,help,154,"I can reproduce problem with `input()` also on my Linux, . And I see that MacOS handled differently. I will provide PR soon to see if small changes could help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:249,deployability,releas,releases,249,Seems to be it is not possible to run extra thread in python on Mac in script mode. At the same time input hook is also not working in script mode. Thus canvas - even shown - remains fully frozen. . It is exactly a situation as was in previous ROOT releases. In web case this leads just to empty web browser. Probably I can improve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:96,performance,time,time,96,Seems to be it is not possible to run extra thread in python on Mac in script mode. At the same time input hook is also not working in script mode. Thus canvas - even shown - remains fully frozen. . It is exactly a situation as was in previous ROOT releases. In web case this leads just to empty web browser. Probably I can improve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:101,safety,input,input,101,Seems to be it is not possible to run extra thread in python on Mac in script mode. At the same time input hook is also not working in script mode. Thus canvas - even shown - remains fully frozen. . It is exactly a situation as was in previous ROOT releases. In web case this leads just to empty web browser. Probably I can improve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:107,testability,hook,hook,107,Seems to be it is not possible to run extra thread in python on Mac in script mode. At the same time input hook is also not working in script mode. Thus canvas - even shown - remains fully frozen. . It is exactly a situation as was in previous ROOT releases. In web case this leads just to empty web browser. Probably I can improve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:101,usability,input,input,101,Seems to be it is not possible to run extra thread in python on Mac in script mode. At the same time input hook is also not working in script mode. Thus canvas - even shown - remains fully frozen. . It is exactly a situation as was in previous ROOT releases. In web case this leads just to empty web browser. Probably I can improve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:91,deployability,patch,patch,91,Do I understand correctly that this is an old (i.e. <v6.28) issue? Can we then fix it in a patch release of 6.30 rather than blocking 6.30/00 for it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:97,deployability,releas,release,97,Do I understand correctly that this is an old (i.e. <v6.28) issue? Can we then fix it in a patch release of 6.30 rather than blocking 6.30/00 for it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:91,safety,patch,patch,91,Do I understand correctly that this is an old (i.e. <v6.28) issue? Can we then fix it in a patch release of 6.30 rather than blocking 6.30/00 for it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:91,security,patch,patch,91,Do I understand correctly that this is an old (i.e. <v6.28) issue? Can we then fix it in a patch release of 6.30 rather than blocking 6.30/00 for it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/issues/13744:5,testability,understand,understand,5,Do I understand correctly that this is an old (i.e. <v6.28) issue? Can we then fix it in a patch release of 6.30 rather than blocking 6.30/00 for it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13744
https://github.com/root-project/root/pull/13745:121,interoperability,platform,platforms,121,Thanks. It works on my local machine which I used to create the reproducer. Let's see what the CI has to say about other platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13745
https://github.com/root-project/root/issues/13747:47,energy efficiency,draw,drawings,47,Original reproducer includes subpads and `TF2` drawings. Adding it here. [test_py.txt](https://github.com/root-project/root/files/12750074/test_py.txt).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13747
https://github.com/root-project/root/issues/13747:29,integrability,sub,subpads,29,Original reproducer includes subpads and `TF2` drawings. Adding it here. [test_py.txt](https://github.com/root-project/root/files/12750074/test_py.txt).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13747
https://github.com/root-project/root/pull/13748:64,safety,review,review,64,"Thank you @amecca for opening this PR! While we wait for a full review, can I ask you what is the reasoning behind changing the return value type from `bool` to `Bool_t`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:64,testability,review,review,64,"Thank you @amecca for opening this PR! While we wait for a full review, can I ask you what is the reasoning behind changing the return value type from `bool` to `Bool_t`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:143,integrability,pub,public,143,Thanks for your prompt reply @vepadulano. I changed it to Bool_t because I thought that it was preferred to use types defined in `Rtypes.h` in public interfaces. Now that I look more in detail at the coding convention recommendations I see that this only applies to data that might be written to disk. I can revert it; do you prefer that I make another commit on top or should I squash them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:150,integrability,interfac,interfaces,150,Thanks for your prompt reply @vepadulano. I changed it to Bool_t because I thought that it was preferred to use types defined in `Rtypes.h` in public interfaces. Now that I look more in detail at the coding convention recommendations I see that this only applies to data that might be written to disk. I can revert it; do you prefer that I make another commit on top or should I squash them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:150,interoperability,interfac,interfaces,150,Thanks for your prompt reply @vepadulano. I changed it to Bool_t because I thought that it was preferred to use types defined in `Rtypes.h` in public interfaces. Now that I look more in detail at the coding convention recommendations I see that this only applies to data that might be written to disk. I can revert it; do you prefer that I make another commit on top or should I squash them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:150,modifiability,interfac,interfaces,150,Thanks for your prompt reply @vepadulano. I changed it to Bool_t because I thought that it was preferred to use types defined in `Rtypes.h` in public interfaces. Now that I look more in detail at the coding convention recommendations I see that this only applies to data that might be written to disk. I can revert it; do you prefer that I make another commit on top or should I squash them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:296,performance,disk,disk,296,Thanks for your prompt reply @vepadulano. I changed it to Bool_t because I thought that it was preferred to use types defined in `Rtypes.h` in public interfaces. Now that I look more in detail at the coding convention recommendations I see that this only applies to data that might be written to disk. I can revert it; do you prefer that I make another commit on top or should I squash them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:95,usability,prefer,preferred,95,Thanks for your prompt reply @vepadulano. I changed it to Bool_t because I thought that it was preferred to use types defined in `Rtypes.h` in public interfaces. Now that I look more in detail at the coding convention recommendations I see that this only applies to data that might be written to disk. I can revert it; do you prefer that I make another commit on top or should I squash them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:326,usability,prefer,prefer,326,Thanks for your prompt reply @vepadulano. I changed it to Bool_t because I thought that it was preferred to use types defined in `Rtypes.h` in public interfaces. Now that I look more in detail at the coding convention recommendations I see that this only applies to data that might be written to disk. I can revert it; do you prefer that I make another commit on top or should I squash them?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:156,safety,review,review,156,"> I can revert it; do you prefer that I make another commit on top or should I squash them? No problem, it's up to you for now. Most probably, after the PR review and before merging it, all the smaller commits will need be squashed into one to avoid cluttering the commit history too much",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:244,safety,avoid,avoid,244,"> I can revert it; do you prefer that I make another commit on top or should I squash them? No problem, it's up to you for now. Most probably, after the PR review and before merging it, all the smaller commits will need be squashed into one to avoid cluttering the commit history too much",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:156,testability,review,review,156,"> I can revert it; do you prefer that I make another commit on top or should I squash them? No problem, it's up to you for now. Most probably, after the PR review and before merging it, all the smaller commits will need be squashed into one to avoid cluttering the commit history too much",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:26,usability,prefer,prefer,26,"> I can revert it; do you prefer that I make another commit on top or should I squash them? No problem, it's up to you for now. Most probably, after the PR review and before merging it, all the smaller commits will need be squashed into one to avoid cluttering the commit history too much",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:37,availability,ping,ping,37,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:107,availability,failur,failures,107,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:72,deployability,fail,fail,72,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:107,deployability,fail,failures,107,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:107,performance,failur,failures,107,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:72,reliability,fail,fail,72,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:107,reliability,fail,failures,107,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:66,safety,test,tests,66,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:246,safety,test,tests,246,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:66,testability,test,tests,66,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:246,testability,test,tests,246,"@vepadulano, @lmoneta, sorry for the ping. I see that some of the tests fail, but as far as I can tell the failures are not related to this PR. Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:153,deployability,automat,automatically,153,"> Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again? Just FYI: the PR is always automatically rebased on top of `master` for the test, so we have no control over that. We just need to keep ROOT `master` stable :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:104,safety,test,tests,104,"> Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again? Just FYI: the PR is always automatically rebased on top of `master` for the test, so we have no control over that. We just need to keep ROOT `master` stable :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:202,safety,test,test,202,"> Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again? Just FYI: the PR is always automatically rebased on top of `master` for the test, so we have no control over that. We just need to keep ROOT `master` stable :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:222,security,control,control,222,"> Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again? Just FYI: the PR is always automatically rebased on top of `master` for the test, so we have no control over that. We just need to keep ROOT `master` stable :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:104,testability,test,tests,104,"> Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again? Just FYI: the PR is always automatically rebased on top of `master` for the test, so we have no control over that. We just need to keep ROOT `master` stable :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:153,testability,automat,automatically,153,"> Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again? Just FYI: the PR is always automatically rebased on top of `master` for the test, so we have no control over that. We just need to keep ROOT `master` stable :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:202,testability,test,test,202,"> Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again? Just FYI: the PR is always automatically rebased on top of `master` for the test, so we have no control over that. We just need to keep ROOT `master` stable :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:222,testability,control,control,222,"> Do you want me to do something, such as rebase the branch onto a more stable commit (which passes the tests) and try again? Just FYI: the PR is always automatically rebased on top of `master` for the test, so we have no control over that. We just need to keep ROOT `master` stable :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:87,availability,consist,consistency,87,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:143,integrability,pub,public,143,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:150,integrability,interfac,interface,150,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:150,interoperability,interfac,interface,150,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:65,modifiability,refact,refactor,65,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:150,modifiability,interfac,interface,150,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:65,performance,refactor,refactor,65,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:121,security,hack,hack,121,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:23,usability,feedback,feedback,23,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/pull/13748:87,usability,consist,consistency,87,"Hi! Since I didn't get feedback yet, I decided to just merge the refactor to check the consistency without the try-catch hack. If you need the public interface after all, fee free to open a new PR about that once this one is merged :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13748
https://github.com/root-project/root/issues/13749:183,usability,document,documentation,183,"I briefly tried looking into this. I put some prints in `FlexibleInterpVar::evaluate` just to see the values. Without having any idea what `FlexibleInterpVar` should be doing because documentation is lacking, the first thing that strikes me as odd is that, in the evaluation that gives a NaN, the ""low"" value is higher than the ""high"" value. Is this expected?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:218,deployability,fail,failing,218,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:795,deployability,log,logHi,795,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:808,deployability,log,log,808,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:830,deployability,log,logLo,830,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:843,deployability,log,log,843,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:906,deployability,log,logHi,906,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:970,deployability,log,logLo,970,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1035,deployability,log,logHi,1035,"lly) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1104,deployability,log,logLo,1104,"6f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-8 + 8 * S0 - 5 * boundary * A1 + boundary * boundary * S2);. //. // r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1408,performance,cach,cache,1408,"and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-8 + 8 * S0 - 5 * boundary * A1 + boundary * boundary * S2);. //. // return 1. + x * (p0 + x * (p1 + x * (p2 + x * (p3 + x * (p4 + x * p5)))));. }. ```. This still gives a NaN for this workspace, though, so this doesn't seem to be the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:218,reliability,fail,failing,218,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:2249,reliability,doe,doesn,2249,"and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-8 + 8 * S0 - 5 * boundary * A1 + boundary * boundary * S2);. //. // return 1. + x * (p0 + x * (p1 + x * (p2 + x * (p3 + x * (p4 + x * p5)))));. }. ```. This still gives a NaN for this workspace, though, so this doesn't seem to be the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:795,safety,log,logHi,795,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:808,safety,log,log,808,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:830,safety,log,logLo,830,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:843,safety,log,log,843,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:906,safety,log,logHi,906,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:970,safety,log,logLo,970,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1035,safety,log,logHi,1035,"lly) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1104,safety,log,logLo,1104,"6f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-8 + 8 * S0 - 5 * boundary * A1 + boundary * boundary * S2);. //. // r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:795,security,log,logHi,795,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:808,security,log,log,808,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:830,security,log,logLo,830,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:843,security,log,log,843,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:906,security,log,logHi,906,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:970,security,log,logLo,970,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1035,security,log,logHi,1035,"lly) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1104,security,log,logLo,1104,"6f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-8 + 8 * S0 - 5 * boundary * A1 + boundary * boundary * S2);. //. // r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:795,testability,log,logHi,795,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:808,testability,log,log,808,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:830,testability,log,logLo,830,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:843,testability,log,log,843,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:906,testability,log,logHi,906,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:970,testability,log,logLo,970,"I also tried a partial ""revert"" (manually) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1035,testability,log,logHi,1035,"lly) of earlier commit https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1104,testability,log,logLo,1104,"6f3f689c578cb53d75ddeeb04472ec4d82e3ed which changed the 6th order interpolation scheme (which is used in this failing example), uncommenting the commented out code here (and commenting the uncommented code):. ```. inline double interpolate6thDegree(double x, double low, double high, double nominal, double boundary). {. double t = x / boundary;. double eps_plus = high - nominal;. double eps_minus = nominal - low;. double S = 0.5 * (eps_plus + eps_minus);. double A = 0.0625 * (eps_plus - eps_minus);. return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));. // double pow_up = std::pow(high / nominal, boundary);. // double pow_down = std::pow(low / nominal, boundary);. // double logHi = std::log(high);. // double logLo = std::log(low);. // double pow_up_log = high <= 0.0 ? 0.0 : pow_up * logHi;. // double pow_down_log = low <= 0.0 ? 0.0 : -pow_down * logLo;. // double pow_up_log2 = high <= 0.0 ? 0.0 : pow_up_log * logHi;. // double pow_down_log2 = low <= 0.0 ? 0.0 : -pow_down_log * logLo;. //. // double S0 = (pow_up + pow_down) / 2;. // double A0 = (pow_up - pow_down) / 2;. // double S1 = (pow_up_log + pow_down_log) / 2;. // double A1 = (pow_up_log - pow_down_log) / 2;. // double S2 = (pow_up_log2 + pow_down_log2) / 2;. // double A2 = (pow_up_log2 - pow_down_log2) / 2;. //. // // cache coefficient of the polynomial. // double p0 = 1. / (8 * boundary) * (15 * A0 - 7 * boundary * S1 + boundary * boundary * A2);. // double p1 = 1. / (8 * boundary * boundary) * (-24 + 24 * S0 - 9 * boundary * A1 + boundary * boundary * S2);. // double p2 = 1. / (4 * std::pow(boundary, 3)) * (-5 * A0 + 5 * boundary * S1 - boundary * boundary * A2);. // double p3 = 1. / (4 * std::pow(boundary, 4)) * (12 - 12 * S0 + 7 * boundary * A1 - boundary * boundary * S2);. // double p4 = 1. / (8 * std::pow(boundary, 5)) * (+3 * A0 - 3 * boundary * S1 + boundary * boundary * A2);. // double p5 = 1. / (8 * std::pow(boundary, 6)) * (-8 + 8 * S0 - 5 * boundary * A1 + boundary * boundary * S2);. //. // r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:176,deployability,log,log,176,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:191,deployability,log,log,191,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:207,deployability,log,log,207,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:563,deployability,fail,failing,563,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:617,deployability,log,log,617,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1549,deployability,log,logarithms,1549,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1614,deployability,log,logarithmic,1614,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1865,deployability,log,logarithm,1865,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:548,integrability,event,events,548,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:809,integrability,event,eventually,809,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1029,integrability,messag,message,1029," the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checke",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1673,integrability,transform,transformed,1673,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1029,interoperability,messag,message,1029," the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checke",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1673,interoperability,transform,transformed,1673,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1112,modifiability,variab,variables,1112,"`. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1172,modifiability,variab,variables,1172,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:708,performance,time,times,708,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1105,performance,cach,cached,1105," with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I gue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1165,performance,cach,cached,1165,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:563,reliability,fail,failing,563,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1211,reliability,doe,does,1211,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1445,reliability,doe,doesn,1445,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1729,reliability,Doe,Doesn,1729,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:176,safety,log,log,176,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:191,safety,log,log,191,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:207,safety,log,log,207,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:617,safety,log,log,617,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1549,safety,log,logarithms,1549,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1614,safety,log,logarithmic,1614,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1865,safety,log,logarithm,1865,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:176,security,log,log,176,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:191,security,log,log,191,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:207,security,log,log,207,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:617,security,log,log,617,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1549,security,log,logarithms,1549,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1614,security,log,logarithmic,1614,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1865,security,log,logarithm,1865,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:176,testability,log,log,176,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:191,testability,log,log,191,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:207,testability,log,log,207,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:508,testability,trace,traced,508,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:617,testability,log,log,617,"Oops, the above wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are fil",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1007,testability,understand,understand,1007,"ove wasn't enough for the ""revert"", I also had to replace the calling site (in `flexibleInterp`) with. ```. // return total * std::exp(interpolate6thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1549,testability,log,logarithms,1549,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1614,testability,log,logarithmic,1614,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1865,testability,log,logarithm,1865,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:2145,usability,document,documentation,2145,"thDegree(x, std::log(low), std::log(high), std::log(nominal), boundary));. return total * interpolate6thDegree(x, low, high, nominal, boundary);. ```. This (together with using the old code as commented out above) indeed gets rid of the `nan`! **I think the crucial part is that the old code checks for `high <= 0` and also `low <= 0`.**. Indeed, I traced the `nan` there: the sequence of events in this failing example is that `high` is zero, so that `std::log(high)` is `-inf`. Then `eps_plus` is also `-inf` and so `S` and `A` too, so you `-inf` times something negative (`t` happens to be negative in this example) so the term becomes `+inf` and eventually you get a `-inf + inf` and that equals `nan`. So, there's at least two options to fix this, both will need some conditionals added in again. 1. Going back to the original algorithm. If I understand the commit message of that change correctly, it was mostly removed because it required cached variables. As I rewrote the algorithm above, no more cached variables are necessary. Of course, it does involve more temporary values than the new algorithm, so perhaps this is another reason to pick the new algorithm. 2. Adding similar `<= 0` checks to the new algorithm. I think this should take place at the call site, because it doesn't make sense for the other `interpolate6thDegree` usecase where no weird values are expected from logarithms. By the way, why is the interpolation taking place in logarithmic space instead of regular linear space and then transformed back into linear space after interpolation? Doesn't this also mean that the two interpolation schemes (FlexibleInterpVar and PiecewiseInterpolation) are again inconsistent? If the logarithm can be eliminated, I think we can do without introducing conditionals, no? That is, assuming the high and low vectors are filled sensibly, which is not checked anywhere as far as I can see, so that's still a minor weakness, but I guess that could easily be added in the documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1494,availability,sli,slightly,1494,"om/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```. value_old value_new diff_abs diff_rel. param. -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00. -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04. -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04. -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04. -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04. -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04. -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04. -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04. -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04. -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04. -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04. 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04. 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04. 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03. 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03. 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03. 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03. 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03. 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03. 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03. 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04. 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00. ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`. 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total * (1 + interpolate6thDegree(x, low, high, nominal, boundary));`. No conditionals needed and the results match the old ones pretty well still.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1746,deployability,log,log,1746,"om/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```. value_old value_new diff_abs diff_rel. param. -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00. -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04. -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04. -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04. -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04. -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04. -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04. -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04. -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04. -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04. -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04. 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04. 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04. 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03. 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03. 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03. 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03. 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03. 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03. 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03. 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04. 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00. ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`. 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total * (1 + interpolate6thDegree(x, low, high, nominal, boundary));`. No conditionals needed and the results match the old ones pretty well still.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:113,integrability,messag,message,113,"I tried out option 3 and it gives pretty good results, using your comparison method as documented in your commit message here https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```. value_old value_new diff_abs diff_rel. param. -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00. -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04. -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04. -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04. -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04. -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04. -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04. -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04. -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04. -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04. -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04. 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04. 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04. 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03. 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03. 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03. 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03. 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03. 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03. 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03. 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04. 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00. ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`. 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:113,interoperability,messag,message,113,"I tried out option 3 and it gives pretty good results, using your comparison method as documented in your commit message here https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```. value_old value_new diff_abs diff_rel. param. -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00. -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04. -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04. -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04. -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04. -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04. -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04. -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04. -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04. -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04. -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04. 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04. 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04. 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03. 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03. 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03. 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03. 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03. 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03. 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03. 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04. 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00. ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`. 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1494,reliability,sli,slightly,1494,"om/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```. value_old value_new diff_abs diff_rel. param. -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00. -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04. -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04. -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04. -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04. -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04. -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04. -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04. -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04. -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04. -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04. 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04. 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04. 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03. 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03. 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03. 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03. 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03. 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03. 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03. 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04. 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00. ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`. 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total * (1 + interpolate6thDegree(x, low, high, nominal, boundary));`. No conditionals needed and the results match the old ones pretty well still.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1746,safety,log,log,1746,"om/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```. value_old value_new diff_abs diff_rel. param. -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00. -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04. -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04. -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04. -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04. -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04. -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04. -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04. -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04. -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04. -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04. 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04. 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04. 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03. 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03. 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03. 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03. 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03. 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03. 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03. 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04. 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00. ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`. 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total * (1 + interpolate6thDegree(x, low, high, nominal, boundary));`. No conditionals needed and the results match the old ones pretty well still.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1746,security,log,log,1746,"om/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```. value_old value_new diff_abs diff_rel. param. -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00. -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04. -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04. -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04. -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04. -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04. -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04. -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04. -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04. -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04. -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04. 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04. 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04. 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03. 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03. 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03. 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03. 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03. 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03. 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03. 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04. 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00. ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`. 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total * (1 + interpolate6thDegree(x, low, high, nominal, boundary));`. No conditionals needed and the results match the old ones pretty well still.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:1746,testability,log,log,1746,"om/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```. value_old value_new diff_abs diff_rel. param. -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00. -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04. -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04. -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04. -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04. -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04. -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04. -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04. -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04. -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04. -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04. 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04. 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04. 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03. 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03. 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03. 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03. 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03. 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03. 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03. 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04. 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00. ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`. 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total * (1 + interpolate6thDegree(x, low, high, nominal, boundary));`. No conditionals needed and the results match the old ones pretty well still.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:87,usability,document,documented,87,"I tried out option 3 and it gives pretty good results, using your comparison method as documented in your commit message here https://github.com/root-project/root/commit/466f3f689c578cb53d75ddeeb04472ec4d82e3ed:. ```. value_old value_new diff_abs diff_rel. param. -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00. -0.95 0.9047424331 0.9049857073 0.0002432742 2.69E-04. -0.85 0.9140836603 0.9146805378 0.0005968775 6.53E-04. -0.75 0.9230659064 0.9237960815 0.0007301751 7.91E-04. -0.65 0.9317147727 0.9323668386 0.0006520658 7.00E-04. -0.55 0.9402402768 0.9406592464 0.0004189696 4.46E-04. -0.45 0.9489635592 0.9490771800 0.0001136208 1.20E-04. -0.35 0.9582539443 0.9580809519 -0.0001729925 -1.81E-04. -0.25 0.9684763536 0.9681198120 -0.0003565416 -3.68E-04. -0.15 0.9799490728 0.9795779479 -0.0003711248 -3.79E-04. -0.05 0.9929118716 0.9927339847 -0.0001778869 -1.79E-04. 0.05 1.0075044778 1.0077339847 0.0002295068 2.28E-04. 0.15 1.0237554038 1.0245779479 0.0008225442 8.03E-04. 0.25 1.0415811263 1.0431198120 0.0015386857 1.48E-03. 0.35 1.0607956204 1.0630809519 0.0022853314 2.15E-03. 0.45 1.0811302458 1.0840771800 0.0029469342 2.73E-03. 0.55 1.1022639865 1.1056592464 0.0033952598 3.08E-03. 0.65 1.1238640449 1.1273668386 0.0035027937 3.12E-03. 0.75 1.1456367871 1.1487960815 0.0031592944 2.76E-03. 0.85 1.1673890440 1.1696805378 0.0022914938 1.96E-03. 0.95 1.1890997634 1.1899857073 0.0008859439 7.45E-04. 1.00 1.2000000000 1.2000000000 0.0000000000 0.00E+00. ```. The difference is slightly worse, half an order of magnitude I'd guesstimate, but perhaps this is not such a big deal. The implementation that produced these ""new"" results:. 1. It uses your `interpolate6thDegree`. 2. On the call site in `flexibleInterp`, I removed the `log`s, the `exp` and I added a `1 +`, which is also done in the old algorithm before returning. Indeed, I saw that when I did not add it, the absolute difference of the first results was exactly `-1`. So, in the end the calling line becomes `return total",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:114,availability,restor,restores,114,"In the end, this problem is fixed by the following PR:. * https://github.com/root-project/root/pull/13427. The PR restores the old behavior for now. All these striking inconsistencies will be fixed in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:114,reliability,restor,restores,114,"In the end, this problem is fixed by the following PR:. * https://github.com/root-project/root/pull/13427. The PR restores the old behavior for now. All these striking inconsistencies will be fixed in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/issues/13749:131,usability,behavi,behavior,131,"In the end, this problem is fixed by the following PR:. * https://github.com/root-project/root/pull/13427. The PR restores the old behavior for now. All these striking inconsistencies will be fixed in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13749
https://github.com/root-project/root/pull/13750:73,deployability,modul,modules,73,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:147,deployability,build,build,147,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:153,deployability,fail,fails,153,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:204,deployability,version,version,204,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:204,integrability,version,version,204,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:73,modifiability,modul,modules,73,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:204,modifiability,version,version,204,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:105,reliability,doe,does,105,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:153,reliability,fail,fails,153,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:180,reliability,doe,doesn,180,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13750:73,safety,modul,modules,73,"AFAICT `find_package(XROOTD)` was correct because we have our own `cmake/modules/FindXROOTD.cmake` which does some extra setup. After this PR, the build fails for me because CMake doesn't know the XRootD version anymore and tries to enable `netx`, which only works with XRootD < 5. Can you please investigate?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13750
https://github.com/root-project/root/pull/13751:37,deployability,version,version,37,FWIW a similar argument value `-fabi-version=0` in VecGeom was removed by commit https://gitlab.cern.ch/VecGeom/VecGeom/-/commit/5f0be4f769b29938ebd5cfd1b8afd395ef24f773. I assume that `-fabi-version=6` was passed in ROOT to override that flag.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:192,deployability,version,version,192,FWIW a similar argument value `-fabi-version=0` in VecGeom was removed by commit https://gitlab.cern.ch/VecGeom/VecGeom/-/commit/5f0be4f769b29938ebd5cfd1b8afd395ef24f773. I assume that `-fabi-version=6` was passed in ROOT to override that flag.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:37,integrability,version,version,37,FWIW a similar argument value `-fabi-version=0` in VecGeom was removed by commit https://gitlab.cern.ch/VecGeom/VecGeom/-/commit/5f0be4f769b29938ebd5cfd1b8afd395ef24f773. I assume that `-fabi-version=6` was passed in ROOT to override that flag.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:192,integrability,version,version,192,FWIW a similar argument value `-fabi-version=0` in VecGeom was removed by commit https://gitlab.cern.ch/VecGeom/VecGeom/-/commit/5f0be4f769b29938ebd5cfd1b8afd395ef24f773. I assume that `-fabi-version=6` was passed in ROOT to override that flag.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:37,modifiability,version,version,37,FWIW a similar argument value `-fabi-version=0` in VecGeom was removed by commit https://gitlab.cern.ch/VecGeom/VecGeom/-/commit/5f0be4f769b29938ebd5cfd1b8afd395ef24f773. I assume that `-fabi-version=6` was passed in ROOT to override that flag.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:192,modifiability,version,version,192,FWIW a similar argument value `-fabi-version=0` in VecGeom was removed by commit https://gitlab.cern.ch/VecGeom/VecGeom/-/commit/5f0be4f769b29938ebd5cfd1b8afd395ef24f773. I assume that `-fabi-version=6` was passed in ROOT to override that flag.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:17,integrability,messag,message,17,"P.S.: The commit message references a geom PR, it should close https://github.com/root-project/root/issues/10984",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:17,interoperability,messag,message,17,"P.S.: The commit message references a geom PR, it should close https://github.com/root-project/root/issues/10984",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:57,usability,close,close,57,"P.S.: The commit message references a geom PR, it should close https://github.com/root-project/root/issues/10984",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:19,integrability,messag,message,19,"> P.S.: The commit message references a geom PR, it should close #10984. The GitHub web interface wouldn't let me make this connection anymore, but I'll close it manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:88,integrability,interfac,interface,88,"> P.S.: The commit message references a geom PR, it should close #10984. The GitHub web interface wouldn't let me make this connection anymore, but I'll close it manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:19,interoperability,messag,message,19,"> P.S.: The commit message references a geom PR, it should close #10984. The GitHub web interface wouldn't let me make this connection anymore, but I'll close it manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:88,interoperability,interfac,interface,88,"> P.S.: The commit message references a geom PR, it should close #10984. The GitHub web interface wouldn't let me make this connection anymore, but I'll close it manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:88,modifiability,interfac,interface,88,"> P.S.: The commit message references a geom PR, it should close #10984. The GitHub web interface wouldn't let me make this connection anymore, but I'll close it manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:59,usability,close,close,59,"> P.S.: The commit message references a geom PR, it should close #10984. The GitHub web interface wouldn't let me make this connection anymore, but I'll close it manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13751:153,usability,close,close,153,"> P.S.: The commit message references a geom PR, it should close #10984. The GitHub web interface wouldn't let me make this connection anymore, but I'll close it manually.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13751
https://github.com/root-project/root/pull/13752:15,deployability,updat,update,15,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:53,deployability,build,build,53,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:298,deployability,build,build,298,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:304,deployability,fail,fails,304,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:446,integrability,compon,component,446,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:446,interoperability,compon,component,446,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:446,modifiability,compon,component,446,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:492,performance,time,time,492,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:304,reliability,fail,fails,304,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:15,safety,updat,update,15,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:25,safety,test,testing,25,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:474,safety,test,tested,474,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:15,security,updat,update,15,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:25,testability,test,testing,25,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:474,testability,test,tested,474,"Hi! Just as an update on testing this PR: I tried to build ROOT with xrootd with xrootd from this branch here, to see if it gets correctly picked up also with this PR:. https://github.com/xrootd/xrootd/tree/v4.12.x. And it works fine without the `xproofd` flag :+1: But with `xproofd=ON`, the ROOT build fails. However, that is mostly related to a host of other problems in the CMake and also C++ code of `xprooff` (it seems like this deprecated component was not built and tested for a long time).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:58,deployability,releas,releases,58,"Note that [XRootD 5.6.3](https://github.com/xrootd/xrootd/releases/tag/v5.6.3) has been released, and now exports the version via CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:88,deployability,releas,released,88,"Note that [XRootD 5.6.3](https://github.com/xrootd/xrootd/releases/tag/v5.6.3) has been released, and now exports the version via CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:118,deployability,version,version,118,"Note that [XRootD 5.6.3](https://github.com/xrootd/xrootd/releases/tag/v5.6.3) has been released, and now exports the version via CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:118,integrability,version,version,118,"Note that [XRootD 5.6.3](https://github.com/xrootd/xrootd/releases/tag/v5.6.3) has been released, and now exports the version via CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:118,modifiability,version,version,118,"Note that [XRootD 5.6.3](https://github.com/xrootd/xrootd/releases/tag/v5.6.3) has been released, and now exports the version via CMake.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:90,deployability,depend,depended,90,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:175,deployability,version,version,175,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:192,deployability,version,version,192,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:270,deployability,depend,depending,270,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:603,deployability,depend,dependent,603,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:90,integrability,depend,depended,90,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:175,integrability,version,version,175,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:192,integrability,version,version,192,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:270,integrability,depend,depending,270,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:603,integrability,depend,dependent,603,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:90,modifiability,depend,depended,90,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:175,modifiability,version,version,175,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:192,modifiability,version,version,192,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:270,modifiability,depend,depending,270,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:603,modifiability,depend,dependent,603,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:450,reliability,doe,does,450,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:539,reliability,doe,does,539,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:90,safety,depend,depended,90,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:270,safety,depend,depending,270,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:603,safety,depend,dependent,603,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:90,testability,depend,depended,90,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:270,testability,depend,depending,270,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:603,testability,depend,dependent,603,"Hi @amadio, the situation also changed a bit because we deprecated `xproofd`, which still depended on xrootd 4. I think we should just assume now that XRootD will be at least version 5, since version 4 is EOL for two years already and we have no non-deprecated featured depending on XRootD 4. @andresailer, would this fix your issues? * https://github.com/root-project/root/issues/12631. * https://github.com/root-project/root/issues/11750. @amadio, does that make sense from the XRootD perspective? @Axel-Naumann, what do you think? This does add some extra step when we want to resurrect the XRootD 4 dependent features, but this would not be easy anyway (if they even work with eos 4 also being EOL).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:177,deployability,depend,depend,177,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:297,deployability,updat,updating,297,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:324,deployability,version,versions,324,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:395,deployability,releas,releases,395,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:405,deployability,Depend,Depending,405,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:435,deployability,releas,release,435,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:476,deployability,releas,release,476,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:512,deployability,releas,release,512,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:592,deployability,modul,module,592,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:611,deployability,version,version,611,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:468,energy efficiency,current,current,468,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:177,integrability,depend,depend,177,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:324,integrability,version,versions,324,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:405,integrability,Depend,Depending,405,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:611,integrability,version,version,611,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:177,modifiability,depend,depend,177,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:218,modifiability,maintain,maintained,218,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:306,modifiability,pac,packages,306,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:324,modifiability,version,versions,324,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:405,modifiability,Depend,Depending,405,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:592,modifiability,modul,module,592,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:611,modifiability,version,version,611,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:11,reliability,doe,does,11,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:177,safety,depend,depend,177,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:218,safety,maintain,maintained,218,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:297,safety,updat,updating,297,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:405,safety,Depend,Depending,405,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:592,safety,modul,module,592,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:297,security,updat,updating,297,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:177,testability,depend,depend,177,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:405,testability,Depend,Depending,405,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:427,testability,plan,plan,427,"> @amadio, does that make sense from the XRootD perspective? Yes, XRootD/EOS 4.x are both EOL at the end of this year. All EOS instances will be on EOS 5.x by then. If you can, depend on XRootD from EPEL, as it's well maintained by @ellert. On Debian/Ubuntu, however, due to their restrictions on updating packages to newer versions, you may want to carry the builtin just in case for the older releases. Depending on when you plan to release ROOT 6.30, XRootD 5.6.3 (current release) or 5.7.0 (upcoming feature release early December) should be used for the builtin, to have the fixed CMake module exporting a version. Let me know if you have any other questions. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:77,reliability,Doe,Does,77,"`xproofd` was deprecated in v6.30, we should be good to remove it in master. Does that address the XRootD 4 headaches?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:89,deployability,instal,installed,89,"If you mean with XRootD 4 headaches the problems that show up when old XRootD 4 is still installed on the system, then yes (see the issues linked to this PR). We now use the FindXRootD from XRootD, and not our own, which is better in dealing with those cases. Like this one:. https://github.com/root-project/root/issues/11750. *Edit:* ah you were talking about the `xproofd` deprecation, not necessarily this PR. Yes that was also important in addressing the XRootD headaches, because then we don't need to do the xrootd version check anymore to determine if `xproofd` can actually be built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:521,deployability,version,version,521,"If you mean with XRootD 4 headaches the problems that show up when old XRootD 4 is still installed on the system, then yes (see the issues linked to this PR). We now use the FindXRootD from XRootD, and not our own, which is better in dealing with those cases. Like this one:. https://github.com/root-project/root/issues/11750. *Edit:* ah you were talking about the `xproofd` deprecation, not necessarily this PR. Yes that was also important in addressing the XRootD headaches, because then we don't need to do the xrootd version check anymore to determine if `xproofd` can actually be built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:521,integrability,version,version,521,"If you mean with XRootD 4 headaches the problems that show up when old XRootD 4 is still installed on the system, then yes (see the issues linked to this PR). We now use the FindXRootD from XRootD, and not our own, which is better in dealing with those cases. Like this one:. https://github.com/root-project/root/issues/11750. *Edit:* ah you were talking about the `xproofd` deprecation, not necessarily this PR. Yes that was also important in addressing the XRootD headaches, because then we don't need to do the xrootd version check anymore to determine if `xproofd` can actually be built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:521,modifiability,version,version,521,"If you mean with XRootD 4 headaches the problems that show up when old XRootD 4 is still installed on the system, then yes (see the issues linked to this PR). We now use the FindXRootD from XRootD, and not our own, which is better in dealing with those cases. Like this one:. https://github.com/root-project/root/issues/11750. *Edit:* ah you were talking about the `xproofd` deprecation, not necessarily this PR. Yes that was also important in addressing the XRootD headaches, because then we don't need to do the xrootd version check anymore to determine if `xproofd` can actually be built.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:171,availability,error,error,171,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:510,availability,restor,restore,510,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:15,deployability,build,build,15,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:290,deployability,fail,failing,290,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:522,deployability,build,builds,522,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:39,interoperability,distribut,distributions,39,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:303,interoperability,platform,platforms,303,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:197,modifiability,pac,packaged,197,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:171,performance,error,error,171,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:290,reliability,fail,failing,290,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:510,reliability,restor,restore,510,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:171,safety,error,error,171,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:171,usability,error,error,171,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:262,usability,clear,clear,262,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13752:538,usability,help,help,538,"This broke the build on all EPEL-based distributions where the headers are in `/usr/include/xrootd`, but `XRootDConfig.cmake` reports `/usr/include`. I believe this is an error in how the `rpm` is packaged, but we cannot fix it immediately. Our CI was also very clear about this problem by failing on 5 platforms (!), 3x Fedora and 2x Alma Linux, which I would again like to point out must be always checked before merging! I'm reverting the second commit in https://github.com/root-project/root/pull/14170 to restore our builds and also help the LCG people.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13752
https://github.com/root-project/root/pull/13761:10,availability,failur,failure,10,Same test failure (`roottest-python-regression-regression`) as fedora 38 :-/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13761
https://github.com/root-project/root/pull/13761:10,deployability,fail,failure,10,Same test failure (`roottest-python-regression-regression`) as fedora 38 :-/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13761
https://github.com/root-project/root/pull/13761:10,performance,failur,failure,10,Same test failure (`roottest-python-regression-regression`) as fedora 38 :-/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13761
https://github.com/root-project/root/pull/13761:10,reliability,fail,failure,10,Same test failure (`roottest-python-regression-regression`) as fedora 38 :-/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13761
https://github.com/root-project/root/pull/13761:5,safety,test,test,5,Same test failure (`roottest-python-regression-regression`) as fedora 38 :-/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13761
https://github.com/root-project/root/pull/13761:5,testability,test,test,5,Same test failure (`roottest-python-regression-regression`) as fedora 38 :-/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13761
https://github.com/root-project/root/pull/13761:36,testability,regress,regression-regression,36,Same test failure (`roottest-python-regression-regression`) as fedora 38 :-/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13761
https://github.com/root-project/root/issues/13769:14,deployability,build,build,14,"I was using a build of last Friday (1 am), which was expected to fail. However, I was trusting the CI to produce nightlies every night: for some reasons they were not produced on Saturday and Sunday. I triggered them for master and will be observing the test results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13769
https://github.com/root-project/root/issues/13769:65,deployability,fail,fail,65,"I was using a build of last Friday (1 am), which was expected to fail. However, I was trusting the CI to produce nightlies every night: for some reasons they were not produced on Saturday and Sunday. I triggered them for master and will be observing the test results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13769
https://github.com/root-project/root/issues/13769:240,deployability,observ,observing,240,"I was using a build of last Friday (1 am), which was expected to fail. However, I was trusting the CI to produce nightlies every night: for some reasons they were not produced on Saturday and Sunday. I triggered them for master and will be observing the test results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13769
https://github.com/root-project/root/issues/13769:65,reliability,fail,fail,65,"I was using a build of last Friday (1 am), which was expected to fail. However, I was trusting the CI to produce nightlies every night: for some reasons they were not produced on Saturday and Sunday. I triggered them for master and will be observing the test results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13769
https://github.com/root-project/root/issues/13769:254,safety,test,test,254,"I was using a build of last Friday (1 am), which was expected to fail. However, I was trusting the CI to produce nightlies every night: for some reasons they were not produced on Saturday and Sunday. I triggered them for master and will be observing the test results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13769
https://github.com/root-project/root/issues/13769:86,security,trust,trusting,86,"I was using a build of last Friday (1 am), which was expected to fail. However, I was trusting the CI to produce nightlies every night: for some reasons they were not produced on Saturday and Sunday. I triggered them for master and will be observing the test results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13769
https://github.com/root-project/root/issues/13769:240,testability,observ,observing,240,"I was using a build of last Friday (1 am), which was expected to fail. However, I was trusting the CI to produce nightlies every night: for some reasons they were not produced on Saturday and Sunday. I triggered them for master and will be observing the test results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13769
https://github.com/root-project/root/issues/13769:254,testability,test,test,254,"I was using a build of last Friday (1 am), which was expected to fail. However, I was trusting the CI to produce nightlies every night: for some reasons they were not produced on Saturday and Sunday. I triggered them for master and will be observing the test results.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13769
https://github.com/root-project/root/pull/13771:223,availability,avail,available,223,"What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. Thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:223,reliability,availab,available,223,"What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. Thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:223,safety,avail,available,223,"What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. Thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:23,security,team,team,23,"What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. Thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:223,security,availab,available,223,"What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. Thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:33,usability,user,users,33,"What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. Thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:331,deployability,instal,installed,331,"> pcre2 10.40 (as mentioned in #11395) already comes with a pcre2-config.cmake (https://github.com/PCRE2Project/pcre2/blob/pcre2-10.40/cmake/pcre2-config.cmake.in) file. Can that be used instead of adding FindPCRE2.cmake ? The packaged pcre2 in Fedora and RHEL/CentOS/Rocky/Alma does not ship the cmake files. They are only create/installed if pcre2 is built using cmake. The RPM for Fedora and RHEL are built using autotools, and therefore do not contain the cmake files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:448,deployability,contain,contain,448,"> pcre2 10.40 (as mentioned in #11395) already comes with a pcre2-config.cmake (https://github.com/PCRE2Project/pcre2/blob/pcre2-10.40/cmake/pcre2-config.cmake.in) file. Can that be used instead of adding FindPCRE2.cmake ? The packaged pcre2 in Fedora and RHEL/CentOS/Rocky/Alma does not ship the cmake files. They are only create/installed if pcre2 is built using cmake. The RPM for Fedora and RHEL are built using autotools, and therefore do not contain the cmake files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:227,modifiability,pac,packaged,227,"> pcre2 10.40 (as mentioned in #11395) already comes with a pcre2-config.cmake (https://github.com/PCRE2Project/pcre2/blob/pcre2-10.40/cmake/pcre2-config.cmake.in) file. Can that be used instead of adding FindPCRE2.cmake ? The packaged pcre2 in Fedora and RHEL/CentOS/Rocky/Alma does not ship the cmake files. They are only create/installed if pcre2 is built using cmake. The RPM for Fedora and RHEL are built using autotools, and therefore do not contain the cmake files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:279,reliability,doe,does,279,"> pcre2 10.40 (as mentioned in #11395) already comes with a pcre2-config.cmake (https://github.com/PCRE2Project/pcre2/blob/pcre2-10.40/cmake/pcre2-config.cmake.in) file. Can that be used instead of adding FindPCRE2.cmake ? The packaged pcre2 in Fedora and RHEL/CentOS/Rocky/Alma does not ship the cmake files. They are only create/installed if pcre2 is built using cmake. The RPM for Fedora and RHEL are built using autotools, and therefore do not contain the cmake files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:225,availability,avail,available,225,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:338,integrability,coupl,couple,338,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:338,modifiability,coupl,couple,338,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:225,reliability,availab,available,225,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:225,safety,avail,available,225,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:514,safety,test,tested,514,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:605,safety,test,test,605,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:25,security,team,team,25,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:225,security,availab,available,225,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:338,testability,coupl,couple,338,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:514,testability,test,tested,514,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:605,testability,test,test,605,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:35,usability,user,users,35,"> What we (you, the ROOT team, the users) need to discuss is whether we can deprecate TPRegex altogether, given that std::regex is now (since C++17 is required, as a side effect of kicking out old compilers) guaranteed to be available. Or reimplement it using std:: regex. > . > Thoughts? I wouldn't go into this direction yet. We have a couple of problems with `std::regexp`, like these symbol clashes with other Python libraries:. https://github.com/root-project/root/issues/15309. Therefore, provided that it's tested, I'm in favor of merging this PR. I'm adding pcre2 to the CI images, so that we can test it:. https://github.com/root-project/root-ci-images/pull/31",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13771:10,testability,regress,regression,10,Potential regression: https://github.com/root-project/root/issues/15986,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13771
https://github.com/root-project/root/pull/13772:69,integrability,buffer,buffer,69,"Hello @guitargeek .Thanks for this PR, I see you even fill the local buffer with 0s to avoid fp exceptions later on. Just a naive question: how did you notice this defect in the code? Is there a way to know whether we have others hiding somewhere else?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:87,safety,avoid,avoid,87,"Hello @guitargeek .Thanks for this PR, I see you even fill the local buffer with 0s to avoid fp exceptions later on. Just a naive question: how did you notice this defect in the code? Is there a way to know whether we have others hiding somewhere else?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:96,safety,except,exceptions,96,"Hello @guitargeek .Thanks for this PR, I see you even fill the local buffer with 0s to avoid fp exceptions later on. Just a naive question: how did you notice this defect in the code? Is there a way to know whether we have others hiding somewhere else?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:280,availability,error,errors,280,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:357,availability,error,errors,357,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:660,availability,error,errors,660,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:237,deployability,build,building,237,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:296,deployability,stack,stackoverflow,296,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:280,performance,error,errors,280,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:357,performance,error,errors,357,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:660,performance,error,errors,660,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:175,reliability,pra,pragma,175,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:186,reliability,diagno,diagnostic,186,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:492,reliability,pra,pragma,492,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:503,reliability,diagno,diagnostic,503,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:280,safety,error,errors,280,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:357,safety,error,errors,357,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:660,safety,error,errors,660,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:186,testability,diagno,diagnostic,186,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:503,testability,diagno,diagnostic,503,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:280,usability,error,errors,280,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:357,usability,error,errors,357,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13772:660,usability,error,errors,660,"Hi @dpiparo, thanks for you comment! I found the problem by removing this line:. https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/Types.h#L12. ```c++. #pragma GCC diagnostic ignored ""-Warray-bounds"". ```. And then building ROOT with [treating warnings like errors](https://stackoverflow.com/questions/73215417/cmake-treat-warnings-as-errors). > Is there a way to know whether we have others hiding somewhere else? Now there is, because with this PR I also remove the `#pragma GCC diagnostic ignored ""-Warray-bounds""`. So apparently, there are no other array-bounds problem of this sort at the moment, as it compiled for me with treating errors as warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13772
https://github.com/root-project/root/pull/13774:63,deployability,build,building,63,"Closed, because this was not deemed a sustainable solution for building parts of ROOT standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13774
https://github.com/root-project/root/pull/13774:38,energy efficiency,sustainab,sustainable,38,"Closed, because this was not deemed a sustainable solution for building parts of ROOT standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13774
https://github.com/root-project/root/pull/13774:0,usability,Close,Closed,0,"Closed, because this was not deemed a sustainable solution for building parts of ROOT standalone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13774
https://github.com/root-project/root/pull/13776:15,usability,prefer,prefer,15,"Thanks! I also prefer removing dead code, but I kept it because of this comment:. https://github.com/root-project/root/blob/master/hist/hbook/src/THbookFile.cxx#L771",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13776
https://github.com/root-project/root/pull/13776:253,usability,hint,hint,253,"> The comment is from 17 years ago: I think history has proven we can live without it. There is also no gain in removing the comment or the related (now commented out) code. At best, in the very unlikely case, we have a related report this would give a hint of what could be missing. . Technically, one could indeed remove the comment out code but would then have to replace it with more text in the comment to explain the nature of the information that the todo was talking about.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13776
https://github.com/root-project/root/pull/13777:49,availability,failur,failure,49,"Thanks for the review @dpiparo! So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:. https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777
https://github.com/root-project/root/pull/13777:49,deployability,fail,failure,49,"Thanks for the review @dpiparo! So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:. https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777
https://github.com/root-project/root/pull/13777:49,performance,failur,failure,49,"Thanks for the review @dpiparo! So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:. https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777
https://github.com/root-project/root/pull/13777:49,reliability,fail,failure,49,"Thanks for the review @dpiparo! So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:. https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777
https://github.com/root-project/root/pull/13777:15,safety,review,review,15,"Thanks for the review @dpiparo! So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:. https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777
https://github.com/root-project/root/pull/13777:15,testability,review,review,15,"Thanks for the review @dpiparo! So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:. https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777
https://github.com/root-project/root/pull/13777:208,testability,regress,regressions,208,"Thanks for the review @dpiparo! So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:. https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777
https://github.com/root-project/root/pull/13777:358,usability,feedback,feedback,358,"Thanks for the review @dpiparo! So far, the only failure is the one on ubuntu 2204 that was also seen before this PR:. https://github.com/root-project/root/pull/13775#issuecomment-1743080607. If there are no regressions in the CI output with respect to the other PR I linked, I will merge this PR and then follow up with more backports tomorrow based on the feedback from the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13777
https://github.com/root-project/root/pull/13779:349,availability,restor,restore,349,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:439,deployability,log,logical,439,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:786,deployability,compos,compositions,786,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:135,interoperability,specif,specifications,135,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:786,modifiability,compos,compositions,786,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:259,performance,time,time,259,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:303,performance,time,time,303,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:349,reliability,restor,restore,349,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:439,safety,log,logical,439,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:566,safety,safe,safely,566,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:439,security,log,logical,439,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:439,testability,log,logical,439,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:185,usability,clear,clear,185,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:385,usability,user,user-defined,385,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:362,availability,restor,restore,362,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:452,deployability,log,logical,452,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:811,deployability,compos,compositions,811,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1639,deployability,updat,update,1639,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1006,energy efficiency,current,currently,1006,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:142,interoperability,specif,specifications,142,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1350,interoperability,specif,specify,1350,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:811,modifiability,compos,compositions,811,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:272,performance,time,time,272,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:316,performance,time,time,316,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1365,performance,disk,disk,1365,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1421,performance,memor,memory,1421,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1487,performance,memor,memory,1487,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1510,performance,disk,disk,1510,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:362,reliability,restor,restore,362,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:452,safety,log,logical,452,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:585,safety,safe,safely,585,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1265,safety,valid,valid,1265,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1639,safety,updat,update,1639,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:452,security,log,logical,452,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1459,security,ident,identical,1459,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1639,security,updat,update,1639,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:452,testability,log,logical,452,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:198,usability,clear,clear,198,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:398,usability,user,user-defined,398,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1421,usability,memor,memory,1421,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1487,usability,memor,memory,1487,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1538,usability,document,documented,1538,"> I also have a general comment,. > . > https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. > . > it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. > . > 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name). > . > 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions? This is a good question. If you omit the type name for structs or collections, they become untyped structs or untyped collections. RDF can deal with this fully, the `RNTupleReader` currently only with untyped collections (transparently cast to an `std::vector`). In general, C++/framework code is likely to have problems with untyped structs because there is no class to read data into... Still, untyped structs and untyped collections are valid RNTuple data. For basic types, we cannot omit the type because the column only specify the on-disk type while the field type information gives the in-memory type. The two don't have to be identical (e.g. `double` in memory and `Real32` on disk). I thought we already documented the allowed combinations of POD type and column types but I now realized we didn't. We'll update the docs in a follow-up PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:88,availability,down,down,88,">simplify frame layout. seems like one step in the right direction in terms of trimming down number of ""speed bumps"" in reading things!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1,testability,simpl,simplify,1,">simplify frame layout. seems like one step in the right direction in terms of trimming down number of ""speed bumps"" in reading things!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:1,usability,simpl,simplify,1,">simplify frame layout. seems like one step in the right direction in terms of trimming down number of ""speed bumps"" in reading things!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:15,deployability,build,build,15,"This broke the build on Ubuntu 20.04 because we require xxHash 0.8 while there is only version 0.7.3 in the package repositories. I think we should turn on `builtin_xxhash`, see https://github.com/root-project/root/pull/14338",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:87,deployability,version,version,87,"This broke the build on Ubuntu 20.04 because we require xxHash 0.8 while there is only version 0.7.3 in the package repositories. I think we should turn on `builtin_xxhash`, see https://github.com/root-project/root/pull/14338",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:87,integrability,version,version,87,"This broke the build on Ubuntu 20.04 because we require xxHash 0.8 while there is only version 0.7.3 in the package repositories. I think we should turn on `builtin_xxhash`, see https://github.com/root-project/root/pull/14338",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:116,integrability,repositor,repositories,116,"This broke the build on Ubuntu 20.04 because we require xxHash 0.8 while there is only version 0.7.3 in the package repositories. I think we should turn on `builtin_xxhash`, see https://github.com/root-project/root/pull/14338",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:116,interoperability,repositor,repositories,116,"This broke the build on Ubuntu 20.04 because we require xxHash 0.8 while there is only version 0.7.3 in the package repositories. I think we should turn on `builtin_xxhash`, see https://github.com/root-project/root/pull/14338",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:87,modifiability,version,version,87,"This broke the build on Ubuntu 20.04 because we require xxHash 0.8 while there is only version 0.7.3 in the package repositories. I think we should turn on `builtin_xxhash`, see https://github.com/root-project/root/pull/14338",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13779:108,modifiability,pac,package,108,"This broke the build on Ubuntu 20.04 because we require xxHash 0.8 while there is only version 0.7.3 in the package repositories. I think we should turn on `builtin_xxhash`, see https://github.com/root-project/root/pull/14338",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13779
https://github.com/root-project/root/pull/13783:97,availability,servic,services,97,"Thanks @guitargeek! > * [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/186635/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/). FWIW this was a missing backport in roottest, now done in https://github.com/root-project/roottest/pull/1022",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13783
https://github.com/root-project/root/pull/13783:97,deployability,servic,services,97,"Thanks @guitargeek! > * [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/186635/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/). FWIW this was a missing backport in roottest, now done in https://github.com/root-project/roottest/pull/1022",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13783
https://github.com/root-project/root/pull/13783:149,deployability,build,build,149,"Thanks @guitargeek! > * [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/186635/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/). FWIW this was a missing backport in roottest, now done in https://github.com/root-project/roottest/pull/1022",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13783
https://github.com/root-project/root/pull/13783:97,integrability,servic,services,97,"Thanks @guitargeek! > * [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/186635/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/). FWIW this was a missing backport in roottest, now done in https://github.com/root-project/roottest/pull/1022",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13783
https://github.com/root-project/root/pull/13783:97,modifiability,servic,services,97,"Thanks @guitargeek! > * [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/186635/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/). FWIW this was a missing backport in roottest, now done in https://github.com/root-project/roottest/pull/1022",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13783
https://github.com/root-project/root/pull/13783:162,safety,test,testReport,162,"Thanks @guitargeek! > * [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/186635/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/). FWIW this was a missing backport in roottest, now done in https://github.com/root-project/roottest/pull/1022",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13783
https://github.com/root-project/root/pull/13783:162,testability,test,testReport,162,"Thanks @guitargeek! > * [projectroot.roottest.python.stl.roottest_python_stl_stl](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/186635/testReport/projectroot.roottest.python/stl/roottest_python_stl_stl/). FWIW this was a missing backport in roottest, now done in https://github.com/root-project/roottest/pull/1022",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13783
https://github.com/root-project/root/pull/13783:21,energy efficiency,green,green,21,Perfect! 628 will be green soon then!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13783
https://github.com/root-project/root/pull/13784:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13784
https://github.com/root-project/root/pull/13784:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13784
https://github.com/root-project/root/pull/13785:34,deployability,fail,failing,34,Does this have any linked issue / failing CI test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:0,reliability,Doe,Does,0,Does this have any linked issue / failing CI test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:34,reliability,fail,failing,34,Does this have any linked issue / failing CI test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:45,safety,test,test,45,Does this have any linked issue / failing CI test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:45,testability,test,test,45,Does this have any linked issue / failing CI test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:36,deployability,fail,failing,36,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:90,deployability,fail,fails,90,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:204,performance,time,time,204,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:2,reliability,Doe,Does,2,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:36,reliability,fail,failing,36,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:90,reliability,fail,fails,90,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:47,safety,test,test,47,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:85,safety,test,test,85,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:148,safety,test,test,148,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:47,testability,test,test,47,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:85,testability,test,test,85,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13785:148,testability,test,test,148,"> Does this have any linked issue / failing CI test? Well, yes, sort of. The rreader test fails with LLVM 16. It also crashes with LLVM 13, but the test pass nevertheless (it just make ROOT crash at exit time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13785
https://github.com/root-project/root/pull/13786:45,availability,failur,failures,45,Thanks @hahnjo should be addressed now. (The failures probably tell me which packages are missing on the build nodes...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13786
https://github.com/root-project/root/pull/13786:45,deployability,fail,failures,45,Thanks @hahnjo should be addressed now. (The failures probably tell me which packages are missing on the build nodes...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13786
https://github.com/root-project/root/pull/13786:105,deployability,build,build,105,Thanks @hahnjo should be addressed now. (The failures probably tell me which packages are missing on the build nodes...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13786
https://github.com/root-project/root/pull/13786:77,modifiability,pac,packages,77,Thanks @hahnjo should be addressed now. (The failures probably tell me which packages are missing on the build nodes...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13786
https://github.com/root-project/root/pull/13786:45,performance,failur,failures,45,Thanks @hahnjo should be addressed now. (The failures probably tell me which packages are missing on the build nodes...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13786
https://github.com/root-project/root/pull/13786:45,reliability,fail,failures,45,Thanks @hahnjo should be addressed now. (The failures probably tell me which packages are missing on the build nodes...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13786
https://github.com/root-project/root/pull/13787:261,availability,failur,failures,261,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:133,deployability,fail,fail,133,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:200,deployability,patch,patch,200,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:261,deployability,fail,failures,261,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1158,deployability,releas,release,1158,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1445,deployability,releas,release,1445,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:207,energy efficiency,current,currently,207,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1364,energy efficiency,core,core,1364,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:98,interoperability,distribut,distributed,98,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1011,interoperability,specif,specifically,1011,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1498,interoperability,distribut,distributed,1498,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1041,modifiability,scal,scalar,1041,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1341,modifiability,pac,packages,1341,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:261,performance,failur,failures,261,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:133,reliability,fail,fail,133,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:261,reliability,fail,failures,261,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:5,safety,compl,completely,5,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:114,safety,test,test,114,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:200,safety,patch,patch,200,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:241,safety,test,test,241,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:289,safety,Test,TestPropagateExceptions,289,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:388,safety,Test,TestDefinePerSample,388,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:486,safety,Test,TestDefinePerSample,486,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:678,safety,Test,TestPropagateExceptions,678,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:998,safety,safe,safe,998,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1252,safety,Test,TestPropagateExceptions,1252,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1680,safety,test,test,1680,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:5,security,compl,completely,5,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:200,security,patch,patch,200,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:971,security,modif,modify,971,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:114,testability,test,test,114,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:241,testability,test,test,241,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:289,testability,Test,TestPropagateExceptions,289,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:388,testability,Test,TestDefinePerSample,388,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:486,testability,Test,TestDefinePerSample,486,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:678,testability,Test,TestPropagateExceptions,678,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1252,testability,Test,TestPropagateExceptions,1252,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1680,testability,test,test,1680,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:982,usability,behavi,behavior,982,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:1122,usability,guidanc,guidance,1122,"As a completely anecdotical evidence, I have been running on the `root-ubuntu-2004-1` machine the distributed RDF test which used to fail, which included calls to DefinePerSample. After applying this patch, currently ~1800 iterations of the test passed without failures. ```. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated <- check_backend.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_simple <- check_definepersample.py PASSED. test_all.py::TestDefinePerSample::test_definepersample_withinitialization <- check_definepersample.py PASSED. =============================== warnings summary ===============================. test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /home/sftnight/vpadulan/rootproject/rootbuild/master-like-jenkins/lib/ROOT/_facade.py:154: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here. Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. return _orig_ihook(name, *args, **kwds). test_all.py::TestPropagateExceptions::test_runtime_error_is_propagated. /usr/local/lib/python3.8/dist-packages/dask_jobqueue/core.py:20: FutureWarning: tmpfile is deprecated and will be removed in a future release. Please use dask.utils.tmpfile instead. from distributed.utils import tmpfile. -- Docs: https://docs.pytest.org/en/latest/warnings.html. ==================== 3 passed, 2 warnings in 32.72 seconds =====================. Running test 1864. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:349,interoperability,specif,specific,349,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:10,safety,test,tests,10,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:115,security,modif,modify,115,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:2,testability,Simpl,Simpler,2,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:10,testability,test,tests,10,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:2,usability,Simpl,Simpler,2,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13787:161,usability,prefer,prefer,161,"> Simpler tests that go straight to the point are easier to debug when they break. That's a good point yes. I will modify the reproducer for the linked issue. I prefer to keep the reproducer of the cloning issue because it's also mimicking the extra machinery involved in creating different tasks, changing the RDF spec and cloning the actions in a specific way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13787
https://github.com/root-project/root/pull/13793:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:11,deployability,build,build,11,@phsft-bot build just on windows10/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:23,safety,review,review,23,"@pcanal thanks for the review. Since it is a backport, should I also change the master and then backport those changes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:23,testability,review,review,23,"@pcanal thanks for the review. Since it is a backport, should I also change the master and then backport those changes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:292,deployability,patch,patches,292,"> > Since it is a backport, should I also change the master and then backport those changes? > . > Yes, the change technically should be in the master. However they are NFC, so not urgent. So I can merge this PR and apply your required changes later on in master and backport them to 6-28-00-patches, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:227,modifiability,required chang,required changes,227,"> > Since it is a backport, should I also change the master and then backport those changes? > . > Yes, the change technically should be in the master. However they are NFC, so not urgent. So I can merge this PR and apply your required changes later on in master and backport them to 6-28-00-patches, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:292,safety,patch,patches,292,"> > Since it is a backport, should I also change the master and then backport those changes? > . > Yes, the change technically should be in the master. However they are NFC, so not urgent. So I can merge this PR and apply your required changes later on in master and backport them to 6-28-00-patches, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:292,security,patch,patches,292,"> > Since it is a backport, should I also change the master and then backport those changes? > . > Yes, the change technically should be in the master. However they are NFC, so not urgent. So I can merge this PR and apply your required changes later on in master and backport them to 6-28-00-patches, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:420,availability,error,error,420,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:465,availability,failur,failures,465,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:174,deployability,patch,patches,174,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:204,deployability,fail,failing,204,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:250,deployability,log,logs,250,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:382,deployability,patch,patches,382,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:465,deployability,fail,failures,465,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:420,performance,error,error,420,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:465,performance,failur,failures,465,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:204,reliability,fail,failing,204,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:465,reliability,fail,failures,465,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:45,safety,test,test,45,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:174,safety,patch,patches,174,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:194,safety,test,tests,194,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:250,safety,log,logs,250,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:382,safety,patch,patches,382,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:420,safety,error,error,420,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:174,security,patch,patches,174,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:250,security,log,logs,250,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:382,security,patch,patches,382,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:45,testability,test,test,45,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:194,testability,test,tests,194,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:250,testability,log,logs,250,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:420,usability,error,error,420,"@bellenot , @Axel-Naumann , we are trying to test latest ROOT 6.28 [changes](https://github.com/root-project/root/compare/96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc...v6-28-00-patches) and our CI tests are failing with `Too many open files` and system logs shows [a]. . Note that 96ca920f34bf6ec1e8f70ed253c7e4228ea0d3cc worked fine for CMSSW, it is just the last two commits on 6-28 patches branch which are causing this error. Could this PR be the reason for these failures? [a]. ```. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. Oct 19 15:23:09 cmsbuild120.cern.ch cvmfs2[6803]: (unpacked.cern.ch) open file descriptor limit exceeded. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:79,usability,Close,Close,79,"Not sure why yet, but indeed very likely related to the addition of `TWebFile::Close`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:132,availability,error,error,132,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:4,deployability,patch,patch,4,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:13,interoperability,semant,semantically,13,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:132,performance,error,error,132,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:4,safety,patch,patch,4,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:132,safety,error,error,132,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:4,security,patch,patch,4,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:81,usability,Close,Close,81,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:132,usability,error,error,132,The patch is semantically wrong (the new code should have been after the `TFile::Close` but I also can see why it would lead to the error ... and I can not reproduce it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:62,availability,error,errors,62,"Sorry about that. I don't see how this change can lead to the errors you see, but anyway, how can I reproduce the error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:114,availability,error,error,114,"Sorry about that. I don't see how this change can lead to the errors you see, but anyway, how can I reproduce the error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:62,performance,error,errors,62,"Sorry about that. I don't see how this change can lead to the errors you see, but anyway, how can I reproduce the error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:114,performance,error,error,114,"Sorry about that. I don't see how this change can lead to the errors you see, but anyway, how can I reproduce the error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:62,safety,error,errors,62,"Sorry about that. I don't see how this change can lead to the errors you see, but anyway, how can I reproduce the error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:114,safety,error,error,114,"Sorry about that. I don't see how this change can lead to the errors you see, but anyway, how can I reproduce the error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:62,usability,error,errors,62,"Sorry about that. I don't see how this change can lead to the errors you see, but anyway, how can I reproduce the error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:114,usability,error,error,114,"Sorry about that. I don't see how this change can lead to the errors you see, but anyway, how can I reproduce the error?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:170,availability,error,error,170,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:104,deployability,build,build,104,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:155,deployability,fail,fail,155,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:269,deployability,fail,fail,269,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:83,performance,time,times,83,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:127,performance,time,time,127,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:170,performance,error,error,170,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:155,reliability,fail,fail,155,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:269,reliability,fail,fail,269,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:68,safety,test,tests,68,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:149,safety,test,tests,149,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:170,safety,error,error,170,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:222,safety,test,tests,222,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:68,testability,test,tests,68,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:144,testability,unit,unit,144,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:149,testability,test,tests,149,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:222,testability,test,tests,222,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:170,usability,error,error,170,I am also not sure how TWebFile can cause this. I have tried to run tests multiple times 9 on different build nodes) and every time some random unit tests fail with same error (`Too many open files`). I am now running the tests without this change to see if they still fail or not,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:54,deployability,version,versions,54,"So looks like issue is not with this change. All ROOT versions 6.28 and above (i.e 6.28, 6.30 and master) open a lot of files (`37K` vs `4K`) as compare to root 6.26. See https://github.com/cms-sw/cmssw/issues/43077 issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:54,integrability,version,versions,54,"So looks like issue is not with this change. All ROOT versions 6.28 and above (i.e 6.28, 6.30 and master) open a lot of files (`37K` vs `4K`) as compare to root 6.26. See https://github.com/cms-sw/cmssw/issues/43077 issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:54,modifiability,version,versions,54,"So looks like issue is not with this change. All ROOT versions 6.28 and above (i.e 6.28, 6.30 and master) open a lot of files (`37K` vs `4K`) as compare to root 6.26. See https://github.com/cms-sw/cmssw/issues/43077 issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:34,deployability,version,versions,34,"OK, thanks @smuzaffar. > All ROOT versions 6.28. You mean even with previous version of 6.28 (e.g. 6.28.06)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:77,deployability,version,version,77,"OK, thanks @smuzaffar. > All ROOT versions 6.28. You mean even with previous version of 6.28 (e.g. 6.28.06)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:34,integrability,version,versions,34,"OK, thanks @smuzaffar. > All ROOT versions 6.28. You mean even with previous version of 6.28 (e.g. 6.28.06)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:77,integrability,version,version,77,"OK, thanks @smuzaffar. > All ROOT versions 6.28. You mean even with previous version of 6.28 (e.g. 6.28.06)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:34,modifiability,version,versions,34,"OK, thanks @smuzaffar. > All ROOT versions 6.28. You mean even with previous version of 6.28 (e.g. 6.28.06)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:77,modifiability,version,version,77,"OK, thanks @smuzaffar. > All ROOT versions 6.28. You mean even with previous version of 6.28 (e.g. 6.28.06)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:16,deployability,patch,patches,16,"yes , root 6.28 patches branch even before this change. I do not know when this behavior started (I am testing it in previous builds of root 628 releases to see if I can identify it)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:126,deployability,build,builds,126,"yes , root 6.28 patches branch even before this change. I do not know when this behavior started (I am testing it in previous builds of root 628 releases to see if I can identify it)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:145,deployability,releas,releases,145,"yes , root 6.28 patches branch even before this change. I do not know when this behavior started (I am testing it in previous builds of root 628 releases to see if I can identify it)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:16,safety,patch,patches,16,"yes , root 6.28 patches branch even before this change. I do not know when this behavior started (I am testing it in previous builds of root 628 releases to see if I can identify it)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:103,safety,test,testing,103,"yes , root 6.28 patches branch even before this change. I do not know when this behavior started (I am testing it in previous builds of root 628 releases to see if I can identify it)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:16,security,patch,patches,16,"yes , root 6.28 patches branch even before this change. I do not know when this behavior started (I am testing it in previous builds of root 628 releases to see if I can identify it)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:170,security,ident,identify,170,"yes , root 6.28 patches branch even before this change. I do not know when this behavior started (I am testing it in previous builds of root 628 releases to see if I can identify it)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:103,testability,test,testing,103,"yes , root 6.28 patches branch even before this change. I do not know when this behavior started (I am testing it in previous builds of root 628 releases to see if I can identify it)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13793:80,usability,behavi,behavior,80,"yes , root 6.28 patches branch even before this change. I do not know when this behavior started (I am testing it in previous builds of root 628 releases to see if I can identify it)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13793
https://github.com/root-project/root/pull/13794:23,deployability,instal,installation,23,I think apart from the installation I need to teach `TROOT` (or whoever else is reading this file) to read it from the build directory if we cannot read it from the install directory (e.g. because ROOT hasn't been installed yet). What do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:119,deployability,build,build,119,I think apart from the installation I need to teach `TROOT` (or whoever else is reading this file) to read it from the build directory if we cannot read it from the install directory (e.g. because ROOT hasn't been installed yet). What do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:165,deployability,instal,install,165,I think apart from the installation I need to teach `TROOT` (or whoever else is reading this file) to read it from the build directory if we cannot read it from the install directory (e.g. because ROOT hasn't been installed yet). What do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:214,deployability,instal,installed,214,I think apart from the installation I need to teach `TROOT` (or whoever else is reading this file) to read it from the build directory if we cannot read it from the install directory (e.g. because ROOT hasn't been installed yet). What do you think?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:76,deployability,instal,installed,76,"> What do you think? I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:147,deployability,instal,installation,147,"> What do you think? I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:172,deployability,build,build,172,"> What do you think? I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:202,deployability,log,logic,202,"> What do you think? I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:281,energy efficiency,current,current,281,"> What do you think? I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:133,modifiability,pac,packaged,133,"> What do you think? I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:202,safety,log,logic,202,"> What do you think? I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:202,security,log,logic,202,"> What do you think? I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/pull/13794:202,testability,log,logic,202,"> What do you think? I think it makes sense if and only if ROOT hasn't been installed yet. But I'm also thinking about the case of a packaged ROOT installation, there's no build directory there. So the logic that needs to read this file should be able to distinguish which is the ""current"" path at which the file must be read from.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13794
https://github.com/root-project/root/issues/13798:25,availability,failur,failure,25,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:25,deployability,fail,failure,25,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:86,deployability,instal,installation,86,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:536,interoperability,bind,bindings,536,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:536,modifiability,bind,bindings,536,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:25,performance,failur,failure,25,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:25,reliability,fail,failure,25,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:132,testability,simpl,simpler,132,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:364,testability,understand,understand,364,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:132,usability,simpl,simpler,132,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:215,usability,command,command,215,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:404,usability,command,command,404,"The direct reason of the failure seems to be that, at least when using SWAN, the ROOT installation is somehow ill-formed. This is a simpler reproducer that just uses Spark primitives to try to run the `root-config` command on the worker. ![image](https://github.com/root-project/root/assets/15638895/f53c6803-7e0d-44cc-80be-160f4065af9c). In all fairness, I don't understand the reason to call into that command in the first place, which happens [here](https://github.com/root-project/root/blob/07872d92719e3682213d732956a32f16be5eacf3/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/__init__.py#L47), so I will investigate if that is needed at all.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:58,interoperability,distribut,distributed,58,"Hello. I think this issue is quite relevant, not only for distributed execution, but also for PyROOT usability in general. This is why I proposed these changes, in case they turn out to seem useful https://github.com/root-project/root/pull/13803",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:101,usability,usab,usability,101,"Hello. I think this issue is quite relevant, not only for distributed execution, but also for PyROOT usability in general. This is why I proposed these changes, in case they turn out to seem useful https://github.com/root-project/root/pull/13803",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:470,availability,avail,available,470,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:57,deployability,continu,continue,57,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:447,modifiability,variab,variables,447,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:470,reliability,availab,available,470,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:361,safety,compl,completeness,361,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:470,safety,avail,available,470,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:557,safety,compl,completely,557,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:361,security,compl,completeness,361,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:470,security,availab,available,470,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:494,security,session,session,494,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:557,security,compl,completely,557,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:243,usability,close,closed,243,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/issues/13798:654,usability,command,command,654,"Thanks @dpiparo for your PR, after merging I was able to continue the investigation on this issue! After removing this code from the TMVA initialization, we are seeing different problems, so I will open a new issue for those and consider this closed. Still, since all the problems we see are related to the same triggering factor, I will also write it here for completeness. It turns out that the Spark workers have a different set of environment variables from the one available in the client session. In particular, the `PATH` and `ROOT_INCLUDE_PATH` are completely removed in the Spark workers, which was also causing the absence of the `root-config` command",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13798
https://github.com/root-project/root/pull/13799:132,energy efficiency,reduc,reduced,132,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13799:289,interoperability,distribut,distribution,289,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13799:94,performance,time,time,94,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13799:243,performance,time,time,243,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13799:322,performance,cach,cached,322,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13799:225,security,sign,significantly,225,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13799:305,security,access,accessed,305,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13799:147,usability,minim,minimum,147,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13799:204,usability,command,command,204,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13799:45,testability,understand,understand,45,"Closing in favor of #13803 . We should still understand why those imports are needed at all, but that's for another PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13799
https://github.com/root-project/root/pull/13803:156,deployability,build,build,156,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:207,deployability,modul,module,207,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:308,deployability,build,build,308,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:345,deployability,modul,module,345,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:381,deployability,build,build,381,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:465,deployability,build,build,465,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:554,deployability,build,build,554,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:766,deployability,build,build,766,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:813,deployability,modul,module,813,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:849,deployability,build,build,849,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:883,deployability,modul,module,883,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:919,deployability,build,build,919,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:950,deployability,modul,module,950,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1226,deployability,build,build,1226,5 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1467,deployability,build,build,1467,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1504,deployability,modul,module,1504,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1540,deployability,build,build,1540,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1624,deployability,build,build,1624,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1701,deployability,build,build,1701,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1925,deployability,build,build,1925,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1976,deployability,modul,module,1976,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2012,deployability,build,build,2012,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2059,deployability,modul,module,2059,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2095,deployability,build,build,2095,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2129,deployability,modul,module,2129,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2165,deployability,build,build,2165,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2196,deployability,modul,module,2196,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:32,energy efficiency,profil,profiling,32,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1072,energy efficiency,load,loads,1072,ime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.00,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2258,energy efficiency,load,loads,2258,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:714,integrability,Buffer,BufferedReader,714,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1814,integrability,Buffer,BufferedReader,1814,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1064,interoperability,marshal,marshal,1064,ls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2250,interoperability,marshal,marshal,2250,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:207,modifiability,modul,module,207,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:345,modifiability,modul,module,345,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:813,modifiability,modul,module,813,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:883,modifiability,modul,module,883,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:950,modifiability,modul,module,950,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1504,modifiability,modul,module,1504,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1976,modifiability,modul,module,1976,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2059,modifiability,modul,module,2059,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2129,modifiability,modul,module,2129,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2196,modifiability,modul,module,2196,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:32,performance,profil,profiling,32,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1072,performance,load,loads,1072,ime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.00,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2258,performance,load,loads,2258,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:4,safety,compl,completeness,4,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:207,safety,modul,module,207,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:345,safety,modul,module,345,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:813,safety,modul,module,813,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:883,safety,modul,module,883,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:950,safety,modul,module,950,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1504,safety,modul,module,1504,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:1976,safety,modul,module,1976,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2059,safety,modul,module,2059,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2129,safety,modul,module,2129,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:2196,safety,modul,module,2196,ib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.007 0.007 0.007 0.007 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 0.700 0.700 build/lib/cppyy/__init__.py:1(<module>). 93 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 12 0.001 0.000 0.001 0.000 {built-in method posix.listdir}. 418 0.001 0.000 0.001 0.000 {built-in method posix.stat}. ```.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13803:4,security,compl,completeness,4,"For completeness, some detailed profiling:. *BEFORE*. ```bash . ncalls tottime percall cumtime percall filename:lineno(function). 1 1.202 1.202 1.205 1.205 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 8 0.758 0.095 0.758 0.095 {built-in method _imp.create_dynamic}. 1 0.245 0.245 0.444 0.444 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.183 0.183 0.183 0.183 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.023 0.023 0.023 0.023 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 1 0.023 0.023 0.023 0.023 build/lib/cppyy/__init__.py:218(add_include_path). 95 0.017 0.000 0.017 0.000 {built-in method io.open_code}. 95 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_pythonization/_drawables.py:1(<module>). 1 0.008 0.008 0.008 0.008 build/lib/ROOT/_application.py:1(<module>). 1 0.004 0.004 1.162 1.162 build/lib/cppyy/__init__.py:1(<module>). 12 0.002 0.000 0.002 0.000 {built-in method posix.listdir}. 91 0.002 0.000 0.002 0.000 {built-in method marshal.loads}. 2 0.002 0.001 0.002 0.001 {built-in method builtins.compile}. 422 0.001 0.000 0.001 0.000 {built-in method posix.stat}. 1 0.001 0.001 0.001 0.001 build/lib/ROOT/_pythonization/_titer.py:25(pythonize_titer). ```. *AFTER*. ```bash. ncalls tottime percall cumtime percall filename:lineno(function). 8 0.342 0.043 0.342 0.043 {built-in method _imp.create_dynamic}. 1 0.236 0.236 0.381 0.381 build/lib/cppyy/_cpython_cppyy.py:1(<module>). 1 0.129 0.129 0.129 0.129 build/lib/cppyy/_cpython_cppyy.py:102(add_default_paths). 1 0.021 0.021 0.021 0.021 build/lib/cppyy/__init__.py:218(add_include_path). 1 0.020 0.020 0.020 0.020 build/lib/ROOT/_pythonization/_tclass.py:15(pythonize_tclass). 93 0.011 0.000 0.011 0.000 {method 'read' of '_io.BufferedReader' objects}. 93 0.009 0.000 0.009 0.000 {built-in method io.open_code}. 1 0.008 0.008 0.011 0.011 build/lib/ROOT/_pythonization/_tmva/__init__.py:1(<module>). 1 0.007 0.007 ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13803
https://github.com/root-project/root/pull/13804:861,availability,failur,failures,861,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:1072,availability,failur,failures,1072,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:861,deployability,fail,failures,861,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:1072,deployability,fail,failures,1072,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:108,integrability,pub,publish-unit-test-result-action,108,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:231,integrability,pub,publish-unit-test-result-action,231,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:333,integrability,pub,publish-unit-test-result-action,333,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:435,integrability,pub,publish-unit-test-result-action,435,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:556,integrability,pub,publish-unit-test-result-action,556,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:658,integrability,pub,publish-unit-test-result-action,658,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:760,integrability,pub,publish-unit-test-result-action,760,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:861,performance,failur,failures,861,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:1072,performance,failur,failures,1072,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:861,reliability,fail,failures,861,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:1072,reliability,fail,failures,1072,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:5,safety,Test,Test,5,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:121,safety,test,test-result-action,121,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:184,safety,test,tests,184,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:244,safety,test,test-result-action,244,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:346,safety,test,test-result-action,346,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:448,safety,test,test-result-action,448,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:569,safety,test,test-result-action,569,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:671,safety,test,test-result-action,671,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:773,safety,test,test-result-action,773,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:5,testability,Test,Test,5,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:116,testability,unit,unit-test-result-action,116,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:184,testability,test,tests,184,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:239,testability,unit,unit-test-result-action,239,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:341,testability,unit,unit-test-result-action,341,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:443,testability,unit,unit-test-result-action,443,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:564,testability,unit,unit-test-result-action,564,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:666,testability,unit,unit-test-result-action,666,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:768,testability,unit,unit-test-result-action,768,"> ## Test Results. > . >        10 files         10 suites   2d 3h 27m 12s [⏱️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols)   2 483 tests   2 481 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 2 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 23 787 runs  23 784 [✔️](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 0 [💤](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols) 3 [❌](https://github.com/EnricoMi/publish-unit-test-result-action/blob/v2.10.0/README.md#the-symbols). > . > For more details on these failures, see [this check](https://github.com/root-project/root/runs/17392931027). > . > Results for commit [2147c0f](https://github.com/root-project/root/commit/2147c0ff8d4f508107a968f70af1a9b12269046a). These failures are not related to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:26,availability,ping,ping,26,"Just for reference and to ping @will-cern, this PR fixes the same issue that https://github.com/root-project/root/pull/13294 already identified earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:133,security,ident,identified,133,"Just for reference and to ping @will-cern, this PR fixes the same issue that https://github.com/root-project/root/pull/13294 already identified earlier.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:28,availability,ping,ping,28,"> Just for reference and to ping @will-cern, this PR fixes the same issue that #13294 already identified earlier. Right, but the functionality of https://github.com/root-project/root/pull/13427 definitely needs to go in. The change in this PR is really just fixing something that we don't want sticking around anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:94,security,ident,identified,94,"> Just for reference and to ping @will-cern, this PR fixes the same issue that #13294 already identified earlier. Right, but the functionality of https://github.com/root-project/root/pull/13427 definitely needs to go in. The change in this PR is really just fixing something that we don't want sticking around anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13804:25,usability,close,close,25,@guitargeek feel free to close this now if you don't want to go forward with this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13804
https://github.com/root-project/root/pull/13807:11,deployability,build,build,11,@phsft-bot build on mac13arm/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13807
https://github.com/root-project/root/pull/13807:11,deployability,build,build,11,@phsft-bot build on mac13arm/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13807
https://github.com/root-project/root/pull/13808:80,reliability,doe,does,80,"@ktf, this is a backport of https://github.com/llvm/llvm-project/pull/66430 but does it include https://github.com/llvm/llvm-project/pull/67958?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:186,availability,SLo,SLocEntry,186,"@ktf this fails quite horribly in CI:. ```. TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed. ```. @Axel-Naumann I'm not convinced this should be backported to 6.28, this has the potential to break *a lot* of things...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:10,deployability,fail,fails,10,"@ktf this fails quite horribly in CI:. ```. TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed. ```. @Axel-Naumann I'm not convinced this should be backported to 6.28, this has the potential to break *a lot* of things...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:324,deployability,fail,failed,324,"@ktf this fails quite horribly in CI:. ```. TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed. ```. @Axel-Naumann I'm not convinced this should be backported to 6.28, this has the potential to break *a lot* of things...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:10,reliability,fail,fails,10,"@ktf this fails quite horribly in CI:. ```. TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed. ```. @Axel-Naumann I'm not convinced this should be backported to 6.28, this has the potential to break *a lot* of things...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:186,reliability,SLo,SLocEntry,186,"@ktf this fails quite horribly in CI:. ```. TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed. ```. @Axel-Naumann I'm not convinced this should be backported to 6.28, this has the potential to break *a lot* of things...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:324,reliability,fail,failed,324,"@ktf this fails quite horribly in CI:. ```. TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed. ```. @Axel-Naumann I'm not convinced this should be backported to 6.28, this has the potential to break *a lot* of things...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:258,testability,Assert,Assertion,258,"@ktf this fails quite horribly in CI:. ```. TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed. ```. @Axel-Naumann I'm not convinced this should be backported to 6.28, this has the potential to break *a lot* of things...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:104,deployability,fail,fails,104,"With the original PR accepted upstream and an experiment requesting this we need good reasons (such as ""fails quite horribly in CI"" :-) ) to refuse the backport. I think we want to work with @ktf to make this PR work... @ktf the problem is that another patch release is *imminent* and this PR seems not yet ready for prime time. It will have to miss this train but take the next one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:253,deployability,patch,patch,253,"With the original PR accepted upstream and an experiment requesting this we need good reasons (such as ""fails quite horribly in CI"" :-) ) to refuse the backport. I think we want to work with @ktf to make this PR work... @ktf the problem is that another patch release is *imminent* and this PR seems not yet ready for prime time. It will have to miss this train but take the next one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:259,deployability,releas,release,259,"With the original PR accepted upstream and an experiment requesting this we need good reasons (such as ""fails quite horribly in CI"" :-) ) to refuse the backport. I think we want to work with @ktf to make this PR work... @ktf the problem is that another patch release is *imminent* and this PR seems not yet ready for prime time. It will have to miss this train but take the next one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:323,performance,time,time,323,"With the original PR accepted upstream and an experiment requesting this we need good reasons (such as ""fails quite horribly in CI"" :-) ) to refuse the backport. I think we want to work with @ktf to make this PR work... @ktf the problem is that another patch release is *imminent* and this PR seems not yet ready for prime time. It will have to miss this train but take the next one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:104,reliability,fail,fails,104,"With the original PR accepted upstream and an experiment requesting this we need good reasons (such as ""fails quite horribly in CI"" :-) ) to refuse the backport. I think we want to work with @ktf to make this PR work... @ktf the problem is that another patch release is *imminent* and this PR seems not yet ready for prime time. It will have to miss this train but take the next one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:253,safety,patch,patch,253,"With the original PR accepted upstream and an experiment requesting this we need good reasons (such as ""fails quite horribly in CI"" :-) ) to refuse the backport. I think we want to work with @ktf to make this PR work... @ktf the problem is that another patch release is *imminent* and this PR seems not yet ready for prime time. It will have to miss this train but take the next one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:253,security,patch,patch,253,"With the original PR accepted upstream and an experiment requesting this we need good reasons (such as ""fails quite horribly in CI"" :-) ) to refuse the backport. I think we want to work with @ktf to make this PR work... @ktf the problem is that another patch release is *imminent* and this PR seems not yet ready for prime time. It will have to miss this train but take the next one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:169,availability,SLo,SLocEntry,169,"Looks like we fail with ```TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed.```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:14,deployability,fail,fail,14,"Looks like we fail with ```TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed.```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:307,deployability,fail,failed,307,"Looks like we fail with ```TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed.```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:14,reliability,fail,fail,14,"Looks like we fail with ```TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed.```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:169,reliability,SLo,SLocEntry,169,"Looks like we fail with ```TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed.```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:307,reliability,fail,failed,307,"Looks like we fail with ```TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed.```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:241,testability,Assert,Assertion,241,"Looks like we fail with ```TFormulaGradientTests: /github/home/ROOT-CI/src/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:1694: const clang::SrcMgr::SLocEntry& clang::SourceManager::getLocalSLocEntry(unsigned int) const: Assertion `Index < LocalSLocEntryTable.size() && ""Invalid index""' failed.```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:159,deployability,patch,patch,159,"@hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:92,integrability,discover,discovered,92,"@hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:92,interoperability,discover,discovered,92,"@hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:150,performance,tune,tune,150,"@hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:159,safety,patch,patch,159,"@hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:159,security,patch,patch,159,"@hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:92,usability,discov,discovered,92,"@hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:16,deployability,fail,fail,16,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:246,deployability,patch,patch,246,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:368,deployability,patch,patch,368,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:374,deployability,releas,release,374,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:179,integrability,discover,discovered,179,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:179,interoperability,discover,discovered,179,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:237,performance,tune,tune,237,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:16,reliability,fail,fail,16,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:246,safety,patch,patch,246,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:368,safety,patch,patch,368,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:246,security,patch,patch,246,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:368,security,patch,patch,368,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:179,usability,discov,discovered,179,"> Looks like we fail with [...]. Yes, that's exactly what I posted 45 minutes ago... > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:427,availability,failur,failures,427,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:18,deployability,fail,fail,18,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:260,deployability,patch,patch,260,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:388,deployability,patch,patch,388,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:394,deployability,releas,release,394,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:427,deployability,fail,failures,427,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:193,integrability,discover,discovered,193,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:193,interoperability,discover,discovered,193,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:251,performance,tune,tune,251,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:427,performance,failur,failures,427,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:18,reliability,fail,fail,18,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:427,reliability,fail,failures,427,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:260,safety,patch,patch,260,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:388,safety,patch,patch,388,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:260,security,patch,patch,260,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:388,security,patch,patch,388,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:193,usability,discov,discovered,193,"> > Looks like we fail with [...]. > . > Yes, that's exactly what I posted 45 minutes ago... > . > > @hahnjo, the area in clang which @ktf touches hasn't been changing for years. Maybe we just discovered something that upstream has not and we need to tune the patch... > . > Yes, that's what I'm saying. And IMHO that ""tuning"" should not happen after we broke everybody's ROOT in a minor patch release... Agreed, let's fix the failures in the master and re-evaluate what should be done next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:44,testability,simpl,simply,44,I am checking what's going on. I might have simply screwed up the backport.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:44,usability,simpl,simply,44,I am checking what's going on. I might have simply screwed up the backport.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:109,reliability,doe,does,109,"> @ktf, this is a backport of [llvm/llvm-project#66430](https://github.com/llvm/llvm-project/pull/66430) but does it include [llvm/llvm-project#67958](https://github.com/llvm/llvm-project/pull/67958)? Not yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:35,deployability,patch,patch,35,> @ktf the problem is that another patch release is _imminent_ and this PR seems not yet ready for prime time. It will have to miss this train but take the next one. That's fine for me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:41,deployability,releas,release,41,> @ktf the problem is that another patch release is _imminent_ and this PR seems not yet ready for prime time. It will have to miss this train but take the next one. That's fine for me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:105,performance,time,time,105,> @ktf the problem is that another patch release is _imminent_ and this PR seems not yet ready for prime time. It will have to miss this train but take the next one. That's fine for me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:35,safety,patch,patch,35,> @ktf the problem is that another patch release is _imminent_ and this PR seems not yet ready for prime time. It will have to miss this train but take the next one. That's fine for me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:35,security,patch,patch,35,> @ktf the problem is that another patch release is _imminent_ and this PR seems not yet ready for prime time. It will have to miss this train but take the next one. That's fine for me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:127,deployability,build,build,127,Needless to say that the (+ -DLLVM_ENABLE_ASSERTIONS=On) with my setup works fine. Investigating what difference I have in the build environment (I also already tried CXX20...).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:4,deployability,updat,updated,4,The updated version should be closer to what is currently in llvm upstream...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:12,deployability,version,version,12,The updated version should be closer to what is currently in llvm upstream...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:48,energy efficiency,current,currently,48,The updated version should be closer to what is currently in llvm upstream...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:12,integrability,version,version,12,The updated version should be closer to what is currently in llvm upstream...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:12,modifiability,version,version,12,The updated version should be closer to what is currently in llvm upstream...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:4,safety,updat,updated,4,The updated version should be closer to what is currently in llvm upstream...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:4,security,updat,updated,4,The updated version should be closer to what is currently in llvm upstream...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:30,usability,close,closer,30,The updated version should be closer to what is currently in llvm upstream...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:6,deployability,updat,updated,6,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:14,deployability,version,version,14,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:140,deployability,patch,patch,140,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:204,deployability,upgrad,upgrade,204,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:50,energy efficiency,current,currently,50,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:14,integrability,version,version,14,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:14,modifiability,version,version,14,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:204,modifiability,upgrad,upgrade,204,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:6,safety,updat,updated,6,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:140,safety,patch,patch,140,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:6,security,updat,updated,6,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:140,security,patch,patch,140,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:32,usability,close,closer,32,"> The updated version should be closer to what is currently in llvm upstream... What are the differences? Ideally we should apply the exact patch from upstream, it should cleanly go away on a future LLVM upgrade...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:365,availability,failur,failures,365,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:365,deployability,fail,failures,365,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:114,energy efficiency,current,currently,114,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:334,integrability,event,eventually,334,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:407,interoperability,platform,platforms,407,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:321,performance,synch,synchronized,321,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:365,performance,failur,failures,365,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:365,reliability,fail,failures,365,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:360,safety,test,test,360,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:157,security,modif,modifying,157,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:360,testability,test,test,360,"> Apparently ROOT's llvm-project is not up-to-date. https://github.com/root-project/llvm-project/ matches what is currently in `master`. In this PR, you are modifying files in `interpreter/llvm-project/`, so *of course* these changes cannot be reflected in https://github.com/root-project/llvm-project/. This needs to be synchronized eventually, but first the test failures need to be addressed (across all platforms).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:0,availability,ping,ping,0,ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:5,availability,ping,ping,5,@ktf ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:36,performance,time,time,36,"Hi, I need to go back at this. Last time I tried I was unable to reproduce, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:258,availability,failur,failure,258,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:19,deployability,build,build,19,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:25,deployability,configurat,configuration,25,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:160,deployability,build,build,160,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:258,deployability,fail,failure,258,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:25,integrability,configur,configuration,25,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:25,modifiability,configur,configuration,25,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:258,performance,failur,failure,258,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:258,reliability,fail,failure,258,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:25,security,configur,configuration,25,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:53,testability,assert,asserts,53,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:81,testability,assert,assertions,81,"@ktf, what is your build configuration? To see these asserts one needs to enable assertions in LLVM with `-DLLVM_ENABLE_ASSERTIONS=On`. However, I'd suggest to build ROOT with debug LLVM with `-DLLVM_BUILD_TYPE=Debug`. This way you will be able to debug the failure directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:34,availability,down,download,34,"@ktf, I believe there is a way to download the container of the failing build. Not sure how. @Axel-Naumann probably knows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:47,deployability,contain,container,47,"@ktf, I believe there is a way to download the container of the failing build. Not sure how. @Axel-Naumann probably knows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:64,deployability,fail,failing,64,"@ktf, I believe there is a way to download the container of the failing build. Not sure how. @Axel-Naumann probably knows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:72,deployability,build,build,72,"@ktf, I believe there is a way to download the container of the failing build. Not sure how. @Axel-Naumann probably knows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:64,reliability,fail,failing,64,"@ktf, I believe there is a way to download the container of the failing build. Not sure how. @Axel-Naumann probably knows.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:75,availability,replic,replicate,75,There are instructions at the end of every (new) GitHub Actions run how to replicate the setup...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:50,availability,failur,failure,50,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1039,availability,uptim,uptime,1039,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1288,availability,failur,failure,1288,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:44,deployability,build,build,44,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:50,deployability,fail,failure,50,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:204,deployability,build,buildready,204,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:331,deployability,artifact,artifacts,331,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:381,deployability,build,build-artifacts,381,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:541,deployability,artifact,artifacts,541,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:769,deployability,Integr,Integration,769,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:924,deployability,version,version,924,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:958,deployability,version,version,958,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1005,deployability,releas,release,1005,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1134,deployability,build,build,1134,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1162,deployability,build,build,1162,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1190,deployability,build,build,1190,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1262,deployability,build,build,1262,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1288,deployability,fail,failure,1288,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:823,energy efficiency,reduc,reduce-memory-usage,823,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:857,energy efficiency,reduc,reduce-memory-usage,857,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:769,integrability,Integr,Integration,769,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:924,integrability,version,version,924,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:958,integrability,version,version,958,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:170,interoperability,registr,registry,170,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:769,interoperability,Integr,Integration,769,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1337,interoperability,xml,xml,1337,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:769,modifiability,Integr,Integration,769,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:924,modifiability,version,version,924,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:958,modifiability,version,version,958,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:50,performance,failur,failure,50,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:830,performance,memor,memory-usage,830,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:864,performance,memor,memory-usage,864,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1216,performance,parallel,parallel,1216,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1288,performance,failur,failure,1288,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1298,performance,parallel,parallel,1298,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:50,reliability,fail,failure,50,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:769,reliability,Integr,Integration,769,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1039,reliability,uptim,uptime,1039,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1288,reliability,fail,failure,1288,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1325,safety,Test,TestResults,1325,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:139,security,secur,security-opt,139,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:769,security,Integr,Integration,769,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:769,testability,Integr,Integration,769,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1325,testability,Test,TestResults,1325,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:701,usability,user,user,701,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:743,usability,user,user,743,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:830,usability,memor,memory-usage,830,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:864,usability,memor,memory-usage,864,"@ktf, here is how to get the fedora38 debug build failure according to the bot:. ```. Grab the image:. $ docker run --shm-size=1g -m 16g --security-opt label=disable -it registry.cern.ch/root-ci/fedora38:buildready. Then:. . . (. rm -rf /github/home/ROOT-CI. mkdir -p /github/home/ROOT-CI. ). (. curl --output /github/home/ROOT-CI/artifacts.tar.gz https://s3.cern.ch/swift/v1/ROOT-build-artifacts/fedora38/master/Debug/c8bf26fbd62398395855e8d992e7688980a1d318/2023-10-05.tar.gz. ). (. cd /github/home/ROOT-CI && tar -xf /github/home/ROOT-CI/artifacts.tar.gz. ). (. cd '/github/home/ROOT-CI/src'. git checkout master. git fetch. git reset --hard @{u}. ). (. cd '/github/home/ROOT-CI/src'. . git config user.email ""rootci@root.cern"". git config user.name 'ROOT Continous Integration'. . git fetch origin refs/pull/13808/head:reduce-memory-usage. git checkout reduce-memory-usage. git rebase master. ). (. which cmake. cmake --version. which c++ || true. c++ --version || true. uname -a || true. cat /etc/os-release || true. sw_vers || true. uptime || true. df || true. ). (. cmake -S '/github/home/ROOT-CI/src' -B '/github/home/ROOT-CI/build' -N -L. ). (. cmake --build '/github/home/ROOT-CI/build' --config 'Debug' --parallel '16'. ). (. cd '/github/home/ROOT-CI/build'. ctest --output-on-failure --parallel 16 --output-junit TestResults.xml. )```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:27,deployability,upgrad,upgrade,27,"@ktf we finally merged the upgrade to LLVM 16. Would you have time to rebase this, to apply the upstream version of `PagedVector`? If that one still fails, we will have to react quite soon to fix things upstream and avoid a ""broken"" LLVM 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:105,deployability,version,version,105,"@ktf we finally merged the upgrade to LLVM 16. Would you have time to rebase this, to apply the upstream version of `PagedVector`? If that one still fails, we will have to react quite soon to fix things upstream and avoid a ""broken"" LLVM 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:149,deployability,fail,fails,149,"@ktf we finally merged the upgrade to LLVM 16. Would you have time to rebase this, to apply the upstream version of `PagedVector`? If that one still fails, we will have to react quite soon to fix things upstream and avoid a ""broken"" LLVM 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:105,integrability,version,version,105,"@ktf we finally merged the upgrade to LLVM 16. Would you have time to rebase this, to apply the upstream version of `PagedVector`? If that one still fails, we will have to react quite soon to fix things upstream and avoid a ""broken"" LLVM 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:27,modifiability,upgrad,upgrade,27,"@ktf we finally merged the upgrade to LLVM 16. Would you have time to rebase this, to apply the upstream version of `PagedVector`? If that one still fails, we will have to react quite soon to fix things upstream and avoid a ""broken"" LLVM 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:105,modifiability,version,version,105,"@ktf we finally merged the upgrade to LLVM 16. Would you have time to rebase this, to apply the upstream version of `PagedVector`? If that one still fails, we will have to react quite soon to fix things upstream and avoid a ""broken"" LLVM 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:62,performance,time,time,62,"@ktf we finally merged the upgrade to LLVM 16. Would you have time to rebase this, to apply the upstream version of `PagedVector`? If that one still fails, we will have to react quite soon to fix things upstream and avoid a ""broken"" LLVM 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:149,reliability,fail,fails,149,"@ktf we finally merged the upgrade to LLVM 16. Would you have time to rebase this, to apply the upstream version of `PagedVector`? If that one still fails, we will have to react quite soon to fix things upstream and avoid a ""broken"" LLVM 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:216,safety,avoid,avoid,216,"@ktf we finally merged the upgrade to LLVM 16. Would you have time to rebase this, to apply the upstream version of `PagedVector`? If that one still fails, we will have to react quite soon to fix things upstream and avoid a ""broken"" LLVM 18.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:0,availability,ping,ping,0,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:60,availability,failur,failures,60,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:60,deployability,fail,failures,60,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:126,deployability,releas,releasing,126,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:60,performance,failur,failures,60,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:60,reliability,fail,failures,60,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:30,safety,test,test,30,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:120,safety,avoid,avoid,120,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:30,testability,test,test,30,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:168,usability,help,help,168,"ping, we need to imperatively test this asap because if the failures persist, we must take immediate action upstream to avoid releasing a broken Clang 18! @ktf can you help with this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:17,deployability,build,build,17,Triggering a new build to regenerate the artifacts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:41,deployability,artifact,artifacts,41,Triggering a new build to regenerate the artifacts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:41,availability,failur,failures,41,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:41,deployability,fail,failures,41,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:93,deployability,build,builds,93,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:508,deployability,integr,integrating,508,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:608,deployability,releas,releases,608,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:741,deployability,build,build,741,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:765,deployability,version,version,765,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:979,energy efficiency,measur,measurements,979,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1059,energy efficiency,reduc,reduces,1059,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:508,integrability,integr,integrating,508,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:765,integrability,version,version,765,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:508,interoperability,integr,integrating,508,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:508,modifiability,integr,integrating,508,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:765,modifiability,version,version,765,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:41,performance,failur,failures,41,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:234,performance,memor,memory,234,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:535,performance,synch,synchronized,535,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:41,reliability,fail,failures,41,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:508,reliability,integr,integrating,508,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:36,safety,test,test,36,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:411,safety,reme,remember,411,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:227,security,access,access,227,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:508,security,integr,integrating,508,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:36,testability,test,test,36,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:508,testability,integr,integrating,508,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1028,testability,simpl,simple,1028,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:234,usability,memor,memory,234,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:1028,usability,simpl,simple,1028,"Hi @ktf, as discussed yesterday the test failures are related to an issue in our incremental builds where Clad is not rebuilt after changes to the Clang headers. This leads to very weird symptoms because some ""stale"" functions access memory where they shouldn't and so on. I was hit by this problem already twice and it's tracked in https://github.com/root-project/root/issues/7977, so one would suppose that I remember by now but evidently I didn't... Apologies for the confusion and the delay it caused in integrating this. I've now synchronized the changes to https://github.com/root-project/llvm-project/releases/tag/ROOT-llvm16-20240116-01, moving the header to `clang/include/clang/Basic` as mentioned yesterday to keep the ability to build against a vanilla version of LLVM). @vgvassilev I put the commit only into `ROOT-llvm16`, not `cling-llvm16` because I think it's not that relevant for Cling standalone. Let me know if you disagree and I can of course move it. Some measurements of this change on my machine: for a simple `./bin/root.exe -q`, it reduces the maximum RSS from 217MB to 192MB and for `./bin/root.exe -q -e ""std::vector<int> v"" -e ""return 0;""` from 255MB to 230MB :clap:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:48,usability,close,close,48,"Very nice, thank you for your followup. Shall I close this one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:101,energy efficiency,measur,measure,101,"BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:26,security,Ident,IdentifiersLoaded,26,"BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:139,availability,sli,slightly,139,"> Very nice, thank you for your followup. Shall I close this one? No, please leave it open: I hijacked your branch and directly pushed the slightly modified commit there. It's currently running through our CI (which is a bit congested at the moment). Once all is green, we can merge :smiley: . > BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS. Ok, that's for a follow-up PR I would say.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:176,energy efficiency,current,currently,176,"> Very nice, thank you for your followup. Shall I close this one? No, please leave it open: I hijacked your branch and directly pushed the slightly modified commit there. It's currently running through our CI (which is a bit congested at the moment). Once all is green, we can merge :smiley: . > BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS. Ok, that's for a follow-up PR I would say.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:263,energy efficiency,green,green,263,"> Very nice, thank you for your followup. Shall I close this one? No, please leave it open: I hijacked your branch and directly pushed the slightly modified commit there. It's currently running through our CI (which is a bit congested at the moment). Once all is green, we can merge :smiley: . > BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS. Ok, that's for a follow-up PR I would say.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:397,energy efficiency,measur,measure,397,"> Very nice, thank you for your followup. Shall I close this one? No, please leave it open: I hijacked your branch and directly pushed the slightly modified commit there. It's currently running through our CI (which is a bit congested at the moment). Once all is green, we can merge :smiley: . > BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS. Ok, that's for a follow-up PR I would say.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:139,reliability,sli,slightly,139,"> Very nice, thank you for your followup. Shall I close this one? No, please leave it open: I hijacked your branch and directly pushed the slightly modified commit there. It's currently running through our CI (which is a bit congested at the moment). Once all is green, we can merge :smiley: . > BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS. Ok, that's for a follow-up PR I would say.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:148,security,modif,modified,148,"> Very nice, thank you for your followup. Shall I close this one? No, please leave it open: I hijacked your branch and directly pushed the slightly modified commit there. It's currently running through our CI (which is a bit congested at the moment). Once all is green, we can merge :smiley: . > BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS. Ok, that's for a follow-up PR I would say.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:322,security,Ident,IdentifiersLoaded,322,"> Very nice, thank you for your followup. Shall I close this one? No, please leave it open: I hijacked your branch and directly pushed the slightly modified commit there. It's currently running through our CI (which is a bit congested at the moment). Once all is green, we can merge :smiley: . > BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS. Ok, that's for a follow-up PR I would say.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:50,usability,close,close,50,"> Very nice, thank you for your followup. Shall I close this one? No, please leave it open: I hijacked your branch and directly pushed the slightly modified commit there. It's currently running through our CI (which is a bit congested at the moment). Once all is green, we can merge :smiley: . > BTW, I think you can move IdentifiersLoaded to be a paged vector as well, although one would need to measure the effect on RSS. Ok, that's for a follow-up PR I would say.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:42,deployability,releas,release,42,"Hi @ktf, if we were to backport this to a release, which one would ALICE be interested in, 6.30? Or would you be fine keeping the patch locally in your stack for now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:130,deployability,patch,patch,130,"Hi @ktf, if we were to backport this to a release, which one would ALICE be interested in, 6.30? Or would you be fine keeping the patch locally in your stack for now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:152,deployability,stack,stack,152,"Hi @ktf, if we were to backport this to a release, which one would ALICE be interested in, 6.30? Or would you be fine keeping the patch locally in your stack for now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:130,safety,patch,patch,130,"Hi @ktf, if we were to backport this to a release, which one would ALICE be interested in, 6.30? Or would you be fine keeping the patch locally in your stack for now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/pull/13808:130,security,patch,patch,130,"Hi @ktf, if we were to backport this to a release, which one would ALICE be interested in, 6.30? Or would you be fine keeping the patch locally in your stack for now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13808
https://github.com/root-project/root/issues/13815:478,availability,error,error,478,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:906,availability,error,error,906,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3099,availability,error,error,3099,"itly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3574,availability,error,error,3574," succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:5529,availability,error,error,5529,"pe_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6644,availability,error,errors,6644,"__is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6955,availability,error,error,6955,"0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type tra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7488,availability,error,errors,7488,"sted here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching construc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7906,availability,error,error,7906,"air<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8464,availability,error,error,8464,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8903,availability,error,errors,8903,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:375,deployability,modul,module,375,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:806,deployability,modul,module,806,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:2949,deployability,modul,module,2949,"stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3427,deployability,modul,module,3427,"r<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:5382,deployability,modul,module,5382,"ate '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7806,deployability,modul,module,7806,"ll definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_const",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1177,integrability,pub,public,1177,"`explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1503,integrability,sub,substituting,1503,"e 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:2670,integrability,pub,public,2670,"type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_construct",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3892,integrability,pub,public,3892,"er<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:4313,integrability,sub,substituting,4313,"p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward dec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6062,integrability,sub,substituting,6062," explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6870,integrability,pub,public,6870,"<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8379,integrability,pub,public,8379,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1527,interoperability,specif,specified,1527,"ond; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:4337,interoperability,specif,specified,4337,":19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:375,modifiability,modul,module,375,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:806,modifiability,modul,module,806,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:2949,modifiability,modul,module,2949,"stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3427,modifiability,modul,module,3427,"r<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:5382,modifiability,modul,module,5382,"ate '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:5808,modifiability,variab,variable,5808,"u/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7806,modifiability,modul,module,7806,"ll definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_const",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8098,modifiability,variab,variable,8098,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:478,performance,error,error,478,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:906,performance,error,error,906,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3099,performance,error,error,3099,"itly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3574,performance,error,error,3574," succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:5529,performance,error,error,5529,"pe_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6644,performance,error,errors,6644,"__is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6955,performance,error,error,6955,"0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type tra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7488,performance,error,errors,7488,"sted here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching construc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7906,performance,error,error,7906,"air<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8464,performance,error,error,8464,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8903,performance,error,errors,8903,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:35,reliability,doe,doesn,35,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:375,safety,modul,module,375,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:478,safety,error,error,478,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:806,safety,modul,module,806,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:906,safety,error,error,906,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:2949,safety,modul,module,2949,"stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3099,safety,error,error,3099,"itly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3427,safety,modul,module,3427,"r<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3574,safety,error,error,3574," succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:5382,safety,modul,module,5382,"ate '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:5529,safety,error,error,5529,"pe_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6644,safety,error,errors,6644,"__is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6955,safety,error,error,6955,"0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type tra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7488,safety,error,errors,7488,"sted here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching construc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7806,safety,modul,module,7806,"ll definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_const",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7906,safety,error,error,7906,"air<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8464,safety,error,error,8464,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8903,safety,error,errors,8903,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:478,usability,error,error,478,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:906,usability,error,error,906,"> I'm still investigating why this doesn't happen in `master` with LLVM 13... Oh well, this can be summarized as ""sheer luck"". Let me explain: In `master`, LLVM 13 only checks the `explicit` clause when trying to construct the `std::pair`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here. __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here. : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of tem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3099,usability,error,error,3099,"itly_default_constructible<Inner<int> > > >' requested here. explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. ```. Consequently `std::is_default_constructible_v<Inner<int>>` is not instantiated and the construction succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicit",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:3574,usability,error,error,3574," succeeds after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ```. With LLVM 16, Clang *also* checks the `requires` constraints immediately:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::pair<int, Inner<int>> p1;. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:194:11: error: field has incomplete type 'Inner<int>'. _T2 second; ///< The second member. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1040:25: error: incomplete type 'Inner<int>' used in type trait expression. = __bool_constant<__is_constructible(_Tp, _Args...)>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:1265:21: note: in instantiation of template type alias '__is_constructible_impl' requested here. : public __and_<__is_constructible_impl<_Tp>,. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:161:30: note: in instantiation of template class 'std::__is_implicitly_default_constructible<Inner<int> >' requested here . __enable_if_t<bool(_Bn::value)>...>;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:177:16: note: while substituting explicitly-specified template arguments into function template '__and_fn' . : decltype(__detail::__and_fn<_Bn...>(0)). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:182:29: note: in instantiation of t",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:5529,usability,error,error,5529,"pe_traits:182:29: note: in instantiation of template class 'std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > >' requested here . : __bool_constant<!bool(_Pp::value)>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:247:16: note: in instantiation of template class 'std::__not_<std::__and_<std::__is_implicitly_default_constructible<int>, std::__is_implicitly_default_constructible<Inner<int> > > >' requested here . explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,. ^. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6333,usability,satisfa,satisfaction,6333,"nt>'. template <> class Inner<int>;. ^. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6644,usability,error,errors,6644,"__is_constructible(_Tp);. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here . && is_default_constructible_v<_T2>. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:6955,usability,error,error,6955,"0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: while substituting template arguments into constraint expression here. && is_default_constructible_v<_T2>. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: while checking constraint satisfaction for function 'pair' required here. pair(). ^~~~. ROOT_prompt_2:1:28: note: in instantiation of template class 'std::pair<int, Inner<int> >' requested here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type tra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7488,usability,error,errors,7488,"sted here. std::pair<int, Inner<int>> p1;. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. (... more errors ...). ```. Consequently `std::is_default_constructible_v<Inner<int>>` is instantiated and we run into the problem described above, even after providing the full definition:. ```. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching construc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:7906,usability,error,error,7906,"air<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8464,usability,error,error,8464,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8903,usability,error,errors,8903,"nner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/lib/gcc/x86_64-pc-linux-gnu/13.2.0/../../../../include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```. To prove the point, it is possible to provoke the problem on `master` as well, by manually instantiating `std::is_default_constructible_v<Inner<int>>`:. ```. root [0] template <typename T> class Inner;. root [1] template <> class Inner<int>;. root [2] std::is_default_constructible_v<Inner<int>>. In module 'std' imported from input_line_1:1:. /opt/gcc/13.2.0/include/c++/13.2.0/type_traits:3251:54: error: incomplete type 'Inner<int>' used in type trait expression. inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);. ^. ROOT_prompt_2:1:6: note: in instantiation of variable template specialization 'std::is_default_constructible_v<Inner<int> >' requested here. std::is_default_constructible_v<Inner<int>>. ^. ROOT_prompt_1:1:19: note: forward declaration of 'Inner<int>'. template <> class Inner<int>;. ^. root [3] template <> class Inner<int> { public: int fValue; };. root [4] std::pair<int, Inner<int>> p2;. ROOT_prompt_4:1:28: error: no matching constructor for initialization of 'std::pair<int, Inner<int> >'. std::pair<int, Inner<int>> p2;. ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:249:7: note: candidate constructor not viable: constraints not satisfied. pair(). ^. /opt/gcc/13.2.0/include/c++/13.2.0/bits/stl_pair.h:251:12: note: because 'is_default_constructible_v<Inner<int> >' evaluated to false. && is_default_constructible_v<_T2>. ^. (... more errors ...). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:160,deployability,modul,module,160,See also https://github.com/root-project/root/issues/13461. This requires serious attention to the forward declaration writer or it requires to make the use of module/pcm (instead of the rootmap) file practical. See at least https://github.com/root-project/root/issues/13543 and https://github.com/root-project/root/issues/13481,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:160,modifiability,modul,module,160,See also https://github.com/root-project/root/issues/13461. This requires serious attention to the forward declaration writer or it requires to make the use of module/pcm (instead of the rootmap) file practical. See at least https://github.com/root-project/root/issues/13543 and https://github.com/root-project/root/issues/13481,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:201,reliability,pra,practical,201,See also https://github.com/root-project/root/issues/13461. This requires serious attention to the forward declaration writer or it requires to make the use of module/pcm (instead of the rootmap) file practical. See at least https://github.com/root-project/root/issues/13543 and https://github.com/root-project/root/issues/13481,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:160,safety,modul,module,160,See also https://github.com/root-project/root/issues/13461. This requires serious attention to the forward declaration writer or it requires to make the use of module/pcm (instead of the rootmap) file practical. See at least https://github.com/root-project/root/issues/13543 and https://github.com/root-project/root/issues/13481,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:85,safety,test,test,85,"Sorry, @pcanal - that's way too terse for me. Can you expand what a seemingly broken test design has to do with these issues? (Other than the fact that this is all about dictionaries.) Would a call help, between @hahnjo you and me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:85,testability,test,test,85,"Sorry, @pcanal - that's way too terse for me. Can you expand what a seemingly broken test design has to do with these issues? (Other than the fact that this is all about dictionaries.) Would a call help, between @hahnjo you and me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:198,usability,help,help,198,"Sorry, @pcanal - that's way too terse for me. Can you expand what a seemingly broken test design has to do with these issues? (Other than the fact that this is all about dictionaries.) Would a call help, between @hahnjo you and me?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1531,availability,failur,failure,1531,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1664,availability,error,error,1664,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1531,deployability,fail,failure,1531,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1712,deployability,fail,failed,1712,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1862,deployability,fail,failed,1862,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:306,energy efficiency,Load,Load,306,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:496,energy efficiency,load,load,496,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:823,energy efficiency,load,loaded,823,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1044,energy efficiency,Core,Core,1044,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1418,energy efficiency,Core,Core,1418,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1628,energy efficiency,Core,Core,1628,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:734,integrability,intermediar,intermediary,734,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:734,modifiability,interm,intermediary,734,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:306,performance,Load,Load,306,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:496,performance,load,load,496,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:823,performance,load,loaded,823,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1058,performance,I/O,I/O,1058,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1531,performance,failur,failure,1531,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1664,performance,error,error,1664,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:756,reliability,doe,does,756,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1531,reliability,fail,failure,1531,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1712,reliability,fail,failed,1712,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1862,reliability,fail,failed,1862,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:57,safety,compl,completely,57,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:179,safety,test,test,179,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:230,safety,test,test,230,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:249,safety,test,testing,249,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:638,safety,test,test,638,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:869,safety,test,test,869,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:945,safety,test,test,945,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1016,safety,test,test,1016,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1664,safety,error,error,1664,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:57,security,compl,completely,57,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:269,security,control,control,269,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:886,security,intrus,intrusive,886,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:179,testability,test,test,179,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:230,testability,test,test,230,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:249,testability,test,testing,249,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:269,testability,control,control,269,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:638,testability,test,test,638,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:869,testability,test,test,869,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:945,testability,test,test,945,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1016,testability,test,test,1016,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1433,usability,hint,hint,1433,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1664,usability,error,error,1664,"> has to do with these issues? Nothing. You are right. I completely misread the text when responding. TLDR: Read just the last paragraph. > Can you expand what a seemingly broken test design. Can you tell me what is broken in the test design? It is testing a ""natural"" control flow for a REPL:. ```. First Load a bunch of stuff that, in this case, include a forward declaration. Second do:. if (some entity (directly or indirectly) that happens to have a forward declaration is not defined yet). load the definition for the entity. ```. (here the entity is `std::pair<int, Inner<int>>` and the forward declared type is `Inner<int>`). The test is properly revealing that (as described by Jonas) this pattern is now broken because some intermediary template does not get recalculated or reinstantiated when the definition is loaded. One could be tempted to 'improve' the test with a less intrusive way of checking but this would likely render the test useless for its intended purpose. In the real use case those same test are buried deep in the Core/Meta and I/O and should then be changed there too (assuming it is 'possible' to do so). For more details on the original problem see: . https://sft.its.cern.ch/jira/browse/ROOT-7462. and detailed analyis:. https://github.com/root-project/roottest/blob/master/root/meta/ROOT-7462/README. . So most likely than not we need to find a way to solve this within Cling and/or Core/Meta. One hint is that the reproducer symptoms as described by Jonas seem familiar. For example, it shows a failure to instantiate the template `std::is_default_constructible_v`. When this is triggered by Core/Meta/Cling, eg `ClassInfo` the error is (supposed to be) supressed **AND** the failed template instantiation is supposed to be cleaned up and removed. It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:80,deployability,fail,failed,80,"> It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed. @pcanal please read https://github.com/root-project/root/issues/13815#issuecomment-1750375424 carefully again where I explain in detail that the same symptom happens with LLVM 13 and the test just passes by sheer luck. So just saying ""you broke it in the upgrade to LLVM 16"" is an oversimplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:385,deployability,upgrad,upgrade,385,"> It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed. @pcanal please read https://github.com/root-project/root/issues/13815#issuecomment-1750375424 carefully again where I explain in detail that the same symptom happens with LLVM 13 and the test just passes by sheer luck. So just saying ""you broke it in the upgrade to LLVM 16"" is an oversimplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:385,modifiability,upgrad,upgrade,385,"> It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed. @pcanal please read https://github.com/root-project/root/issues/13815#issuecomment-1750375424 carefully again where I explain in detail that the same symptom happens with LLVM 13 and the test just passes by sheer luck. So just saying ""you broke it in the upgrade to LLVM 16"" is an oversimplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:80,reliability,fail,failed,80,"> It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed. @pcanal please read https://github.com/root-project/root/issues/13815#issuecomment-1750375424 carefully again where I explain in detail that the same symptom happens with LLVM 13 and the test just passes by sheer luck. So just saying ""you broke it in the upgrade to LLVM 16"" is an oversimplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:317,safety,test,test,317,"> It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed. @pcanal please read https://github.com/root-project/root/issues/13815#issuecomment-1750375424 carefully again where I explain in detail that the same symptom happens with LLVM 13 and the test just passes by sheer luck. So just saying ""you broke it in the upgrade to LLVM 16"" is an oversimplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:317,testability,test,test,317,"> It seems that the problem might be that with Clang16 some side-effects of the failed instantiation are no longer fully removed. @pcanal please read https://github.com/root-project/root/issues/13815#issuecomment-1750375424 carefully again where I explain in detail that the same symptom happens with LLVM 13 and the test just passes by sheer luck. So just saying ""you broke it in the upgrade to LLVM 16"" is an oversimplification.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:185,availability,recov,recovery,185,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:185,deployability,recov,recovery,185,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:324,deployability,fail,fail,324,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:220,energy efficiency,Core,Core,220,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:185,reliability,recov,recovery,185,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:324,reliability,fail,fail,324,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:185,safety,recov,recovery,185,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:185,security,recov,recovery,185,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:95,testability,simpl,simplified,95,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:95,usability,simpl,simplified,95,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:276,usability,command,command,276,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:340,deployability,unload,unloader,340,"Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. . Either way, it seems that the issue is that the transaction unloader is not unloading enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:356,deployability,unload,unloading,356,"Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. . Either way, it seems that the issue is that the transaction unloader is not unloading enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:196,performance,time,time,196,"Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. . Either way, it seems that the issue is that the transaction unloader is not unloading enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:159,safety,test,test,159,"Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. . Either way, it seems that the issue is that the transaction unloader is not unloading enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:159,testability,test,test,159,"Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. . Either way, it seems that the issue is that the transaction unloader is not unloading enough.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:319,availability,replic,replicate,319,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:715,availability,error,error,715,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:750,availability,error,error,750,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:364,deployability,fail,fails,364,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:736,deployability,fail,failed,736,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:345,integrability,event,events,345,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:198,performance,time,time,198,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:715,performance,error,error,715,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:750,performance,error,error,750,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:364,reliability,fail,fails,364,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:736,reliability,fail,failed,736,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1089,reliability,doe,does,1089,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:161,safety,test,test,161,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:285,safety,valid,valid,285,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:715,safety,error,error,715,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:750,safety,error,error,750,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1072,safety,avoid,avoid,1072,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:161,testability,test,test,161,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:715,usability,error,error,715,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:750,usability,error,error,750,"> Actually with the date we have so far, we do not know whether the problem is pre-exiting or not. To know we would need to use (in the same code pattern as the test) a class that triggers the same time of side effect (template instantiation) as is done by LLVM 16 with the pair. Yes, valid point. The following should replicate the sequence of events and already fails in ROOT v6.20 with LLVM 5:. ```. root [0] namespace NS { template <typename T> struct A; }. root [1] template <typename T> struct B { static_assert(std::is_default_constructible_v<T>); };. root [2] TClass::GetClass(""B<NS::A<int>>""). (TClass *) nullptr. root [3] namespace NS { template <> struct A<int> { int v; }; }. root [4] B<NS::A<int>> b;. error: static_assert failed. fatal error: cannot open file 'input_line_114': No such file or directory. ROOT_prompt_4:1:15: note: in instantiation of template class '__cling_N50::B<NS::A<int> >' requested here. B<NS::A<int>> b;. ^. ```. whereas the instantiation works fine without the call to `TClass::GetClass`. (note that the `namespace NS` is needed to avoid bogus `'A' does not name a template but is followed by template arguments` in v6.22 and older)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:62,deployability,unload,unloader,62,"> Either way, it seems that the issue is that the transaction unloader is not unloading enough. I've been trying for a bit, and it's actually not too hard to make the `DeclUnloader` reset a `VarDecl`'s `EvaluatedStmt`:. ```diff. diff --git a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. index 25c01b1ef3..004ee9eaff 100644. --- a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. +++ b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. @@ -662,6 +662,14 @@ namespace cling {. MaybeRemoveDeclFromModule(GD);. }. . + // VD->dump();. + if (auto *Evaluated = VD->getEvaluatedStmt()) {. + llvm::errs() << ""DeclUnloader: "" << VD->getNameAsString() << ""\n"";. + Evaluated->WasEvaluated = false;. + Evaluated->Evaluated = APValue();. + // VD->dump();. + }. +. // VarDecl : DeclaratiorDecl, Redeclarable. bool Successful = VisitRedeclarable(VD, VD->getDeclContext());. Successful &= VisitDeclaratorDecl(VD);. ```. This ensures that the initialization is re-evaluated the next time. Unfortunately this is not sufficient because the `TypeTraitExpr` has its value passed at construction time, so the result is just the same as before. P.S. https://github.com/root-project/root/pull/13565 doesn't help either",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:78,deployability,unload,unloading,78,"> Either way, it seems that the issue is that the transaction unloader is not unloading enough. I've been trying for a bit, and it's actually not too hard to make the `DeclUnloader` reset a `VarDecl`'s `EvaluatedStmt`:. ```diff. diff --git a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. index 25c01b1ef3..004ee9eaff 100644. --- a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. +++ b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. @@ -662,6 +662,14 @@ namespace cling {. MaybeRemoveDeclFromModule(GD);. }. . + // VD->dump();. + if (auto *Evaluated = VD->getEvaluatedStmt()) {. + llvm::errs() << ""DeclUnloader: "" << VD->getNameAsString() << ""\n"";. + Evaluated->WasEvaluated = false;. + Evaluated->Evaluated = APValue();. + // VD->dump();. + }. +. // VarDecl : DeclaratiorDecl, Redeclarable. bool Successful = VisitRedeclarable(VD, VD->getDeclContext());. Successful &= VisitDeclaratorDecl(VD);. ```. This ensures that the initialization is re-evaluated the next time. Unfortunately this is not sufficient because the `TypeTraitExpr` has its value passed at construction time, so the result is just the same as before. P.S. https://github.com/root-project/root/pull/13565 doesn't help either",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1030,performance,time,time,1030,"> Either way, it seems that the issue is that the transaction unloader is not unloading enough. I've been trying for a bit, and it's actually not too hard to make the `DeclUnloader` reset a `VarDecl`'s `EvaluatedStmt`:. ```diff. diff --git a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. index 25c01b1ef3..004ee9eaff 100644. --- a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. +++ b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. @@ -662,6 +662,14 @@ namespace cling {. MaybeRemoveDeclFromModule(GD);. }. . + // VD->dump();. + if (auto *Evaluated = VD->getEvaluatedStmt()) {. + llvm::errs() << ""DeclUnloader: "" << VD->getNameAsString() << ""\n"";. + Evaluated->WasEvaluated = false;. + Evaluated->Evaluated = APValue();. + // VD->dump();. + }. +. // VarDecl : DeclaratiorDecl, Redeclarable. bool Successful = VisitRedeclarable(VD, VD->getDeclContext());. Successful &= VisitDeclaratorDecl(VD);. ```. This ensures that the initialization is re-evaluated the next time. Unfortunately this is not sufficient because the `TypeTraitExpr` has its value passed at construction time, so the result is just the same as before. P.S. https://github.com/root-project/root/pull/13565 doesn't help either",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1138,performance,time,time,1138,"> Either way, it seems that the issue is that the transaction unloader is not unloading enough. I've been trying for a bit, and it's actually not too hard to make the `DeclUnloader` reset a `VarDecl`'s `EvaluatedStmt`:. ```diff. diff --git a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. index 25c01b1ef3..004ee9eaff 100644. --- a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. +++ b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. @@ -662,6 +662,14 @@ namespace cling {. MaybeRemoveDeclFromModule(GD);. }. . + // VD->dump();. + if (auto *Evaluated = VD->getEvaluatedStmt()) {. + llvm::errs() << ""DeclUnloader: "" << VD->getNameAsString() << ""\n"";. + Evaluated->WasEvaluated = false;. + Evaluated->Evaluated = APValue();. + // VD->dump();. + }. +. // VarDecl : DeclaratiorDecl, Redeclarable. bool Successful = VisitRedeclarable(VD, VD->getDeclContext());. Successful &= VisitDeclaratorDecl(VD);. ```. This ensures that the initialization is re-evaluated the next time. Unfortunately this is not sufficient because the `TypeTraitExpr` has its value passed at construction time, so the result is just the same as before. P.S. https://github.com/root-project/root/pull/13565 doesn't help either",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1239,reliability,doe,doesn,1239,"> Either way, it seems that the issue is that the transaction unloader is not unloading enough. I've been trying for a bit, and it's actually not too hard to make the `DeclUnloader` reset a `VarDecl`'s `EvaluatedStmt`:. ```diff. diff --git a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. index 25c01b1ef3..004ee9eaff 100644. --- a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. +++ b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. @@ -662,6 +662,14 @@ namespace cling {. MaybeRemoveDeclFromModule(GD);. }. . + // VD->dump();. + if (auto *Evaluated = VD->getEvaluatedStmt()) {. + llvm::errs() << ""DeclUnloader: "" << VD->getNameAsString() << ""\n"";. + Evaluated->WasEvaluated = false;. + Evaluated->Evaluated = APValue();. + // VD->dump();. + }. +. // VarDecl : DeclaratiorDecl, Redeclarable. bool Successful = VisitRedeclarable(VD, VD->getDeclContext());. Successful &= VisitDeclaratorDecl(VD);. ```. This ensures that the initialization is re-evaluated the next time. Unfortunately this is not sufficient because the `TypeTraitExpr` has its value passed at construction time, so the result is just the same as before. P.S. https://github.com/root-project/root/pull/13565 doesn't help either",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1247,usability,help,help,1247,"> Either way, it seems that the issue is that the transaction unloader is not unloading enough. I've been trying for a bit, and it's actually not too hard to make the `DeclUnloader` reset a `VarDecl`'s `EvaluatedStmt`:. ```diff. diff --git a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. index 25c01b1ef3..004ee9eaff 100644. --- a/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. +++ b/interpreter/cling/lib/Interpreter/DeclUnloader.cpp. @@ -662,6 +662,14 @@ namespace cling {. MaybeRemoveDeclFromModule(GD);. }. . + // VD->dump();. + if (auto *Evaluated = VD->getEvaluatedStmt()) {. + llvm::errs() << ""DeclUnloader: "" << VD->getNameAsString() << ""\n"";. + Evaluated->WasEvaluated = false;. + Evaluated->Evaluated = APValue();. + // VD->dump();. + }. +. // VarDecl : DeclaratiorDecl, Redeclarable. bool Successful = VisitRedeclarable(VD, VD->getDeclContext());. Successful &= VisitDeclaratorDecl(VD);. ```. This ensures that the initialization is re-evaluated the next time. Unfortunately this is not sufficient because the `TypeTraitExpr` has its value passed at construction time, so the result is just the same as before. P.S. https://github.com/root-project/root/pull/13565 doesn't help either",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:12,deployability,fail,fail,12,"It seems we fail to react on the fact that a forward declaration requires complete type. Without a debugger at hand, it looks like clang misses some callback to `Sema::RequireCompleteType` at the place where we instantiate the template argument. How did you conclude that the issue is in the DeclUnloader?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:12,reliability,fail,fail,12,"It seems we fail to react on the fact that a forward declaration requires complete type. Without a debugger at hand, it looks like clang misses some callback to `Sema::RequireCompleteType` at the place where we instantiate the template argument. How did you conclude that the issue is in the DeclUnloader?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:74,safety,compl,complete,74,"It seems we fail to react on the fact that a forward declaration requires complete type. Without a debugger at hand, it looks like clang misses some callback to `Sema::RequireCompleteType` at the place where we instantiate the template argument. How did you conclude that the issue is in the DeclUnloader?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:74,security,compl,complete,74,"It seems we fail to react on the fact that a forward declaration requires complete type. Without a debugger at hand, it looks like clang misses some callback to `Sema::RequireCompleteType` at the place where we instantiate the template argument. How did you conclude that the issue is in the DeclUnloader?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:233,availability,error,error,233,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:620,availability,failur,failure,620,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:170,deployability,fail,fails,170,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:550,deployability,unload,unloader,550,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:620,deployability,fail,failure,620,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:279,energy efficiency,load,loaded,279,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:239,integrability,messag,messages,239,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:239,interoperability,messag,messages,239,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:233,performance,error,error,233,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:279,performance,load,loaded,279,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:620,performance,failur,failure,620,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:170,reliability,fail,fails,170,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:620,reliability,fail,failure,620,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:23,safety,test,test,23,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:233,safety,error,error,233,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:385,safety,compl,complete,385,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:628,safety,detect,detection,628,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:385,security,compl,complete,385,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:628,security,detect,detection,628,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:23,testability,test,test,23,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:233,usability,error,error,233,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:287,usability,indicat,indicates,287,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:676,usability,behavi,behavior,676,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:699,availability,error,errors,699,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:719,availability,Error,Error,719,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:297,deployability,fail,failing,297,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:416,deployability,upgrad,upgrade,416,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:576,energy efficiency,load,loads,576,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:671,energy efficiency,load,loaded,671,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:416,modifiability,upgrad,upgrade,416,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:576,performance,load,loads,576,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:671,performance,load,loaded,671,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:699,performance,error,errors,699,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:719,performance,Error,Error,719,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:297,reliability,fail,failing,297,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:360,reliability,pra,pragmatic,360,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:305,safety,test,test,305,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:463,safety,test,test,463,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:507,safety,test,tests,507,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:699,safety,error,errors,699,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:719,safety,Error,Error,719,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:305,testability,test,test,305,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:463,testability,test,test,463,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:507,testability,test,tests,507,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:216,usability,clear,clearly,216,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:517,usability,behavi,behavior,517,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:699,usability,error,errors,699,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:719,usability,Error,Error,719,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:44,deployability,upgrad,upgrade,44,I agree this should not hold off the llvm16 upgrade assuming we can move forward by disabling the test and work on a fix at the same time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:44,modifiability,upgrad,upgrade,44,I agree this should not hold off the llvm16 upgrade assuming we can move forward by disabling the test and work on a fix at the same time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:133,performance,time,time,133,I agree this should not hold off the llvm16 upgrade assuming we can move forward by disabling the test and work on a fix at the same time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:98,safety,test,test,98,I agree this should not hold off the llvm16 upgrade assuming we can move forward by disabling the test and work on a fix at the same time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:98,testability,test,test,98,I agree this should not hold off the llvm16 upgrade assuming we can move forward by disabling the test and work on a fix at the same time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:147,energy efficiency,load,loads,147,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:256,energy efficiency,load,load,256,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:147,performance,load,loads,147,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:256,performance,load,load,256,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:34,safety,test,test,34,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:78,safety,test,tests,78,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:216,safety,test,test,216,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:360,safety,test,test,360,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:34,testability,test,test,34,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:78,testability,test,tests,78,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:216,testability,test,test,216,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:360,testability,test,test,360,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:88,usability,behavi,behavior,88,"> One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads inst2lib. I am not following the details but the nature of the test is to see what happens if you late load the right declaration after the partial one has been used/tickled, so It sounds like splitting the test would render it 'moot'.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:417,deployability,fail,fail,417,"> IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem. I would agree if it was not the fact that this is being triggered by a benign and wildely used class ... i.e. `std::pair` ... . Consequently, it my opinion we are almost guaranteed to have this problem appear almost immediately in the wild (i.e. code and code flow that worked before will now fail)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:417,reliability,fail,fail,417,"> IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem. I would agree if it was not the fact that this is being triggered by a benign and wildely used class ... i.e. `std::pair` ... . Consequently, it my opinion we are almost guaranteed to have this problem appear almost immediately in the wild (i.e. code and code flow that worked before will now fail)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:81,usability,clear,clearly,81,"> IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem. I would agree if it was not the fact that this is being triggered by a benign and wildely used class ... i.e. `std::pair` ... . Consequently, it my opinion we are almost guaranteed to have this problem appear almost immediately in the wild (i.e. code and code flow that worked before will now fail)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:48,deployability,modul,modules,48,These types of things are the reason we went to modules and are advocating people to transition. This infrastructure cannot work at 100% and it is pretty much best effort.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:102,deployability,infrastructur,infrastructure,102,These types of things are the reason we went to modules and are advocating people to transition. This infrastructure cannot work at 100% and it is pretty much best effort.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:48,modifiability,modul,modules,48,These types of things are the reason we went to modules and are advocating people to transition. This infrastructure cannot work at 100% and it is pretty much best effort.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:48,safety,modul,modules,48,These types of things are the reason we went to modules and are advocating people to transition. This infrastructure cannot work at 100% and it is pretty much best effort.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:13,deployability,modul,modules,13,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:217,deployability,modul,module,217,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:349,deployability,modul,module,349,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:148,energy efficiency,Green,Green,148,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:13,modifiability,modul,modules,13,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:217,modifiability,modul,module,217,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:349,modifiability,modul,module,349,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:13,safety,modul,modules,13,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:217,safety,modul,module,217,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:349,safety,modul,module,349,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:154,usability,experien,experience,154,> we went to modules and are advocating people to transition. . Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > These types of things are the reason we went to module. Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:15,deployability,modul,modules,15,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:298,deployability,modul,module,298,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:436,deployability,modul,module,436,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:464,deployability,modul,modules,464,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:490,deployability,build,build,490,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:501,deployability,modul,modules,501,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:154,energy efficiency,Green,Green,154,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:15,modifiability,modul,modules,15,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:298,modifiability,modul,module,298,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:436,modifiability,modul,module,436,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:464,modifiability,modul,modules,464,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:501,modifiability,modul,modules,501,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:15,safety,modul,modules,15,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:298,safety,modul,module,298,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:436,safety,modul,module,436,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:464,safety,modul,modules,464,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:501,safety,modul,modules,501,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:160,usability,experien,experience,160,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:455,usability,support,supports,455,> > we went to modules and are advocating people to transition. > . > Too bad there is a few more things to fix up to make the transition easy (see Chris Green experience). > . There are things to do to improve it but none seem major blockers. . > > These types of things are the reason we went to module. > . > Humm ... this would not address this ... this is a case of incremental development (eg. we have not migrated `ACLiC` to use module yet). ACLiC supports modules pretty well if we build with modules on. .,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:17,deployability,modul,modules,17,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:43,deployability,build,build,43,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:54,deployability,modul,modules,54,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:163,deployability,modul,modules,163,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:307,deployability,modul,modules,307,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:670,deployability,releas,release,670,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:753,deployability,releas,release,753,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:17,modifiability,modul,modules,17,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:54,modifiability,modul,modules,54,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:163,modifiability,modul,modules,163,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:307,modifiability,modul,modules,307,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:17,safety,modul,modules,17,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:54,safety,modul,modules,54,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:163,safety,modul,modules,163,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:307,safety,modul,modules,307,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:501,safety,test,test,501,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:722,safety,test,test,722,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:489,testability,regress,regression,489,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:501,testability,test,test,501,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:722,testability,test,test,722,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:8,usability,support,supports,8,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:277,usability,user,user,277,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:540,usability,user,user,540,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:556,usability,stop,stop,556,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:771,usability,prefer,prefer,771,"> ACLiC supports modules pretty well if we build with modules on. Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). > There are things to do to improve it but none seem major blockers. They deterred at least one user from proceeding. Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:19,deployability,modul,modules,19,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:45,deployability,build,build,45,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:56,deployability,modul,modules,56,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:171,deployability,modul,modules,171,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:247,deployability,modul,modules,247,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:259,deployability,modul,modulemaps,259,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:447,deployability,modul,modules,447,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:501,deployability,modul,modules,501,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:864,deployability,releas,release,864,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:947,deployability,releas,release,947,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1079,deployability,modul,modules,1079,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1235,deployability,modul,modules,1235,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:19,modifiability,modul,modules,19,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:56,modifiability,modul,modules,56,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:171,modifiability,modul,modules,171,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:247,modifiability,modul,modules,247,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:259,modifiability,modul,modulemaps,259,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:447,modifiability,modul,modules,447,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:501,modifiability,modul,modules,501,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1079,modifiability,modul,modules,1079,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1235,modifiability,modul,modules,1235,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:19,safety,modul,modules,19,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:56,safety,modul,modules,56,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:171,safety,modul,modules,171,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:247,safety,modul,modules,247,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:259,safety,modul,modulemaps,259,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:447,safety,modul,modules,447,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:501,safety,modul,modules,501,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:695,safety,test,test,695,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:916,safety,test,test,916,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1079,safety,modul,modules,1079,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:1235,safety,modul,modules,1235,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:428,testability,plan,planned,428,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:683,testability,regress,regression,683,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:695,testability,test,test,695,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:916,testability,test,test,916,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:10,usability,support,supports,10,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:381,usability,user,user,381,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:734,usability,user,user,734,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:750,usability,stop,stop,750,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13815:965,usability,prefer,prefer,965,"> > ACLiC supports modules pretty well if we build with modules on. > . > Is that code already uploaded? How do you turn it on? (I.e. we are talking about ACLiC producing modules, right?). This code has been there for years. Yea aclic can produce modules and modulemaps. . > . > > There are things to do to improve it but none seem major blockers. > . > They deterred at least one user from proceeding. > . I was not aware they planned to move to modules and I was not aware they gave up. . > Anyway, modules are not at this moment widely used (CMSSW is NOT using them in production) and thus are not a solution to this problem. If the PR we are talking is merge as-is, it will be a regression (test will need to be disabled and real user cases will stop working). I assume it will be fine to merge it nonetheless **as long as** this issue is resolved before is a release a made (i.e. this issue and re-enabling the test will be a blocker for the release). I would prefer that this is investigated before merging though. I do not oppose to what you say here. However, as I said, modules are designed to solve these issues which are next to impossible to fix. If we can fix it that’s great but my general r recommendation is to move to modules and reach out if there are problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13815
https://github.com/root-project/root/issues/13816:25,deployability,updat,updated,25,Thanks. It is really not updated. I will provide PR soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13816
https://github.com/root-project/root/issues/13816:25,safety,updat,updated,25,Thanks. It is really not updated. I will provide PR soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13816
https://github.com/root-project/root/issues/13816:25,security,updat,updated,25,Thanks. It is really not updated. I will provide PR soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13816
https://github.com/root-project/root/issues/13816:98,deployability,Updat,Update,98,"https://github.com/root-project/root/pull/13817 will fix the problem. Actually, it is missing `c1.Update()` at the end of such macro.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13816
https://github.com/root-project/root/issues/13816:98,safety,Updat,Update,98,"https://github.com/root-project/root/pull/13817 will fix the problem. Actually, it is missing `c1.Update()` at the end of such macro.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13816
https://github.com/root-project/root/issues/13816:98,security,Updat,Update,98,"https://github.com/root-project/root/pull/13817 will fix the problem. Actually, it is missing `c1.Update()` at the end of such macro.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13816
https://github.com/root-project/root/pull/13818:11,deployability,build,build,11,@phsft-bot build with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13818
https://github.com/root-project/root/pull/13819:11,deployability,build,build,11,@phsft-bot build on ROOT-ubuntu18.04 with flags -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13819
https://github.com/root-project/root/pull/13819:67,availability,failur,failures,67,@dpiparo this fix should be included to avoid some of the sporadic failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13819
https://github.com/root-project/root/pull/13819:67,deployability,fail,failures,67,@dpiparo this fix should be included to avoid some of the sporadic failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13819
https://github.com/root-project/root/pull/13819:67,performance,failur,failures,67,@dpiparo this fix should be included to avoid some of the sporadic failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13819
https://github.com/root-project/root/pull/13819:67,reliability,fail,failures,67,@dpiparo this fix should be included to avoid some of the sporadic failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13819
https://github.com/root-project/root/pull/13819:40,safety,avoid,avoid,40,@dpiparo this fix should be included to avoid some of the sporadic failures,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13819
https://github.com/root-project/root/pull/13821:36,availability,error,errors,36,Hard to assess the situation due to errors in connecting to eospublic. Relaunching the builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13821
https://github.com/root-project/root/pull/13821:87,deployability,build,builds,87,Hard to assess the situation due to errors in connecting to eospublic. Relaunching the builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13821
https://github.com/root-project/root/pull/13821:36,performance,error,errors,36,Hard to assess the situation due to errors in connecting to eospublic. Relaunching the builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13821
https://github.com/root-project/root/pull/13821:36,safety,error,errors,36,Hard to assess the situation due to errors in connecting to eospublic. Relaunching the builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13821
https://github.com/root-project/root/pull/13821:8,security,assess,assess,8,Hard to assess the situation due to errors in connecting to eospublic. Relaunching the builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13821
https://github.com/root-project/root/pull/13821:36,usability,error,errors,36,Hard to assess the situation due to errors in connecting to eospublic. Relaunching the builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13821
https://github.com/root-project/root/pull/13821:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13821
https://github.com/root-project/root/pull/13823:4,availability,error,errors,4,The errors above have been fixed to a change by @andresailer (thanks!). Relaunching the builds: @phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13823
https://github.com/root-project/root/pull/13823:88,deployability,build,builds,88,The errors above have been fixed to a change by @andresailer (thanks!). Relaunching the builds: @phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13823
https://github.com/root-project/root/pull/13823:107,deployability,build,build,107,The errors above have been fixed to a change by @andresailer (thanks!). Relaunching the builds: @phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13823
https://github.com/root-project/root/pull/13823:4,performance,error,errors,4,The errors above have been fixed to a change by @andresailer (thanks!). Relaunching the builds: @phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13823
https://github.com/root-project/root/pull/13823:4,safety,error,errors,4,The errors above have been fixed to a change by @andresailer (thanks!). Relaunching the builds: @phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13823
https://github.com/root-project/root/pull/13823:4,usability,error,errors,4,The errors above have been fixed to a change by @andresailer (thanks!). Relaunching the builds: @phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13823
https://github.com/root-project/root/pull/13823:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13823
https://github.com/root-project/root/pull/13823:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/13823
https://github.com/root-project/root/issues/13825:7,deployability,instal,install,7,"When I install ROOT on macOS from sources the png library is found in:. ```. -- Found PNG: /usr/local/lib/libpng.dylib (found version ""1.6.40"") . ```. And it works fine with ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:126,deployability,version,version,126,"When I install ROOT on macOS from sources the png library is found in:. ```. -- Found PNG: /usr/local/lib/libpng.dylib (found version ""1.6.40"") . ```. And it works fine with ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:126,integrability,version,version,126,"When I install ROOT on macOS from sources the png library is found in:. ```. -- Found PNG: /usr/local/lib/libpng.dylib (found version ""1.6.40"") . ```. And it works fine with ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:126,modifiability,version,version,126,"When I install ROOT on macOS from sources the png library is found in:. ```. -- Found PNG: /usr/local/lib/libpng.dylib (found version ""1.6.40"") . ```. And it works fine with ROOT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:21,availability,error,error,21,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:278,availability,error,error,278,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:154,deployability,version,versions,154,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:183,deployability,build,build,183,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:27,integrability,messag,message,27,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:154,integrability,version,versions,154,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:27,interoperability,messag,message,27,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:154,modifiability,version,versions,154,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:21,performance,error,error,21,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:278,performance,error,error,278,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:226,reliability,doe,doesn,226,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:21,safety,error,error,21,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:278,safety,error,error,278,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:21,usability,error,error,21,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:278,usability,error,error,278,"@unelg just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch - thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:419,availability,error,error,419,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:676,availability,error,error,676,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:239,deployability,updat,update,239,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:552,deployability,version,versions,552,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:581,deployability,build,build,581,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:425,integrability,messag,message,425,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:552,integrability,version,versions,552,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:425,interoperability,messag,message,425,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:552,modifiability,version,versions,552,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:157,performance,time,time,157,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:419,performance,error,error,419,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:676,performance,error,error,676,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:624,reliability,doe,doesn,624,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:239,safety,updat,update,239,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:419,safety,error,error,419,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:676,safety,error,error,676,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:239,security,updat,update,239,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:949,security,auth,auth,949,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:419,usability,error,error,419,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:676,usability,error,error,676,"No. I dont think the problem is understood. In my software I link with another library compiled with the system libraries which have a recent libpng. At run time ROOT finds the old ones from libpng inside imagemagic. It is not too hard to update the lib png. Do you want me to write what I do? G. > On Dec 5, 2023, at 2:52 PM, Axel Naumann ***@***.***> wrote:. > . > . > @unelg <https://github.com/unelg> just FYI your error message is independent of whether ROOT's png is too old or not: you are mixing library and header of libpng from two different versions, likely in your own build? Please don't :-) If what I say here doesn't make sense please post a reproducer of this error at https://root-forum.cern.ch <https://root-forum.cern.ch/> - thanks! > . > —. > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/13825#issuecomment-1840834891>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAVOOJIRSHYYX74ALYJ55JLYH4RIZAVCNFSM6AAAAAA5W3TU4SVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNBQHAZTIOBZGE>. > You are receiving this because you were mentioned. > .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:75,deployability,stack,stack,75,"Hi @unelg - you missed my point, I'm trying to help you with your software stack. Even if we update libpng you still have a problem because you are mixing multiple libpng versions. Up to you :-) But please at https://root-forum.cern.ch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:93,deployability,updat,update,93,"Hi @unelg - you missed my point, I'm trying to help you with your software stack. Even if we update libpng you still have a problem because you are mixing multiple libpng versions. Up to you :-) But please at https://root-forum.cern.ch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:171,deployability,version,versions,171,"Hi @unelg - you missed my point, I'm trying to help you with your software stack. Even if we update libpng you still have a problem because you are mixing multiple libpng versions. Up to you :-) But please at https://root-forum.cern.ch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:171,integrability,version,versions,171,"Hi @unelg - you missed my point, I'm trying to help you with your software stack. Even if we update libpng you still have a problem because you are mixing multiple libpng versions. Up to you :-) But please at https://root-forum.cern.ch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:171,modifiability,version,versions,171,"Hi @unelg - you missed my point, I'm trying to help you with your software stack. Even if we update libpng you still have a problem because you are mixing multiple libpng versions. Up to you :-) But please at https://root-forum.cern.ch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:93,safety,updat,update,93,"Hi @unelg - you missed my point, I'm trying to help you with your software stack. Even if we update libpng you still have a problem because you are mixing multiple libpng versions. Up to you :-) But please at https://root-forum.cern.ch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
https://github.com/root-project/root/issues/13825:93,security,updat,update,93,"Hi @unelg - you missed my point, I'm trying to help you with your software stack. Even if we update libpng you still have a problem because you are mixing multiple libpng versions. Up to you :-) But please at https://root-forum.cern.ch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/13825
